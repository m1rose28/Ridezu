./s3/image_check.php:function getExtension($str) 
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:	public static function getBucket($bucket, $prefix = null, $marker = null, $maxKeys = null) {
./s3/S3.php:		$response = $rest->getResponse();
./s3/S3.php:			trigger_error(sprintf("S3::getBucket(): [%s] %s", $response->error['code'], $response->error['message']), E_USER_WARNING);
./s3/S3.php:			if (($response = $rest->getResponse(true)) == false || $response->code !== 200) break;
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:			$input['type'] = self::__getMimeType($input['file']);
./s3/S3.php:			$rest->getResponse();
./s3/S3.php:	public static function getObject($bucket = '', $uri = '', $saveTo = false) {
./s3/S3.php:		if ($rest->response->error === false) $rest->getResponse();
./s3/S3.php:			trigger_error(sprintf("S3::getObject({$bucket}, {$uri}): [%s] %s",
./s3/S3.php:	public static function getObjectInfo($bucket = '', $uri = '', $returnInfo = true) {
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:			trigger_error(sprintf("S3::getObjectInfo({$bucket}, {$uri}): [%s] %s",
./s3/S3.php:	* @param string $targetBucket Target bucket (where logs are stored)
./s3/S3.php:	* @param string $targetPrefix Log prefix (e,g; domain.com-)
./s3/S3.php:	public static function setBucketLogging($bucket, $targetBucket, $targetPrefix) {
./s3/S3.php:		$loggingEnabled->appendChild($dom->createElement('TargetBucket', $targetBucket));
./s3/S3.php:		$loggingEnabled->appendChild($dom->createElement('TargetPrefix', $targetPrefix));
./s3/S3.php:		// TODO: Add TargetGrants
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:	public static function getBucketLogging($bucket = '') {
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:			trigger_error(sprintf("S3::getBucketLogging({$bucket}): [%s] %s",
./s3/S3.php:			'targetBucket' => (string)$rest->body->LoggingEnabled->TargetBucket,
./s3/S3.php:			'targetPrefix' => (string)$rest->body->LoggingEnabled->TargetPrefix,
./s3/S3.php:	* @param array $acp Access Control Policy Data (same as the data returned from getAccessControlPolicy)
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:	public static function getAccessControlPolicy($bucket, $uri = '') {
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:			trigger_error(sprintf("S3::getAccessControlPolicy({$bucket}, {$uri}): [%s] %s",
./s3/S3.php:		$rest = $rest->getResponse();
./s3/S3.php:	* @internal Used to get mime types
./s3/S3.php:	public static function __getMimeType(&$file) {
./s3/S3.php:	public static function __getSignature($string) {
./s3/S3.php:	public function getResponse() {
./s3/S3.php:		$headers[] = 'Authorization: ' . S3::__getSignature(
./s3/S3.php:			$this->response->code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./s3/upload.php:		   $ext = getExtension($name);	   
./s3/load.php:      document.getElementById('f1_upload_process').style.visibility = 'visible';
./s3/load.php:      document.getElementById('f1_upload_form').style.visibility = 'hidden';
./s3/load.php:      document.getElementById('f1_upload_process').style.visibility = 'hidden';
./s3/load.php:      document.getElementById('f1_upload_form').innerHTML = result + '<label>File: <input name="myfile" type="file" size="30" /><\/label><label><input type="submit" name="submitBtn" class="sbtn" value="Upload" /><\/label>';
./s3/load.php:      document.getElementById('f1_upload_form').style.visibility = 'visible';      
./s3/load.php:                <form action="../s3/upload.php" method="post" enctype="multipart/form-data" target="upload_target" onsubmit="startUpload();" >
./s3/load.php:                     <iframe id="upload_target" name="upload_target" src="#" style="width:0;height:0;border:0px solid #fff;"></iframe>
./s3/index.php:	 $ext = getExtension($name);
./contact.php:	 <p>Thanks for your note.  We will get back to you right away!</p>
./contact.php:					<p>Got a question?  Got a suggestion?  Let us know and we'll get back to you right away!</p>  
./contact.php:					<p>We'll get back to you right away!</p>
./index1.php:    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
./footer.php:<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
./footer.php:		   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
./phpmyadmin/db_structure.php:$db_collation = PMA_getDbCollation($db);
./phpmyadmin/db_structure.php:            . PMA_getCollationDescr($each_table['Collation']) . '">'
./phpmyadmin/db_structure.php:                "document.getElementById('checkbox_tbl_" . ($i + 1) . "').checked = true;";
./phpmyadmin/db_structure.php:                . PMA_getImage('eye.png', __('Tracking is active.'))
./phpmyadmin/db_structure.php:        } elseif (PMA_Tracker::getVersion($GLOBALS["db"], $truename) > 0) {
./phpmyadmin/db_structure.php:                . PMA_getImage('eye.png', __('Tracking is not active.'))
./phpmyadmin/db_structure.php:            ? PMA_getImage('s_cancel.png', 'NOT REPLICATED')
./phpmyadmin/db_structure.php:            ? PMA_getImage('s_success.png', 'REPLICATED')
./phpmyadmin/db_structure.php:            // InnoDB table: we did not get an accurate row count
./phpmyadmin/db_structure.php:                _ngettext('%s table', '%s tables', $num_tables - $tableReductionCount),
./phpmyadmin/db_structure.php:            . PMA_getCollationDescr($db_collation) . ' (' . __('Default') . ')">' . $db_collation
./phpmyadmin/db_structure.php:echo PMA_getIcon('b_print.png', __('Print view'), true) . '</a>';
./phpmyadmin/db_structure.php:echo PMA_getIcon('b_tblanalyse.png', __('Data Dictionary'), true) . '</a>';
./phpmyadmin/pmd_display_field.php:    $disp     = PMA_getDisplayField($db, $table);
./phpmyadmin/server_collations.php:    ? PMA_getImage('s_asci.png')
./phpmyadmin/server_collations.php:           . '    <td>' . PMA_getCollationDescr($current_collation) . '</td>' . "\n"
./phpmyadmin/bs_play_media.php:            $bs_file_path = PMA_BS_getURL($bsReference);
./phpmyadmin/tbl_create.php:if (PMA_DBI_get_columns($db, $table)) {
./phpmyadmin/tbl_create.php:                    $new_table_string .= PMA_getImage('eye.png', __('Tracking is active.'));
./phpmyadmin/tbl_create.php:                } elseif (PMA_Tracker::getVersion($db, $truename) > 0) {
./phpmyadmin/tbl_create.php:                    $new_table_string .= PMA_getImage('eye_grey.png', __('Tracking is not active.'));
./phpmyadmin/tbl_create.php:            $new_table_string .= '<td> <dfn title="' . PMA_getCollationDescr($tbl_stats['Collation']) . '">'. $tbl_stats['Collation'] .'</dfn></td>' . "\n";
./phpmyadmin/tbl_create.php:            PMA_ajaxResponse(PMA_DBI_getError(), false);
./phpmyadmin/server_databases.php:      ? PMA_getImage('s_db.png')
./phpmyadmin/server_databases.php:    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,
./phpmyadmin/server_databases.php:    $column_order = PMA_getColumnOrder();
./phpmyadmin/server_databases.php:       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')
./phpmyadmin/server_databases.php:                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')
./phpmyadmin/changelog.php:        $changelog = ob_get_contents();
./phpmyadmin/changelog.php:        $changelog = file_get_contents($filename);
./phpmyadmin/prefs_forms.php:    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());
./phpmyadmin/tbl_get_field.php:if (!PMA_DBI_get_columns($db, $table)) {
./phpmyadmin/browse_foreigners.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/browse_foreigners.php:$foreigners  = ($cfgRelation['relwork'] ? PMA_getForeigners($db, $table) : false);
./phpmyadmin/browse_foreigners.php:$foreignData = PMA_getForeignData($foreigners, $field, $override_total, isset($foreign_filter) ? $foreign_filter : '', $foreign_limit);
./phpmyadmin/browse_foreigners.php:        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=right&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />
./phpmyadmin/browse_foreigners.php:        alert('<?php echo PMA_jsFormat(__('The target browser window could not be updated. Maybe you have closed the parent window, or your browser\'s security settings are configured to block cross-window updates.')); ?>');
./phpmyadmin/tbl_chart.php:// get settings if any posted
./phpmyadmin/tbl_chart.php:        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>
./phpmyadmin/tbl_chart.php:        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>
./phpmyadmin/tbl_chart.php:        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>
./phpmyadmin/tbl_chart.php:        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>
./phpmyadmin/tbl_chart.php:        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>
./phpmyadmin/tbl_operations.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/tbl_operations.php:            $_message .= $pma_table->getLastMessage();
./phpmyadmin/tbl_operations.php:            $GLOBALS['table'] = $pma_table->getName();
./phpmyadmin/tbl_operations.php:            $_message .= $pma_table->getLastError();
./phpmyadmin/tbl_operations.php:        foreach (PMA_DBI_get_warnings() as $warning) {
./phpmyadmin/tbl_operations.php:$columns = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);
./phpmyadmin/tbl_operations.php:    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/>
./phpmyadmin/tbl_operations.php:    <select name="target_db">
./phpmyadmin/tbl_operations.php:        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>
./phpmyadmin/tbl_operations.php:        <td><?php echo PMA_StorageEngine::getHtmlSelect('new_tbl_type', null, $tbl_type); ?>
./phpmyadmin/tbl_operations.php:$innodb_engine_plugin = PMA_StorageEngine::getEngine('innodb');
./phpmyadmin/tbl_operations.php:$innodb_plugin_version = $innodb_engine_plugin->getInnodbPluginVersion();
./phpmyadmin/tbl_operations.php:    $innodb_file_format = $innodb_engine_plugin->getInnodbFileFormat();
./phpmyadmin/tbl_operations.php:    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/>
./phpmyadmin/tbl_operations.php:    <select name="target_db">
./phpmyadmin/tbl_operations.php:        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>
./phpmyadmin/tbl_operations.php:        if (PMA_getForeigners($GLOBALS['db'], $GLOBALS['table'], '', 'foreign')) {
./phpmyadmin/tbl_operations.php:    $partition_names = PMA_Partition::getPartitionNames($db, $table);
./phpmyadmin/tbl_operations.php:    $foreign = PMA_getForeigners($GLOBALS['db'], $GLOBALS['table']);
./phpmyadmin/chk_rel.php:$cfgRelation = PMA_getRelationsParam(true);
./phpmyadmin/phpmyadmin.css.php: && (ini_get('zlib.output_compression'))) {
./phpmyadmin/tbl_replace.php:$blob_streaming_active = $GLOBALS['PMA_Config']->get('BLOBSTREAMING_PLUGINS_EXIST');
./phpmyadmin/tbl_replace.php:                $meta           = PMA_DBI_get_fields_meta($res);
./phpmyadmin/tbl_replace.php:                list($unique_condition, $clause_is_unique) = PMA_getUniqueCondition($res, count($meta), $meta, $row, true);
./phpmyadmin/tbl_replace.php:                // get the most recent BLOB reference
./phpmyadmin/tbl_replace.php:                $bs_reference = PMA_File::getRecentBLOBReference();
./phpmyadmin/tbl_replace.php: * Executes the sql query and get the result, then move back to the calling
./phpmyadmin/tbl_replace.php:        $error_messages[] = PMA_Message::sanitize(PMA_DBI_getError());
./phpmyadmin/tbl_replace.php:    foreach (PMA_DBI_get_warnings() as $warning) {
./phpmyadmin/tbl_replace.php:        $map = PMA_getForeigners($db, $table, '', 'both');
./phpmyadmin/tbl_replace.php:                $display_field = PMA_getDisplayField($map[$rel_field]['foreign_db'], $map[$rel_field]['foreign_table']);
./phpmyadmin/tbl_replace.php:        $mime_map = PMA_getMIME($db, $table);
./phpmyadmin/tbl_replace.php:                            $transform_options  = PMA_transformation_getOptions((isset($transformation['transformation_options']) ? $transformation['transformation_options'] : ''));
./phpmyadmin/tbl_replace.php: * Load target page.
./phpmyadmin/navigation.php:    PMA_ajaxResponse('', true, array('options' => PMA_RecentTable::getInstance()->getHtmlSelectOption()) );
./phpmyadmin/navigation.php:    $GLOBALS['db'] = $GLOBALS['pma']->databases->getSingleItem();
./phpmyadmin/navigation.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/navigation.php:    <base target="frame_content" />
./phpmyadmin/navigation.php:        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=left&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />
./phpmyadmin/navigation.php:    echo PMA_includeJS('get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId()));
./phpmyadmin/navigation.php:        .'<form method="post" action="index.php" target="_parent">' . "\n"
./phpmyadmin/navigation.php:        .PMA_RecentTable::getInstance()->getHtmlSelect()
./phpmyadmin/navigation.php:        // be rebuilt with the new target frame.
./phpmyadmin/navigation.php:    <form method="post" action="index.php" target="_parent" id="left">
./phpmyadmin/navigation.php:        echo $GLOBALS['pma']->databases->getHtmlSelectGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";
./phpmyadmin/navigation.php:        echo $GLOBALS['pma']->databases->getHtmlListGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";
./phpmyadmin/navigation.php:$img_plus = PMA_getImage('b_plus.png', '+', array('id' => 'el%dImg'));
./phpmyadmin/navigation.php:$img_minus = PMA_getImage('b_minus.png', '-', array('id' => 'el%dImg'));
./phpmyadmin/navigation.php:    .' href="navigation.php?%s" target="_self">';
./phpmyadmin/navigation.php:    $table_list = PMA_getTableList($GLOBALS['db'], null, $tpos, $cfg['MaxTableList']);
./phpmyadmin/navigation.php:    $table_count = PMA_getTableCount($GLOBALS['db']);
./phpmyadmin/navigation.php:        $_db_tooltip = PMA_getDbComment($GLOBALS['db']);
./phpmyadmin/navigation.php:        echo '<ul id="newtable"><li><a target="frame_content" href="tbl_create.php' . PMA_generate_common_url(array('db' => $GLOBALS['db'])) . '"  class="'.$class .'" >'
./phpmyadmin/navigation.php:            . PMA_getImage('b_snewtbl.png', _pgettext('short form', 'Create table'), array('id' => "icon_newtable"))
./phpmyadmin/navigation.php:            . _pgettext('short form', 'Create table') . '</a></li></ul>';
./phpmyadmin/navigation.php:    PMA_displayDbList($GLOBALS['pma']->databases->getGroupedDetails($_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']), $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']);
./phpmyadmin/navigation.php:    // get table list, for all databases
./phpmyadmin/navigation.php:    $tables_full = PMA_DBI_get_tables_full($GLOBALS['pma']->databases->getLimitedItems($offset, $count));
./phpmyadmin/navigation.php:                    target="_parent"
./phpmyadmin/navigation.php:                    $tables = PMA_getTableList($db['name'], $tables_full[$db['name']]);
./phpmyadmin/navigation.php:                    $tables = PMA_getTableList($db['name'], $tables_full[strtolower($db['name'])]);
./phpmyadmin/navigation.php:                    $tables = PMA_getTableList($db['name']);
./phpmyadmin/navigation.php:                target="_parent"
./phpmyadmin/navigation.php:                // get the array with the actual table information
./phpmyadmin/navigation.php:            $link_title = PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable']);
./phpmyadmin/navigation.php:                echo PMA_getImage('s_views.png', htmlspecialchars($link_title), $attr);
./phpmyadmin/navigation.php:                echo PMA_getImage('b_browse.png', htmlspecialchars($link_title), $attr);
./phpmyadmin/navigation.php:            . '" title="' . htmlspecialchars(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable']) . ': ' . $table['Comment']
./phpmyadmin/server_synchronize.php:            echo __('Could not connect to the target');
./phpmyadmin/server_synchronize.php:        * Creating the link object for both source and target databases and
./phpmyadmin/server_synchronize.php:        * selecting the source and target databases using these links
./phpmyadmin/server_synchronize.php:            * Using PMA_DBI_get_tables() to get all the tables
./phpmyadmin/server_synchronize.php:            * from target and source databases.
./phpmyadmin/server_synchronize.php:            $src_tables = PMA_DBI_get_tables($src_db, $src_link);
./phpmyadmin/server_synchronize.php:            $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);
./phpmyadmin/server_synchronize.php:            $target_tables_num = sizeof($trg_tables);
./phpmyadmin/server_synchronize.php:            * table names from target and source databases.
./phpmyadmin/server_synchronize.php:            $target_tables_uncommon = array();
./phpmyadmin/server_synchronize.php:            * Using PMA_getMatchingTables to find which of the tables' names match
./phpmyadmin/server_synchronize.php:            * in target and source database.
./phpmyadmin/server_synchronize.php:            PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);
./phpmyadmin/server_synchronize.php:            * Finding the uncommon tables for the target database
./phpmyadmin/server_synchronize.php:            * using function PMA_getNonMatchingTargetTables()
./phpmyadmin/server_synchronize.php:            PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);
./phpmyadmin/server_synchronize.php:            * difference between the source and target databases.
./phpmyadmin/server_synchronize.php:            $row_count = array();   //number of rows in source table that needs to be created in target database
./phpmyadmin/server_synchronize.php:            $delete_array = array(); //stores the primary key values for target tables that have excessive rows than corresponding source tables.
./phpmyadmin/server_synchronize.php:            $insert_array = array(array(array()));// stores the primary key values for the rows in each source table that are not present in target tables.
./phpmyadmin/server_synchronize.php:            $uncommon_tables_fields = array(); //coantains the fields for all the source tables that are not present in target
./phpmyadmin/server_synchronize.php:            $target_columns = array();  //contains the full columns' information for all the target tables' columns
./phpmyadmin/server_synchronize.php:            $uncommon_columns = array(); //contains names of columns present in source table but absent from the corresponding target table
./phpmyadmin/server_synchronize.php:            $target_indexes = array();   //contains indexes on all the target tables
./phpmyadmin/server_synchronize.php:            $add_indexes_array = array(); //contains the indexes name present in source but absent from target tables
./phpmyadmin/server_synchronize.php:            $target_tables_keys = array(); //contains the keys of all the target tables
./phpmyadmin/server_synchronize.php:            $alter_indexes_array = array();  //contains the names of all the indexes for each table that need to be altered in target database
./phpmyadmin/server_synchronize.php:            $remove_indexes_array = array();  //contains the names of indexes that are excessive in target tables
./phpmyadmin/server_synchronize.php:            $alter_str_array = array(array());  //contains the criteria for each column that needs to be altered in target tables
./phpmyadmin/server_synchronize.php:            $add_column_array = array(array()); //contains the name of columns that need to be added in target tables
./phpmyadmin/server_synchronize.php:                    $matching_tables, $source_columns, $target_columns,
./phpmyadmin/server_synchronize.php:                    $criteria, $target_tables_keys, $i);
./phpmyadmin/server_synchronize.php:                    $matching_tables, $source_indexes, $target_indexes,
./phpmyadmin/server_synchronize.php:                * that need to be added in target database
./phpmyadmin/server_synchronize.php:            $_SESSION['target_tables_uncommon'] = $target_tables_uncommon;
./phpmyadmin/server_synchronize.php:            $_SESSION['target_tables_keys'] = $target_tables_keys;
./phpmyadmin/server_synchronize.php:            $_SESSION['target_tables'] = $trg_tables;
./phpmyadmin/server_synchronize.php:            $_SESSION['target_indexes'] = $target_indexes;
./phpmyadmin/server_synchronize.php:            * their difference with the target tables and target tables names.
./phpmyadmin/server_synchronize.php:            * Displays the tables' names present in source but missing from target
./phpmyadmin/server_synchronize.php:            foreach ($target_tables_uncommon as $tbl_nc_name) {
./phpmyadmin/server_synchronize.php:            * Displays the target tables names
./phpmyadmin/server_synchronize.php:            *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables
./phpmyadmin/server_synchronize.php:                . __('Would you like to delete all the previous rows from target tables?')
./phpmyadmin/server_synchronize.php:        . __('Selected target tables have been synchronized with source tables.')
./phpmyadmin/server_synchronize.php:    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];
./phpmyadmin/server_synchronize.php:    $target_tables = $_SESSION['target_tables'];
./phpmyadmin/server_synchronize.php:    $target_tables_keys = $_SESSION['target_tables_keys'];
./phpmyadmin/server_synchronize.php:    $target_indexes = $_SESSION['target_indexes'];
./phpmyadmin/server_synchronize.php:    * Creating link object for source and target databases
./phpmyadmin/server_synchronize.php:            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                $criteria, $matching_tables_keys, $target_tables_keys,
./phpmyadmin/server_synchronize.php:            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,
./phpmyadmin/server_synchronize.php:                $matching_table_structure_diff[$q], $target_tables_keys,
./phpmyadmin/server_synchronize.php:                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                    $matching_table_structure_diff[$q], $target_tables_keys,
./phpmyadmin/server_synchronize.php:            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,
./phpmyadmin/server_synchronize.php:            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                $source_indexes, $target_indexes, $add_indexes_array,
./phpmyadmin/server_synchronize.php:            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,
./phpmyadmin/server_synchronize.php:                $matching_table_data_diff[$p], $target_tables_keys,
./phpmyadmin/server_synchronize.php:                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                    $matching_table_data_diff[$p], $target_tables_keys,
./phpmyadmin/server_synchronize.php:            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                $criteria, $matching_tables_keys, $target_tables_keys,
./phpmyadmin/server_synchronize.php:            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,
./phpmyadmin/server_synchronize.php:                $matching_table_data_diff[$p], $target_tables_keys,
./phpmyadmin/server_synchronize.php:                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                    $matching_table_data_diff[$p], $target_tables_keys,
./phpmyadmin/server_synchronize.php:            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,
./phpmyadmin/server_synchronize.php:            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                $source_indexes, $target_indexes, $add_indexes_array,
./phpmyadmin/server_synchronize.php:        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,
./phpmyadmin/server_synchronize.php:        PMA_insertIntoTargetTable($matching_tables, $src_db, $trg_db, $src_link,
./phpmyadmin/server_synchronize.php:            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,
./phpmyadmin/server_synchronize.php:            $source_indexes, $target_indexes, $add_indexes_array,
./phpmyadmin/server_synchronize.php:    * (present in Source but absent from Target).
./phpmyadmin/server_synchronize.php:        PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:    * (present in Source but absent from Target).
./phpmyadmin/server_synchronize.php:                PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:        PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:    * Again all the tables from source and target database are displayed with their differences.
./phpmyadmin/server_synchronize.php:    * Displaying the target database tables
./phpmyadmin/server_synchronize.php:    foreach ($target_tables_uncommon as $tbl_nc_name) {
./phpmyadmin/server_synchronize.php:    *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables
./phpmyadmin/server_synchronize.php:        . __('Would you like to delete all the previous rows from target tables?') . '</label> </p>
./phpmyadmin/server_synchronize.php:    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];
./phpmyadmin/server_synchronize.php:    $target_tables = $_SESSION['target_tables'];
./phpmyadmin/server_synchronize.php:    $target_tables_keys = $_SESSION['target_tables_keys'];
./phpmyadmin/server_synchronize.php:    $target_indexes = $_SESSION['target_indexes'];
./phpmyadmin/server_synchronize.php:        . __('Target database has been synchronized with source database')
./phpmyadmin/server_synchronize.php:    * Displaying all the tables of source and target database
./phpmyadmin/server_synchronize.php:    foreach ($target_tables_uncommon as $tbl_nc_name) {
./phpmyadmin/server_synchronize.php:    * connecting the source and target servers
./phpmyadmin/server_synchronize.php:        *  If the check box is checked for deleting previous rows from the target database tables then
./phpmyadmin/server_synchronize.php:            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,
./phpmyadmin/server_synchronize.php:                $target_tables_keys, $matching_tables_keys,
./phpmyadmin/server_synchronize.php:                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,
./phpmyadmin/server_synchronize.php:                    $target_tables_keys, $delete_array, true);
./phpmyadmin/server_synchronize.php:            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                $criteria, $matching_tables_keys, $target_tables_keys, $p, true);
./phpmyadmin/server_synchronize.php:            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,
./phpmyadmin/server_synchronize.php:                $target_tables_keys, $matching_tables_keys,
./phpmyadmin/server_synchronize.php:                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,
./phpmyadmin/server_synchronize.php:                    $target_tables_keys, $delete_array, true);
./phpmyadmin/server_synchronize.php:            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,
./phpmyadmin/server_synchronize.php:            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,
./phpmyadmin/server_synchronize.php:                $source_indexes, $target_indexes, $add_indexes_array,
./phpmyadmin/server_synchronize.php:        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,
./phpmyadmin/server_synchronize.php:        PMA_insertIntoTargetTable(
./phpmyadmin/server_synchronize.php:            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,
./phpmyadmin/server_synchronize.php:            $target_indexes, $add_indexes_array,
./phpmyadmin/server_synchronize.php:    *  from target database.
./phpmyadmin/server_synchronize.php:            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,
./phpmyadmin/server_synchronize.php:    ? PMA_getImage('s_sync.png')
./phpmyadmin/server_synchronize.php:    $databases = PMA_DBI_get_databases_full(null, false, null, 'SCHEMA_NAME',
./phpmyadmin/server_synchronize.php:            $database_header = __('Target database');
./phpmyadmin/server_synchronize.php:    <div class="notice">' . __('Target database will be completely synchronized with source database. Source database will remain unchanged.') . '</div>';
./phpmyadmin/db_create.php:    $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/db_create.php:        $column_order = PMA_getColumnOrder();
./phpmyadmin/db_create.php:            $db_collation_for_ajax = PMA_getServerCollation();
./phpmyadmin/themes/sprites.css.php:$bg = $_SESSION['PMA_Theme']->getImgPath() . 'sprites.png';
./phpmyadmin/themes/sprites.css.php:    if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {
./phpmyadmin/themes/sprites.css.php:        include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';
./phpmyadmin/themes/original/css/theme_left.css.php:    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;
./phpmyadmin/themes/original/css/theme_right.css.php:    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_really.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);
./phpmyadmin/themes/original/css/theme_right.css.php:<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background: #D3DCE3 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;
./phpmyadmin/themes/original/css/theme_right.css.php:.ui-timepicker-div .ui-widget-header { margin-bottom: 8px; }
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;
./phpmyadmin/themes/original/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;
./phpmyadmin/themes/original/css/theme_right.css.php:    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;
./phpmyadmin/themes/original/css/theme_right.css.php:    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;
./phpmyadmin/themes/original/css/theme_right.css.php:    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);
./phpmyadmin/themes/original/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/original/css/theme_right.css.php:body .ui-widget {
./phpmyadmin/themes/original/css/theme_right.css.php:/*rules for the plot target div.  These will be cascaded down to all plot elements according to css rules*/
./phpmyadmin/themes/original/css/theme_right.css.php:.jqplot-target {
./phpmyadmin/themes/original/css/theme_right.css.php:/*   Styles added to the plot target container when there is an error go here.*/
./phpmyadmin/themes/svg_gradient.php:function get_color($get_name, $default)
./phpmyadmin/themes/svg_gradient.php:    // get color from GET args, only alphanumeric chcracters
./phpmyadmin/themes/svg_gradient.php:    $color = filter_input(INPUT_GET, $get_name, FILTER_VALIDATE_REGEXP, $opts);
./phpmyadmin/themes/svg_gradient.php:            <stop offset="0%" stop-color="<?php echo get_color('from', 'white') ?>" stop-opacity="1" />
./phpmyadmin/themes/svg_gradient.php:            <stop offset="100%" stop-color="<?php echo get_color('to', 'black') ?>" stop-opacity="1" />
./phpmyadmin/themes/pmahomme/css/theme_left.css.php:    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;
./phpmyadmin/themes/pmahomme/css/theme_left.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_left.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif)
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'f2f2f2'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_bg.png) repeat-x;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_hover_bg.png) repeat-x 50% 0%!important;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    /* background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png); */
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: #EEE url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('eeeeee', 'cccccc'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    <?php echo $_SESSION['PMA_Theme']->getCssGradient('333333', '555555'); ?>
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:.ui-timepicker-div .ui-widget-header{ margin-bottom: 8px; }
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:body .ui-widget {
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:/*rules for the plot target div.  These will be cascaded down to all plot elements according to css rules*/
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:.jqplot-target {
./phpmyadmin/themes/pmahomme/css/theme_right.css.php:/*   Styles added to the plot target container when there is an error go here.*/
./phpmyadmin/pmd_save_pos.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/server_replication.php:        . PMA_getIcon('s_replication.png')
./phpmyadmin/server_replication.php:echo '   ' . PMA_getImage('s_replication.png');
./phpmyadmin/pmd_relation_upd.php:$tables = PMA_DBI_get_tables_full($db, $T1);
./phpmyadmin/pmd_relation_upd.php:$tables = PMA_DBI_get_tables_full($db, $T2);
./phpmyadmin/pmd_relation_upd.php:    $existrel_foreign = PMA_getForeigners($DB2, $T2, '', 'foreign');
./phpmyadmin/tbl_structure.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/tbl_structure.php:$primary = PMA_Index::getPrimary($table, $db);
./phpmyadmin/tbl_structure.php:foreach (PMA_Index::getFromTable($table, $db) as $index) {
./phpmyadmin/tbl_structure.php:    if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {
./phpmyadmin/tbl_structure.php:        $columns = $index->getColumns();
./phpmyadmin/tbl_structure.php:$fields = (array) PMA_DBI_get_columns($db, $table, null, true);
./phpmyadmin/tbl_structure.php:$titles['Change']               = PMA_getIcon('b_edit.png', __('Change'));
./phpmyadmin/tbl_structure.php:$titles['Drop']                 = PMA_getIcon('b_drop.png', __('Drop'));
./phpmyadmin/tbl_structure.php:$titles['NoDrop']               = PMA_getIcon('b_drop.png', __('Drop'));
./phpmyadmin/tbl_structure.php:$titles['Primary']              = PMA_getIcon('b_primary.png', __('Primary'));
./phpmyadmin/tbl_structure.php:$titles['Index']                = PMA_getIcon('b_index.png', __('Index'));
./phpmyadmin/tbl_structure.php:$titles['Unique']               = PMA_getIcon('b_unique.png', __('Unique'));
./phpmyadmin/tbl_structure.php:$titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Spatial'));
./phpmyadmin/tbl_structure.php:$titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Fulltext'));
./phpmyadmin/tbl_structure.php:$titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Primary'));
./phpmyadmin/tbl_structure.php:$titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Index'));
./phpmyadmin/tbl_structure.php:$titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Unique'));
./phpmyadmin/tbl_structure.php:$titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Spatial'));
./phpmyadmin/tbl_structure.php:$titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Fulltext'));
./phpmyadmin/tbl_structure.php:$titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'));
./phpmyadmin/tbl_structure.php:$hidden_titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['Primary']              = PMA_getIcon('b_primary.png', __('Add primary key'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Add primary key'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['Index']                = PMA_getIcon('b_index.png', __('Add index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Add index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['Unique']               = PMA_getIcon('b_unique.png', __('Add unique index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Add unique index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Add SPATIAL index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Add SPATIAL index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Add FULLTEXT index'), true);
./phpmyadmin/tbl_structure.php:$hidden_titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Add FULLTEXT index'), true);
./phpmyadmin/tbl_structure.php:    //$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/tbl_structure.php:    $comments_map = PMA_getComments($db, $table);
./phpmyadmin/tbl_structure.php:        $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/tbl_structure.php:    <td><?php echo (empty($field_charset) ? '' : '<dfn title="' . PMA_getCollationDescr($field_charset) . '">' . $field_charset . '</dfn>'); ?></td>
./phpmyadmin/tbl_structure.php:        echo '<i>' . _pgettext('None for default', 'None') . '</i>';
./phpmyadmin/tbl_structure.php:        <?php echo PMA_getImage('more.png', __('Show more actions')); ?> <?php echo __('More'); ?>
./phpmyadmin/tbl_structure.php:    $create_view = PMA_DBI_get_definition($db, 'VIEW', $table);
./phpmyadmin/tbl_structure.php:        PMA_getIcon('b_edit.png', __('Edit view'), true)
./phpmyadmin/tbl_structure.php:echo PMA_getIcon('b_print.png', __('Print view'), true);
./phpmyadmin/tbl_structure.php:        echo PMA_getIcon('b_relations.png', __('Relation view'), true);
./phpmyadmin/tbl_structure.php:        echo PMA_getIcon('b_tblanalyse.png', __('Propose table structure'), true);
./phpmyadmin/tbl_structure.php:        echo PMA_getIcon('eye.png', __('Track table'), true);
./phpmyadmin/tbl_structure.php:        echo PMA_getImage('b_insrow.png', __('Add column'));
./phpmyadmin/tbl_structure.php:    echo PMA_Index::getView($table, $db);
./phpmyadmin/tbl_structure.php:    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);
./phpmyadmin/tbl_structure.php:    if ($mergetable == false) {
./phpmyadmin/tbl_structure.php:        if (isset($tot_size) && $mergetable == false) {
./phpmyadmin/tbl_structure.php:            echo PMA_getIcon('b_tbloptimize.png', __('Optimize table'));
./phpmyadmin/tbl_structure.php:            echo '<dfn title="' . PMA_getCollationDescr($tbl_collation) . '">' . $tbl_collation . '</dfn>';
./phpmyadmin/tbl_structure.php:    if (!$is_innodb && isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {
./phpmyadmin/schema_export.php: * get all variables needed for exporting relational schema
./phpmyadmin/schema_export.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/schema_export.php: * get all the export options and verify
./phpmyadmin/tbl_change.php: * get table information
./phpmyadmin/tbl_change.php:    $comments_map = PMA_getComments($db, $table);
./phpmyadmin/tbl_change.php:$table_fields = array_values(PMA_DBI_get_columns($db, $table));
./phpmyadmin/tbl_change.php:            $meta = PMA_DBI_get_fields_meta($result[$key_id]);
./phpmyadmin/tbl_change.php:            list($unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result[$key_id], count($meta), $meta, $rows[$key_id], true);
./phpmyadmin/tbl_change.php:$foreigners  = PMA_getForeigners($db, $table);
./phpmyadmin/tbl_change.php:$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));
./phpmyadmin/tbl_change.php:            // but, look what we get if we switch to iso: (Default is NULL)
./phpmyadmin/tbl_change.php:        $gis_data_types = PMA_getGISDatatypes();
./phpmyadmin/tbl_change.php:    echo PMA_getFunctionsForField($field, $insert_mode);
./phpmyadmin/tbl_change.php:        $foreignData = PMA_getForeignData($foreigners, $field['Field'], false, '', '');
./phpmyadmin/tbl_change.php:                <a class="hide foreign_values_anchor" target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes,resizable=yes'); return false;" href="browse_foreigners.php?<?php echo PMA_generate_common_url($db, $table); ?>&amp;field=<?php echo PMA_escapeJsString(urlencode($field['Field']) . $rownumber_param); ?>"><?php echo str_replace("'", "\'", $titles['Browse']); ?></a>
./phpmyadmin/tbl_change.php:                $files = PMA_getFileSelectOptions(PMA_userDir($cfg['UploadDir']));
./phpmyadmin/tbl_change.php:            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));
./phpmyadmin/webapp.php:    'uri'       => $GLOBALS['PMA_Config']->get('PmaAbsoluteUri'),
./phpmyadmin/webapp.php:$zip->addFile(file_get_contents($icon), 'phpMyAdmin.ico');
./phpmyadmin/pmd_general.php:$tab_column       = get_tab_info();
./phpmyadmin/pmd_general.php:$script_tabs      = get_script_tabs();
./phpmyadmin/pmd_general.php:$script_contr     = get_script_contr();
./phpmyadmin/pmd_general.php:$tab_pos          = get_tab_pos();
./phpmyadmin/pmd_general.php:$tables_pk_or_unique_keys = get_pk_or_unique_keys();
./phpmyadmin/pmd_general.php:$tables_all_keys  = get_all_keys();
./phpmyadmin/pmd_general.php:            onclick="Show_left_menu(document.getElementById('key_Show_left_menu')); return false" class="M_butt first" target="_self">
./phpmyadmin/pmd_general.php:            class="M_butt" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" id="rel_button" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" id="display_field_button" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" target="_self"
./phpmyadmin/pmd_general.php:        /></a><a href="Documentation.html#faq6_31" target="documentation"
./phpmyadmin/pmd_general.php:            class="M_butt" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" id="angular_direct_button" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" id="grid_button" target="_self"
./phpmyadmin/pmd_general.php:            onclick="Small_tab_all(document.getElementById('key_SB_all')); return false" class="M_butt" target="_self"
./phpmyadmin/pmd_general.php:<a href="#" onclick="Small_tab_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle small/big'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bottom.png" /></a>
./phpmyadmin/pmd_general.php:<a href="#" onclick="Relation_lines_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle relation lines'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/toggle_lines.png" /></a>
./phpmyadmin/pmd_general.php:            class="M_butt" target="_self"
./phpmyadmin/pmd_general.php:            class="M_butt" target="_self">';
./phpmyadmin/pmd_general.php:            onclick="Top_menu_right(document.getElementById('key_Left_Right')); return false" class="M_butt last" target="_self">
./phpmyadmin/pmd_general.php:        onclick="Hide_tab_all(document.getElementById('key_HS_all')); return false" class="M_butt" target="_self">
./phpmyadmin/pmd_general.php:        onclick="No_have_constr(document.getElementById('key_HS')); return false" class="M_butt" target="_self">
./phpmyadmin/pmd_general.php:        onmousedown="cur_click=document.getElementById('<?php echo $t_n_url ?>');"/
./phpmyadmin/pmd_general.php:        echo 'onmousedown="cur_click=document.getElementById(\''.htmlspecialchars($t_n_url).'\');"';
./phpmyadmin/pmd_general.php:    $display_field = PMA_getDisplayField($db, $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i]);
./phpmyadmin/pmd_general.php:                <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/FieldKey_small.png"
./phpmyadmin/pmd_general.php:                    <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Field_small<?php
./phpmyadmin/pmd_general.php:                    onclick="document.getElementById('layer_new_relation').style.display = 'none';" />
./phpmyadmin/pmd_general.php:                    onclick="document.getElementById('layer_upd_relation').style.display = 'none'; Re_load();" />
./phpmyadmin/pmd_general.php:                    onclick="document.getElementById('query_rename_to').style.display = 'none';" />
./phpmyadmin/pmd_general.php:                    onclick="document.getElementById('query_having').style.display = 'none';" />
./phpmyadmin/pmd_general.php:                    onclick="document.getElementById('query_Aggregate').style.display = 'none';" />
./phpmyadmin/pmd_general.php:                    onclick="document.getElementById('query_where').style.display = 'none';" />
./phpmyadmin/transformation_wrapper.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/transformation_wrapper.php:    $mime_map = PMA_getMime($db, $table);
./phpmyadmin/transformation_wrapper.php:    $mime_options = PMA_transformation_getOptions((isset($mime_map[$transform_key]['transformation_options']) ? $mime_map[$transform_key]['transformation_options'] : ''));
./phpmyadmin/examples/openid.php:    $contents .= "<pre>" . $e->getMessage() . "</pre>\n";
./phpmyadmin/examples/openid.php:        $contents .= "<pre>" . $e->getMessage() . "</pre>\n";
./phpmyadmin/examples/openid.php:    $url = $authRequest->getAuthorizeURL();
./phpmyadmin/examples/openid.php:        $queryString = file_get_contents('php://input');
./phpmyadmin/examples/openid.php:    $id = $message->get('openid.claimed_id');
./phpmyadmin/examples/signon-script.php:function get_login_credentials($user)
./phpmyadmin/setup/config.php:$config_file_path = ConfigFile::getInstance()->getFilePath();
./phpmyadmin/setup/config.php:    ConfigFile::getInstance()->resetConfigData();
./phpmyadmin/setup/config.php:    echo ConfigGenerator::getConfigFile();
./phpmyadmin/setup/config.php:    file_put_contents($config_file_path, ConfigGenerator::getConfigFile());
./phpmyadmin/setup/config.php:    ConfigFile::getInstance()->setConfigData($cfg);
./phpmyadmin/setup/lib/form_processing.lib.php:            $separator = PMA_get_arg_separator('html');
./phpmyadmin/setup/lib/form_processing.lib.php:                // we've just added a new server, get it's id
./phpmyadmin/setup/lib/form_processing.lib.php:                $id = ConfigFile::getInstance()->getServerCount();
./phpmyadmin/setup/lib/common.inc.php:ConfigFile::getInstance()->setPersistKeys(array(
./phpmyadmin/setup/lib/index.lib.php:    // wait 3s at most for server response, it's enough to get information
./phpmyadmin/setup/lib/index.lib.php:    $data = @file_get_contents($url, null, $context);
./phpmyadmin/setup/lib/index.lib.php:    $version_local = version_to_int($GLOBALS['PMA_Config']->get('PMA_VERSION'));
./phpmyadmin/setup/lib/index.lib.php:    $file_path = ConfigFile::getInstance()->getFilePath();
./phpmyadmin/setup/lib/index.lib.php:    $cf = ConfigFile::getInstance();
./phpmyadmin/setup/lib/index.lib.php:    $blowfish_secret = $cf->get('blowfish_secret');
./phpmyadmin/setup/lib/index.lib.php:    $strLoginCookieValidityWarning = sprintf($strLoginCookieValidityWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@' . PMA_getPHPDocLink('session.configuration.php#ini.session.gc-maxlifetime') . ']', '[/a]', ini_get('session.gc_maxlifetime'));
./phpmyadmin/setup/lib/index.lib.php:    for ($i = 1, $server_cnt = $cf->getServerCount(); $i <= $server_cnt; $i++) {
./phpmyadmin/setup/lib/index.lib.php:        $cookie_auth_server = ($cf->getValue("Servers/$i/auth_type") == 'cookie');
./phpmyadmin/setup/lib/index.lib.php:        $server_name = $cf->getServerName($i);
./phpmyadmin/setup/lib/index.lib.php:        if (!$cf->getValue("Servers/$i/ssl")) {
./phpmyadmin/setup/lib/index.lib.php:        if ($cf->getValue("Servers/$i/extension") == 'mysql') {
./phpmyadmin/setup/lib/index.lib.php:        if ($cf->getValue("Servers/$i/auth_type") == 'config'
./phpmyadmin/setup/lib/index.lib.php:                && $cf->getValue("Servers/$i/user") != ''
./phpmyadmin/setup/lib/index.lib.php:                && $cf->getValue("Servers/$i/password") != '') {
./phpmyadmin/setup/lib/index.lib.php:        if ($cf->getValue("Servers/$i/AllowRoot")
./phpmyadmin/setup/lib/index.lib.php:                && $cf->getValue("Servers/$i/AllowNoPassword")) {
./phpmyadmin/setup/lib/index.lib.php:    if (!$cf->getValue('ForceSSL')) {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('AllowArbitraryServer')) {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('LoginCookieValidity') > 1440
./phpmyadmin/setup/lib/index.lib.php:            || $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')) {
./phpmyadmin/setup/lib/index.lib.php:        $message_type = $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('LoginCookieValidity') > 1800) {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('LoginCookieStore') != 0 && $cf->getValue('LoginCookieValidity') > $cf->getValue('LoginCookieStore')) {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('SaveDir') != '') {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('TempDir') != '') {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('GZipDump')
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('BZipDump')
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('ZipDump') && !@function_exists('zip_open')) {
./phpmyadmin/setup/lib/index.lib.php:    if ($cf->getValue('ZipDump') && !@function_exists('gzcompress')) {
./phpmyadmin/setup/lib/ConfigGenerator.class.php:    public static function getConfigFile()
./phpmyadmin/setup/lib/ConfigGenerator.class.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/setup/lib/ConfigGenerator.class.php:        $c = $cf->getConfig();
./phpmyadmin/setup/lib/ConfigGenerator.class.php:                    . $GLOBALS['PMA_Config']->get('PMA_VERSION')
./phpmyadmin/setup/lib/ConfigGenerator.class.php:        if ($cf->getServerCount() > 0) {
./phpmyadmin/setup/lib/ConfigGenerator.class.php:                $ret .= '/* Server: ' . strtr($cf->getServerName($id) . " [$id] ", '*/', '-') . "*/" . $crlf
./phpmyadmin/setup/lib/ConfigGenerator.class.php:        $persistKeys = $cf->getPersistKeysMap();
./phpmyadmin/setup/lib/ConfigGenerator.class.php:            $ret .= self::_getVarExport($k, $v, $crlf);
./phpmyadmin/setup/lib/ConfigGenerator.class.php:                $ret .= self::_getVarExport($k, $cf->getDefault($k), $crlf);
./phpmyadmin/setup/lib/ConfigGenerator.class.php:    private static function _getVarExport($var_name, $var_value, $crlf)
./phpmyadmin/setup/frames/config.inc.php:            echo htmlspecialchars(ConfigGenerator::getConfigFile())
./phpmyadmin/setup/frames/servers.inc.php:$cf = ConfigFile::getInstance();
./phpmyadmin/setup/frames/servers.inc.php:$server_exists = !empty($id) && $cf->get("Servers/$id") !== null;
./phpmyadmin/setup/frames/servers.inc.php:        . ' ' . $id . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';
./phpmyadmin/setup/frames/menu.inc.php:$separator = PMA_get_arg_separator('html');
./phpmyadmin/setup/frames/index.inc.php:$cf = ConfigFile::getInstance();
./phpmyadmin/setup/frames/index.inc.php:$separator = PMA_get_arg_separator('html');
./phpmyadmin/setup/frames/index.inc.php:display_form_top('index.php', 'get', array(
./phpmyadmin/setup/frames/index.inc.php:<?php if ($cf->getServerCount() > 0): ?>
./phpmyadmin/setup/frames/index.inc.php:<?php foreach ($cf->getServers() as $id => $server): ?>
./phpmyadmin/setup/frames/index.inc.php:    <td><?php echo htmlspecialchars($cf->getServerName($id)) ?></td>
./phpmyadmin/setup/frames/index.inc.php:    <td><?php echo htmlspecialchars($cf->getValue("Servers/$id/auth_type")) ?></td>
./phpmyadmin/setup/frames/index.inc.php:    <td><?php echo htmlspecialchars($cf->getServerDSN($id)) ?></td>
./phpmyadmin/setup/frames/index.inc.php:    'doc' => $form_display->getDocLink('DefaultLang'),
./phpmyadmin/setup/frames/index.inc.php:    'wiki' => $form_display->getWikiLink('DefaultLang'),
./phpmyadmin/setup/frames/index.inc.php:    $cf->getValue('DefaultLang'), true, $opts);
./phpmyadmin/setup/frames/index.inc.php:    'doc' => $form_display->getDocLink('ServerDefault'),
./phpmyadmin/setup/frames/index.inc.php:    'wiki' => $form_display->getWikiLink('ServerDefault'),
./phpmyadmin/setup/frames/index.inc.php:if ($cf->getServerCount() > 0) {
./phpmyadmin/setup/frames/index.inc.php:    if ($cf->getServerCount() == 1) {
./phpmyadmin/setup/frames/index.inc.php:    foreach ($cf->getServers() as $id => $server) {
./phpmyadmin/setup/frames/index.inc.php:        $opts['values'][(string)$id] = $cf->getServerName($id) . " [$id]";
./phpmyadmin/setup/frames/index.inc.php:    $cf->getValue('ServerDefault'), true, $opts);
./phpmyadmin/tbl_alter.php:    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_DBI_getError(), 'USE ' . PMA_backquote($db) . ';', '', $err_url);
./phpmyadmin/tbl_alter.php:        $fields_meta[] = PMA_DBI_get_columns($db, $table, $selected[$i], true);
./phpmyadmin/tbl_alter.php:     * or maybe make it part of PMA_DBI_get_columns();
./phpmyadmin/db_tracking.php:$data = PMA_Tracker::getTrackedData($_REQUEST['db'], '', '1');
./phpmyadmin/db_tracking.php:// Prepare statement to get HEAD version
./phpmyadmin/db_tracking.php:        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data for this table'));
./phpmyadmin/db_tracking.php:$table_list = PMA_getTableList($GLOBALS['db']);
./phpmyadmin/db_tracking.php:// For each table try to get the tracking version
./phpmyadmin/db_tracking.php:                if (PMA_Tracker::getVersion($GLOBALS['db'], $temp_table['Name']) == -1) {
./phpmyadmin/db_tracking.php:        if (PMA_Tracker::getVersion($GLOBALS['db'], $value['Name']) == -1) {
./phpmyadmin/db_tracking.php:        if (PMA_Tracker::getVersion($GLOBALS['db'], $tablename) == -1) {
./phpmyadmin/db_tracking.php:            $my_link .= PMA_getIcon('eye.png', __('Track table')) . '</a>';
./phpmyadmin/server_variables.php:            case 'getval':
./phpmyadmin/server_variables.php:   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')
./phpmyadmin/gis_data_editor.php:if (! isset($_REQUEST['get_gis_editor']) && ! isset($_REQUEST['generate'])) {
./phpmyadmin/gis_data_editor.php:// If the call is to get the whole content, start buffering, skipping </head> and <body> tags
./phpmyadmin/gis_data_editor.php:if (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {
./phpmyadmin/gis_data_editor.php:// If the call is to get the whole content, get the content in the buffer and make and AJAX response.
./phpmyadmin/gis_data_editor.php:if (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {
./phpmyadmin/gis_data_editor.php:    $extra_data['gis_editor'] = ob_get_contents();
./phpmyadmin/themes.php: * get some globals
./phpmyadmin/view_create.php:        $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/file_echo.php:    echo file_get_contents($_FILES['file']['tmp_name']);
./phpmyadmin/libraries/navigation_header.inc.php:                echo '" target="_blank"';
./phpmyadmin/libraries/navigation_header.inc.php:                    echo '?' . $query_url . '" target="frame_content"';
./phpmyadmin/libraries/navigation_header.inc.php:                    echo '" target="_blank"';
./phpmyadmin/libraries/navigation_header.inc.php:            ? PMA_getImage('b_home.png', __('Home'))
./phpmyadmin/libraries/navigation_header.inc.php:                .urlencode($PHP_AUTH_USER) . '" target="_parent"'
./phpmyadmin/libraries/navigation_header.inc.php:                    ? PMA_getImage('s_loggoff.png', __('Log out'))
./phpmyadmin/libraries/navigation_header.inc.php:            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));
./phpmyadmin/libraries/navigation_header.inc.php:    echo '    <a href="Documentation.html" target="documentation"'
./phpmyadmin/libraries/navigation_header.inc.php:        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));
./phpmyadmin/libraries/navigation_header.inc.php:        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';
./phpmyadmin/libraries/navigation_header.inc.php:        echo PMA_getImage('s_reload.png', __('Reload navigation frame'));
./phpmyadmin/libraries/import.lib.php: *  Check whether timeout is getting close
./phpmyadmin/libraries/import.lib.php:                            $my_die[] = array('sql' => $import_run_buffer['full'], 'error' => PMA_DBI_getError());
./phpmyadmin/libraries/import.lib.php:                                $msg .= $message->getMessage();
./phpmyadmin/libraries/import.lib.php:function PMA_getColumnAlphaName($num)
./phpmyadmin/libraries/import.lib.php:        $col_name = PMA_getColumnAlphaName($div);
./phpmyadmin/libraries/import.lib.php:function PMA_getColumnNumberFromName($name)
./phpmyadmin/libraries/import.lib.php:        // and subtract 64 to get corresponding decimal value
./phpmyadmin/libraries/import.lib.php:function PMA_getM($last_cumulative_size)
./phpmyadmin/libraries/import.lib.php:function PMA_getD($last_cumulative_size)
./phpmyadmin/libraries/import.lib.php:function PMA_getDecimalSize(&$cell)
./phpmyadmin/libraries/import.lib.php:            $oldM = PMA_getM($last_cumulative_size);
./phpmyadmin/libraries/import.lib.php:            $size = PMA_getDecimalSize($cell);
./phpmyadmin/libraries/import.lib.php:            $size = PMA_getDecimalSize($cell);
./phpmyadmin/libraries/import.lib.php:            $oldM = PMA_getM($last_cumulative_size);
./phpmyadmin/libraries/import.lib.php:            $oldD = PMA_getD($last_cumulative_size);
./phpmyadmin/libraries/import.lib.php:            $size = PMA_getDecimalSize($cell);
./phpmyadmin/libraries/import.lib.php:            $size = PMA_getDecimalSize($cell);
./phpmyadmin/libraries/import.lib.php:            $oldM = PMA_getM($last_cumulative_size);
./phpmyadmin/libraries/import.lib.php:            $oldD = PMA_getD($last_cumulative_size);
./phpmyadmin/libraries/header_printview.inc.php:<link rel="stylesheet" type="text/css" href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=print&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />
./phpmyadmin/libraries/sql_query_form.lib.php:        <form method="post" id="sqlqueryform" target="frame_content"
./phpmyadmin/libraries/sql_query_form.lib.php:              this.target = window.opener.parent.frame_content.name;
./phpmyadmin/libraries/sql_query_form.lib.php:            $tmp_db_link .= ' target="_self"'
./phpmyadmin/libraries/sql_query_form.lib.php:                . ' onclick="this.target=window.opener.frame_content.name"';
./phpmyadmin/libraries/sql_query_form.lib.php:        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);
./phpmyadmin/libraries/sql_query_form.lib.php:            $tmp_db_link .= ' target="_self"'
./phpmyadmin/libraries/sql_query_form.lib.php:                . ' onclick="this.target=window.opener.frame_content.name"';
./phpmyadmin/libraries/sql_query_form.lib.php:    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);
./phpmyadmin/libraries/sql_query_form.lib.php:            .' target="documentation">'
./phpmyadmin/libraries/sql_query_form.lib.php:            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';
./phpmyadmin/libraries/sql_query_form.lib.php:            .' target="documentation">' . __('Documentation') . '</a>): ';
./phpmyadmin/libraries/sql_query_form.lib.php:        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');
./phpmyadmin/libraries/sysinfo.lib.php:function getSysInfo()
./phpmyadmin/libraries/sysinfo.lib.php:        $buffer = $this->_getWMI('Win32_Processor', array('LoadPercentage'));
./phpmyadmin/libraries/sysinfo.lib.php:    private function _getWMI($strClass, $strValue = array()) {
./phpmyadmin/libraries/sysinfo.lib.php:        $buffer = $this->_getWMI("Win32_OperatingSystem", array('TotalVisibleMemorySize', 'FreePhysicalMemory'));
./phpmyadmin/libraries/sysinfo.lib.php:        $buffer = $this->_getWMI('Win32_PageFileUsage');
./phpmyadmin/libraries/sysinfo.lib.php:        $buf = file_get_contents('/proc/stat');
./phpmyadmin/libraries/sysinfo.lib.php:        preg_match_all('/^(MemTotal|MemFree|Cached|Buffers|SwapCached|SwapTotal|SwapFree):\s+(.*)\s*kB/im', file_get_contents('/proc/meminfo'), $matches);
./phpmyadmin/libraries/server_synchronize.lib.php: * Places matching tables in source and target databases in $matching_tables
./phpmyadmin/libraries/server_synchronize.lib.php: * array whereas $uncommon_source_tables array gets the tables present in
./phpmyadmin/libraries/server_synchronize.lib.php: * source database but are absent from target database.  Criterion for
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array $trg_tables              array of target database table names,
./phpmyadmin/libraries/server_synchronize.lib.php: *                                       but absent from target database
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_getMatchingTables($trg_tables, $src_tables, &$matching_tables, &$uncommon_source_tables)
./phpmyadmin/libraries/server_synchronize.lib.php:        $present_in_target = false;
./phpmyadmin/libraries/server_synchronize.lib.php:                $present_in_target = true;
./phpmyadmin/libraries/server_synchronize.lib.php:        if ($present_in_target === false) {
./phpmyadmin/libraries/server_synchronize.lib.php: * Places tables present in target database but are absent from source database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array $trg_tables              array of target database table names,
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array &$uncommon_target_tables empty array passed by reference to save
./phpmyadmin/libraries/server_synchronize.lib.php: *                                       names of tables presnet in target database
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, &$uncommon_target_tables)
./phpmyadmin/libraries/server_synchronize.lib.php:            $uncommon_target_tables[] = $trg_tables[$c];
./phpmyadmin/libraries/server_synchronize.lib.php: * Finds the difference in source and target matching tables by
./phpmyadmin/libraries/server_synchronize.lib.php: * first comparing source table's primary key entries with target table enteries.
./phpmyadmin/libraries/server_synchronize.lib.php: * It gets the field names for the matching table also for comparisons.
./phpmyadmin/libraries/server_synchronize.lib.php: * If the entry is found in target table also then it is checked for the remaining
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string  $trg_db                  name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param db_link $trg_link                connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php:        $fld_results = PMA_DBI_get_columns($src_db, $matching_table[$matching_table_index], null, true, $src_link);
./phpmyadmin/libraries/server_synchronize.lib.php:        $source_result_set = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $is_key, $src_link);
./phpmyadmin/libraries/server_synchronize.lib.php:        $trg_fld_results = PMA_DBI_get_columns($trg_db, $matching_table[$matching_table_index], null, true, $trg_link);
./phpmyadmin/libraries/server_synchronize.lib.php:                // Query the target server to see which rows already exist
./phpmyadmin/libraries/server_synchronize.lib.php:                $target_result_set = PMA_DBI_fetch_result($trg_select_query, null, null, $trg_link);
./phpmyadmin/libraries/server_synchronize.lib.php:                if ($target_result_set) {
./phpmyadmin/libraries/server_synchronize.lib.php:                    * Comparing each corresponding field of the source and target matching rows.
./phpmyadmin/libraries/server_synchronize.lib.php:                            if (isset($target_result_set[0][$fld[$m]])) {
./phpmyadmin/libraries/server_synchronize.lib.php:                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (! (in_array($fld[$m], $is_key)))) {
./phpmyadmin/libraries/server_synchronize.lib.php:                            if (isset($target_result_set[0][$fld[$m]])) {
./phpmyadmin/libraries/server_synchronize.lib.php:                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (!(in_array($fld[$m], $is_key)))) {
./phpmyadmin/libraries/server_synchronize.lib.php:                     * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table
./phpmyadmin/libraries/server_synchronize.lib.php:                 * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * Finds the rows which are to be deleted from target table.
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array   $trg_keys             array of target table keys
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string  $trg_db               name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param db_link $trg_link             connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_findDeleteRowsFromTargetTables(&$delete_array, $matching_table, $matching_table_index, $trg_keys, $src_keys, $trg_db, $trg_link, $src_db, $src_link)
./phpmyadmin/libraries/server_synchronize.lib.php:        $target_key_values = PMA_get_column_values($trg_db, $matching_table[$matching_table_index], $trg_keys[$matching_table_index], $trg_link);
./phpmyadmin/libraries/server_synchronize.lib.php:        $source_key_values = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $src_keys[$matching_table_index], $src_link);
./phpmyadmin/libraries/server_synchronize.lib.php:        if (isset($target_key_values)) {
./phpmyadmin/libraries/server_synchronize.lib.php:            $delete_array[$matching_table_index] = $target_key_values;
./phpmyadmin/libraries/server_synchronize.lib.php:            if (isset($target_key_values)) {
./phpmyadmin/libraries/server_synchronize.lib.php:                for ($i = 0; $i < sizeof($target_key_values); $i++) {
./phpmyadmin/libraries/server_synchronize.lib.php:                    if (! (in_array($target_key_values[$i], $source_key_values))) {
./phpmyadmin/libraries/server_synchronize.lib.php:                        $delete_array[$matching_table_index][$row] = $target_key_values[$i];
./phpmyadmin/libraries/server_synchronize.lib.php:            if (isset($target_key_values)) {
./phpmyadmin/libraries/server_synchronize.lib.php:                for ($i = 0; $i < sizeof($target_key_values); $i++) {
./phpmyadmin/libraries/server_synchronize.lib.php:                            if ($target_key_values[$i][$trg_keys[$matching_table_index][$k]] != $source_key_values[$j][$trg_keys[$matching_table_index][$k]]) {
./phpmyadmin/libraries/server_synchronize.lib.php:                            $delete_array[$matching_table_index][$row][$trg_keys[$matching_table_index][$l]] = $target_key_values[$i][$trg_keys[$matching_table_index][$l]];
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $source_tables_uncommon table names that are in source db and not in target db
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index]
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string  $trg_db               Name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed   $trg_link             Connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_updateTargetTables($table, $update_array, $src_db, $trg_db, $trg_link, $matching_table_index, $matching_table_keys, $display)
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index]
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                  name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link                connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$add_column_array       column names that are to be added in target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $target_tables_keys      field names that are keys in the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $uncommon_cols           column names that are present in target table and not in source table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$target_indexes         column names on which indexes are made in target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$add_indexes_array      column names on which index is to be added in target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$update_array           rows that are to be updated in target
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_insertIntoTargetTable($matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, &$array_insert, $matching_table_index,
./phpmyadmin/libraries/server_synchronize.lib.php: $matching_tables_keys, $source_columns, &$add_column_array, $criteria, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $uncommon_cols,
./phpmyadmin/libraries/server_synchronize.lib.php: &$alter_str_array, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$delete_array, &$update_array, $display)
./phpmyadmin/libraries/server_synchronize.lib.php:                                    PMA_alterTargetTableStructure(
./phpmyadmin/libraries/server_synchronize.lib.php:                                        $criteria, $matching_tables_keys, $target_tables_keys, $table_index[0], $display
./phpmyadmin/libraries/server_synchronize.lib.php:                                    PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_index[0], $display);
./phpmyadmin/libraries/server_synchronize.lib.php:                                    PMA_findDeleteRowsFromTargetTables(
./phpmyadmin/libraries/server_synchronize.lib.php:                                        $delete_array, $matching_tables, $table_index[0], $target_tables_keys,
./phpmyadmin/libraries/server_synchronize.lib.php:                                        PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index[0], $target_tables_keys, $delete_array, $display);
./phpmyadmin/libraries/server_synchronize.lib.php:                                    PMA_addColumnsInTargetTable(
./phpmyadmin/libraries/server_synchronize.lib.php:                                        $matching_tables_fields, $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables,
./phpmyadmin/libraries/server_synchronize.lib.php:                                        $trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array,
./phpmyadmin/libraries/server_synchronize.lib.php:                                    PMA_updateTargetTables(
./phpmyadmin/libraries/server_synchronize.lib.php:                                     PMA_insertIntoTargetTable(
./phpmyadmin/libraries/server_synchronize.lib.php:                                         $matching_tables_keys, $source_columns, $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,
./phpmyadmin/libraries/server_synchronize.lib.php:                                         $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes, $target_indexes, $add_indexes_array,
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_createTargetTables() Create the missing table $uncommon_table in target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                  name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link                connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$uncommon_tables        names of tables present in source but not in target
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, &$uncommon_tables, $table_index, &$uncommon_tables_fields, $display)
./phpmyadmin/libraries/server_synchronize.lib.php:        $fields_result = PMA_DBI_get_columns($src_db, $uncommon_tables[$table_index], null, true, $src_link);
./phpmyadmin/libraries/server_synchronize.lib.php:                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_populateTargetTables() inserts data into uncommon tables after they have been created
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                 name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link               connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db)
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $uncommon_tables, $table_index, $uncommon_tables_fields, $display)
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_deleteFromTargetTable() delete rows from target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db             name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link           connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $target_tables_keys primary key names of the target tables
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index, $target_tables_keys, $delete_array, $display)
./phpmyadmin/libraries/server_synchronize.lib.php:        if (isset($target_tables_keys[$table_index])) {
./phpmyadmin/libraries/server_synchronize.lib.php:            for ($y = 0; $y < sizeof($target_tables_keys[$table_index]); $y++) {
./phpmyadmin/libraries/server_synchronize.lib.php:                $delete_query .= PMA_backquote($target_tables_keys[$table_index][$y]) . " = '";
./phpmyadmin/libraries/server_synchronize.lib.php:                if (sizeof($target_tables_keys[$table_index]) == 1) {
./phpmyadmin/libraries/server_synchronize.lib.php:                } elseif (sizeof($target_tables_keys[$table_index]) > 1) {
./phpmyadmin/libraries/server_synchronize.lib.php:                    $delete_query .= $delete_array[$table_index][$i][$target_tables_keys[$table_index][$y]] . "'";
./phpmyadmin/libraries/server_synchronize.lib.php:                if ($y < (sizeof($target_tables_keys[$table_index]) - 1)) {
./phpmyadmin/libraries/server_synchronize.lib.php:                           . $target_tables_keys[$table_index][$y] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";
./phpmyadmin/libraries/server_synchronize.lib.php:                        $drop_pk_query = "DELETE FROM " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . " WHERE " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . " = " . $target_tables_keys[$table_index][$y] . ";";
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_structureDiffInTables() Gets all the column information for source and target table.
./phpmyadmin/libraries/server_synchronize.lib.php: * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column.
./phpmyadmin/libraries/server_synchronize.lib.php: * If column does not exist in target table then it is placed in  $add_column_array.
./phpmyadmin/libraries/server_synchronize.lib.php: * If column exists in target table but criteria is different then it is palced in $alter_str_array.
./phpmyadmin/libraries/server_synchronize.lib.php: * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns.
./phpmyadmin/libraries/server_synchronize.lib.php: * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys.
./phpmyadmin/libraries/server_synchronize.lib.php: * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys.
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                 name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link               connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$target_columns        columns information of the target tables
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target
./phpmyadmin/libraries/server_synchronize.lib.php: *                                       column name which is to be added in the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$target_tables_keys    field names which is key in the target table
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_columns, &$target_columns, &$alter_str_array,
./phpmyadmin/libraries/server_synchronize.lib.php: &$add_column_array, &$uncommon_columns, $criteria, &$target_tables_keys, $matching_table_index)
./phpmyadmin/libraries/server_synchronize.lib.php:    //Gets column information for source and target table
./phpmyadmin/libraries/server_synchronize.lib.php:    $source_columns[$matching_table_index] = PMA_DBI_get_columns_full($src_db, $matching_tables[$matching_table_index], null, $src_link);
./phpmyadmin/libraries/server_synchronize.lib.php:    $target_columns[$matching_table_index] = PMA_DBI_get_columns_full($trg_db, $matching_tables[$matching_table_index], null, $trg_link);
./phpmyadmin/libraries/server_synchronize.lib.php:        if (isset($target_columns[$matching_table_index][$column_name]['Field'])) {
./phpmyadmin/libraries/server_synchronize.lib.php:            //If column exists in target table then matches criteria like type, null, collation, key, default, comment of the column
./phpmyadmin/libraries/server_synchronize.lib.php:                if ($source_columns[$matching_table_index][$column_name][$criteria[$i]] != $target_columns[$matching_table_index][$column_name][$criteria[$i]]) {
./phpmyadmin/libraries/server_synchronize.lib.php:                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')
./phpmyadmin/libraries/server_synchronize.lib.php:                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')))
./phpmyadmin/libraries/server_synchronize.lib.php:    //Finds column names that are present in target table but not in source table
./phpmyadmin/libraries/server_synchronize.lib.php:    foreach ($target_columns[$matching_table_index] as $fld_name => $each_column) {
./phpmyadmin/libraries/server_synchronize.lib.php:        if ($target_columns[$matching_table_index][$fld_name]['Key'] == 'PRI') {
./phpmyadmin/libraries/server_synchronize.lib.php:        $target_tables_keys[$matching_table_index] = $keys;
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                  name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link                connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$add_column_array       the names of the column(field) that are to be added in the target
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $target_tables_keys      field names which is key in the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $uncommon_tables         table names that are present in source db and not in target db
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, &$add_column_array, $matching_tables_fields,
./phpmyadmin/libraries/server_synchronize.lib.php:         $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $table_counter, $uncommon_cols, $display)
./phpmyadmin/libraries/server_synchronize.lib.php:                $trg_key_size = sizeof($target_tables_keys[$table_counter]);
./phpmyadmin/libraries/server_synchronize.lib.php:                        if (! (in_array($target_tables_keys[$table_counter], $uncommon_cols))) {
./phpmyadmin/libraries/server_synchronize.lib.php:            //If column is a foreign key then it is checked that referenced table exist in target db. If referenced table does not exist in target db then
./phpmyadmin/libraries/server_synchronize.lib.php:                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);
./phpmyadmin/libraries/server_synchronize.lib.php: * uses    PMA_createTargetTables()
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                  name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link                connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php:                PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                 name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link               connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$target_tables_keys    field names which is key in the target table
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables, &$source_columns, &$alter_str_array, $matching_tables_fields, $criteria,
./phpmyadmin/libraries/server_synchronize.lib.php: &$matching_tables_keys, &$target_tables_keys, $matching_table_index, $display)
./phpmyadmin/libraries/server_synchronize.lib.php:        if (sizeof($target_tables_keys[$matching_table_index]) > 0) {
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table.
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db           name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link         connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_counter, $display)
./phpmyadmin/libraries/server_synchronize.lib.php: * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array
./phpmyadmin/libraries/server_synchronize.lib.php: * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array.
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db                name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link              connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$target_indexes       indexes of the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_indexes, &$target_indexes, &$add_indexes_array,
./phpmyadmin/libraries/server_synchronize.lib.php:    //Gets indexes information for source and target table
./phpmyadmin/libraries/server_synchronize.lib.php:    $source_indexes[$table_counter] = PMA_DBI_get_table_indexes($src_db, $matching_tables[$table_counter], $src_link);
./phpmyadmin/libraries/server_synchronize.lib.php:    $target_indexes[$table_counter] = PMA_DBI_get_table_indexes($trg_db, $matching_tables[$table_counter], $trg_link);
./phpmyadmin/libraries/server_synchronize.lib.php:        //Compares key name and non_unique characteristic of source indexes with target indexes
./phpmyadmin/libraries/server_synchronize.lib.php:        while (($z <= sizeof($target_indexes[$table_counter])) && ($found == false)) {
./phpmyadmin/libraries/server_synchronize.lib.php:            if (isset($source_indexes[$table_counter][$a]) && isset($target_indexes[$table_counter][$z]) && $source_indexes[$table_counter][$a]['Key_name'] == $target_indexes[$table_counter][$z]['Key_name']) {
./phpmyadmin/libraries/server_synchronize.lib.php:                if (($source_indexes[$table_counter][$a]['Column_name'] != $target_indexes[$table_counter][$z]['Column_name']) || ($source_indexes[$table_counter][$a]['Non_unique'] != $target_indexes[$table_counter][$z]['Non_unique'])) {
./phpmyadmin/libraries/server_synchronize.lib.php:                    if (! (($source_indexes[$table_counter][$a]['Key_name'] == "PRIMARY") || ($target_indexes[$table_counter][$z]['Key_name'] == 'PRIMARY'))) {
./phpmyadmin/libraries/server_synchronize.lib.php:    //Finds indexes that exist on target table but not on source table
./phpmyadmin/libraries/server_synchronize.lib.php:    for ($b = 0; $b < sizeof($target_indexes[$table_counter]); $b++) {
./phpmyadmin/libraries/server_synchronize.lib.php:            if ($target_indexes[$table_counter][$b]['Column_name'] == $source_indexes[$table_counter][$c]['Column_name']) {
./phpmyadmin/libraries/server_synchronize.lib.php:            $remove_indexes_array[$table_counter][] = $target_indexes[$table_counter][$b]['Key_name'];
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db               name of target database
./phpmyadmin/libraries/server_synchronize.lib.php: * @param mixed  $trg_link             connection established with target server
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $target_indexes       indexes of the target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $add_indexes_array    column names on which indexes are to be created in target table
./phpmyadmin/libraries/server_synchronize.lib.php: * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array, $alter_indexes_array,
./phpmyadmin/libraries/server_synchronize.lib.php:    //Adds indexes on target table
./phpmyadmin/libraries/server_synchronize.lib.php:    //Alter indexes of target table
./phpmyadmin/libraries/server_synchronize.lib.php:    //Removes indexes from target table
./phpmyadmin/libraries/server_synchronize.lib.php:        for ($a = 0; $a < sizeof($target_indexes[$table_counter]); $a++) {
./phpmyadmin/libraries/server_synchronize.lib.php: * @param string $trg_db target db name
./phpmyadmin/libraries/server_synchronize.lib.php:    echo '<th>' . __('Target database') . ':  '. htmlspecialchars($trg_db) . '<br />(';
./phpmyadmin/libraries/server_synchronize.lib.php: * - dst_table_name - target server table name
./phpmyadmin/libraries/server_synchronize.lib.php: * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null)
./phpmyadmin/libraries/server_synchronize.lib.php:function PMA_get_column_values($database, $table, $column, $link = null)
./phpmyadmin/libraries/db_structure.lib.php:            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));
./phpmyadmin/libraries/db_structure.lib.php:            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));
./phpmyadmin/libraries/db_structure.lib.php:            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));
./phpmyadmin/libraries/db_structure.lib.php:            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));
./phpmyadmin/libraries/pmd_common.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/pmd_common.php:function get_tabs()
./phpmyadmin/libraries/pmd_common.php:    $tables = PMA_DBI_get_tables_full($GLOBALS['db']);
./phpmyadmin/libraries/pmd_common.php:        $DF = PMA_getDisplayField($GLOBALS['db'], $one_table['TABLE_NAME']);
./phpmyadmin/libraries/pmd_common.php:function get_tab_info()
./phpmyadmin/libraries/pmd_common.php:        $fields_rs   = PMA_DBI_query(PMA_DBI_get_columns_sql($GLOBALS['db'], $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i], null, true), null, PMA_DBI_QUERY_STORE);
./phpmyadmin/libraries/pmd_common.php:function get_script_contr()
./phpmyadmin/libraries/pmd_common.php:        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'internal');
./phpmyadmin/libraries/pmd_common.php:        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'foreign');
./phpmyadmin/libraries/pmd_common.php:function get_pk_or_unique_keys()
./phpmyadmin/libraries/pmd_common.php:    return get_all_keys(true);
./phpmyadmin/libraries/pmd_common.php:function get_all_keys($unique_only = false)
./phpmyadmin/libraries/pmd_common.php:        foreach (PMA_Index::getFromTable($table, $schema) as $index) {
./phpmyadmin/libraries/pmd_common.php:            $columns = $index->getColumns();
./phpmyadmin/libraries/pmd_common.php:function get_script_tabs()
./phpmyadmin/libraries/pmd_common.php:function get_tab_pos()
./phpmyadmin/libraries/pmd_common.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/pmd_common.php:function get_owners()
./phpmyadmin/libraries/pmd_common.php:get_tabs();
./phpmyadmin/libraries/relation_cleanup.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation_cleanup.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation_cleanup.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/zip.lib.php:        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);
./phpmyadmin/libraries/charset_conversion.lib.php: * @param string   target charset
./phpmyadmin/libraries/File.class.php:        return unlink($this->getName());
./phpmyadmin/libraries/File.class.php:    function getContent($as_binary = true, $offset = 0, $length = null)
./phpmyadmin/libraries/File.class.php:            if (function_exists('file_get_contents')) {
./phpmyadmin/libraries/File.class.php:                $this->_content = file_get_contents($this->getName());
./phpmyadmin/libraries/File.class.php:            } elseif ($size = filesize($this->getName())) {
./phpmyadmin/libraries/File.class.php:                $this->_content = fread(fopen($this->getName(), 'rb'), $size);
./phpmyadmin/libraries/File.class.php:        return is_uploaded_file($this->getName());
./phpmyadmin/libraries/File.class.php:    function getName()
./phpmyadmin/libraries/File.class.php:                if ($PMA_Config->get('FILEINFO_EXISTS')) {
./phpmyadmin/libraries/File.class.php:    function getError()
./phpmyadmin/libraries/File.class.php:        $is_readable = is_readable($this->getName());
./phpmyadmin/libraries/File.class.php:        $new_file_to_upload = tempnam(realpath($GLOBALS['cfg']['TempDir']), basename($this->getName()));
./phpmyadmin/libraries/File.class.php:        $move_uploaded_file_result = move_uploaded_file($this->getName(), $new_file_to_upload);
./phpmyadmin/libraries/File.class.php:     * @todo    move file read part into readChunk() or getChunk()
./phpmyadmin/libraries/File.class.php:        $file = fopen($this->getName(), 'rb');
./phpmyadmin/libraries/File.class.php:         * get registered plugins for file compression
./phpmyadmin/libraries/File.class.php:        foreach (PMA_getPlugins($type = 'compression') as $plugin) {
./phpmyadmin/libraries/File.class.php:            if (call_user_func_array(array($plugin['classname'], 'canHandle'), array($this->getName()))) {
./phpmyadmin/libraries/File.class.php:    function getHandle()
./phpmyadmin/libraries/File.class.php:            $this->_handle = @fopen($this->getName(), 'r');
./phpmyadmin/libraries/File.class.php:        switch ($this->getCompression()) {
./phpmyadmin/libraries/File.class.php:                    $this->_handle = @bzopen($this->getName(), 'r');
./phpmyadmin/libraries/File.class.php:                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());
./phpmyadmin/libraries/File.class.php:                    $this->_handle = @gzopen($this->getName(), 'r');
./phpmyadmin/libraries/File.class.php:                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());
./phpmyadmin/libraries/File.class.php:                    $result = PMA_getZipContents($this->getName());
./phpmyadmin/libraries/File.class.php:                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());
./phpmyadmin/libraries/File.class.php:                $this->_handle = @fopen($this->getName(), 'r');
./phpmyadmin/libraries/File.class.php:                $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());
./phpmyadmin/libraries/File.class.php:    function getCharset()
./phpmyadmin/libraries/File.class.php:    function getCompression()
./phpmyadmin/libraries/File.class.php:            $this->getNextChunk($length);
./phpmyadmin/libraries/File.class.php:            $length -= $this->getChunkSize();
./phpmyadmin/libraries/File.class.php:    function getNextChunk($max_size = null)
./phpmyadmin/libraries/File.class.php:            $size = min($max_size, $this->getChunkSize());
./phpmyadmin/libraries/File.class.php:            $size = $this->getChunkSize();
./phpmyadmin/libraries/File.class.php:        // $result = $this->handler->getNextChunk($size);
./phpmyadmin/libraries/File.class.php:        switch ($this->getCompression()) {
./phpmyadmin/libraries/File.class.php:                while (strlen($result) < $size - 8192 && ! feof($this->getHandle())) {
./phpmyadmin/libraries/File.class.php:                    $result .= bzread($this->getHandle(), $size);
./phpmyadmin/libraries/File.class.php:                $result = gzread($this->getHandle(), $size);
./phpmyadmin/libraries/File.class.php:                 * if getNextChunk() is used some day,
./phpmyadmin/libraries/File.class.php:                $import_handle->ReadFile($this->getName());
./phpmyadmin/libraries/File.class.php:                $result = fread($this->getHandle(), $size);
./phpmyadmin/libraries/File.class.php:            $result = PMA_convert_string($this->getCharset(), 'utf-8', $result);
./phpmyadmin/libraries/File.class.php:            if ($this->getOffset() === 0) {
./phpmyadmin/libraries/File.class.php:    function getOffset()
./phpmyadmin/libraries/File.class.php:    function getChunkSize()
./phpmyadmin/libraries/File.class.php:    function getContentLength()
./phpmyadmin/libraries/File.class.php:        if ($this->getHandle()) {
./phpmyadmin/libraries/File.class.php:            return feof($this->getHandle());
./phpmyadmin/libraries/File.class.php:            return ($this->getOffset() >= $this->getContentLength());
./phpmyadmin/libraries/File.class.php:    static function getRecentBLOBReference()
./phpmyadmin/libraries/replication_gui.lib.php:    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();
./phpmyadmin/libraries/replication_gui.lib.php: * get the correct username and hostname lengths for this MySQL server
./phpmyadmin/libraries/replication_gui.lib.php:function PMA_replication_get_username_hostname_length()
./phpmyadmin/libraries/replication_gui.lib.php:    $fields_info = PMA_DBI_get_columns('mysql', 'user');
./phpmyadmin/libraries/replication_gui.lib.php:    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();
./phpmyadmin/libraries/db_info.inc.php:        $tables = PMA_DBI_get_tables_full($db, $tbl_group, true, null, 0, false, $sort, $sort_order);
./phpmyadmin/libraries/db_info.inc.php:        $tables = PMA_DBI_get_tables_full($db, $tbl_group, 'comment', null, 0, false, $sort, $sort_order);
./phpmyadmin/libraries/db_info.inc.php:        // - get the total number of tables
./phpmyadmin/libraries/db_info.inc.php:        $tables = PMA_DBI_get_tables($db);
./phpmyadmin/libraries/db_info.inc.php:            $tables = PMA_DBI_get_tables_full($db, false, false, null, 0, false, $sort, $sort_order);
./phpmyadmin/libraries/db_info.inc.php:            $tables = PMA_DBI_get_tables_full($db, false, false, null, $pos, true, $sort, $sort_order);
./phpmyadmin/libraries/common.inc.php:$PMA_PHP_SELF = PMA_getenv('PHP_SELF');
./phpmyadmin/libraries/common.inc.php:$_PATH_INFO = PMA_getenv('PATH_INFO');
./phpmyadmin/libraries/common.inc.php:foreach (get_defined_vars() as $key => $value) {
./phpmyadmin/libraries/common.inc.php:    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {
./phpmyadmin/libraries/common.inc.php:date_default_timezone_set(@date_default_timezone_get());
./phpmyadmin/libraries/common.inc.php:if ($GLOBALS['PMA_Config']->get('ForceSSL')
./phpmyadmin/libraries/common.inc.php:    && ! $GLOBALS['PMA_Config']->get('is_https')
./phpmyadmin/libraries/common.inc.php:    $url = $GLOBALS['PMA_Config']->get('PmaAbsoluteUri');
./phpmyadmin/libraries/common.inc.php:        if($GLOBALS['PMA_Config']->get('SSLPort')) {
./phpmyadmin/libraries/common.inc.php:            $port_number = $GLOBALS['PMA_Config']->get('SSLPort');
./phpmyadmin/libraries/common.inc.php:    // delete the current session, otherwise we get problems (see bug #2397877)
./phpmyadmin/libraries/common.inc.php:        'server', 'db', 'table', 'target', 'lang',
./phpmyadmin/libraries/common.inc.php:    $tmp = $_SESSION['PMA_Theme_Manager']->getThemeCookie();
./phpmyadmin/libraries/common.inc.php:$GLOBALS['theme']           = $_SESSION['PMA_Theme']->getName();
./phpmyadmin/libraries/common.inc.php:$GLOBALS['pmaThemePath']    = $_SESSION['PMA_Theme']->getPath();
./phpmyadmin/libraries/common.inc.php:$GLOBALS['pmaThemeImage']   = $_SESSION['PMA_Theme']->getImgPath();
./phpmyadmin/libraries/common.inc.php:if (@file_exists($_SESSION['PMA_Theme']->getLayoutFile())) {
./phpmyadmin/libraries/common.inc.php:    include $_SESSION['PMA_Theme']->getLayoutFile();
./phpmyadmin/libraries/common.inc.php:        // get LoginCookieValidity from preferences cache
./phpmyadmin/libraries/common.inc.php:        // get the privileges list for the current user but the true user link
./phpmyadmin/libraries/common.inc.php:     * include subform target page
./phpmyadmin/libraries/header.inc.php:    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);
./phpmyadmin/libraries/header.inc.php:        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'
./phpmyadmin/libraries/header.inc.php:                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";
./phpmyadmin/libraries/header.inc.php:                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";
./phpmyadmin/libraries/header.inc.php:                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";
./phpmyadmin/libraries/header.inc.php:                        $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/header.inc.php:                            $comment = PMA_getDbComment($GLOBALS['db']);
./phpmyadmin/libraries/display_create_table.lib.php:    echo PMA_getImage('b_newtbl.png');
./phpmyadmin/libraries/file_listing.php:function PMA_getDirContent($dir, $expression = '')
./phpmyadmin/libraries/file_listing.php:function PMA_getFileSelectOptions($dir, $extensions = '', $active = '')
./phpmyadmin/libraries/file_listing.php:    $list = PMA_getDirContent($dir, $extensions);
./phpmyadmin/libraries/file_listing.php: * @return string | separated list of extensions usable in PMA_getDirContent
./phpmyadmin/libraries/auth/signon.auth.lib.php: * @return  boolean   whether we get authentication settings or not
./phpmyadmin/libraries/auth/signon.auth.lib.php:        list ($PHP_AUTH_USER, $PHP_AUTH_PW) = get_login_credentials($cfg['Server']['user']);
./phpmyadmin/libraries/auth/signon.auth.lib.php:        /* Also get token as it is needed to access subpages */
./phpmyadmin/libraries/auth/signon.auth.lib.php:    // Returns whether we get authentication settings or not
./phpmyadmin/libraries/auth/signon.auth.lib.php:        } elseif (PMA_DBI_getError()) {
./phpmyadmin/libraries/auth/signon.auth.lib.php:            $_SESSION['PMA_single_signon_error_message'] = PMA_sanitize(PMA_DBI_getError());
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
./phpmyadmin/libraries/auth/cookie.auth.lib.php:function PMA_get_blowfish_secret()
./phpmyadmin/libraries/auth/cookie.auth.lib.php:<a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/'); ?>" target="_blank" class="logo"><?php
./phpmyadmin/libraries/auth/cookie.auth.lib.php:<form method="post" action="index.php" name="login_form"<?php echo $autocomplete; ?> target="_top" class="login">
./phpmyadmin/libraries/auth/cookie.auth.lib.php:    echo '<a href="./Documentation.html" target="documentation" ' .
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        echo PMA_getImage('b_help.png', __('phpMyAdmin documentation'));
./phpmyadmin/libraries/auth/cookie.auth.lib.php:    if (! empty($GLOBALS['target'])) {
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        $_form_params['target'] = $GLOBALS['target'];
./phpmyadmin/libraries/auth/cookie.auth.lib.php: * @return  boolean   whether we get authentication settings or not
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        PMA_get_blowfish_secret());
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        PMA_get_blowfish_secret());
./phpmyadmin/libraries/auth/cookie.auth.lib.php:            PMA_get_blowfish_secret()));
./phpmyadmin/libraries/auth/cookie.auth.lib.php:            PMA_get_blowfish_secret()),
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        // any target to pass?
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        if (! empty($GLOBALS['target']) && $GLOBALS['target'] != 'index.php') {
./phpmyadmin/libraries/auth/cookie.auth.lib.php:            $url_params['target'] = $GLOBALS['target'];
./phpmyadmin/libraries/auth/cookie.auth.lib.php:        if (PMA_getenv('SCRIPT_NAME')) {
./phpmyadmin/libraries/auth/cookie.auth.lib.php:            $GLOBALS['target'] = basename(PMA_getenv('SCRIPT_NAME'));
./phpmyadmin/libraries/auth/cookie.auth.lib.php:            if ('tbl_alter.php' == $GLOBALS['target']) {
./phpmyadmin/libraries/auth/cookie.auth.lib.php:                $GLOBALS['target'] = 'tbl_structure.php';
./phpmyadmin/libraries/auth/cookie.auth.lib.php:    } elseif (PMA_DBI_getError()) {
./phpmyadmin/libraries/auth/http.auth.lib.php: * @return  boolean   whether we get authentication settings or not
./phpmyadmin/libraries/auth/http.auth.lib.php:        if (PMA_getenv('PHP_AUTH_USER')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_USER = PMA_getenv('PHP_AUTH_USER');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('REMOTE_USER')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_USER = PMA_getenv('REMOTE_USER');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('REDIRECT_REMOTE_USER')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_USER = PMA_getenv('REDIRECT_REMOTE_USER');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('AUTH_USER')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_USER = PMA_getenv('AUTH_USER');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('HTTP_AUTHORIZATION')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_USER = PMA_getenv('HTTP_AUTHORIZATION');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('Authorization')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_USER = PMA_getenv('Authorization');
./phpmyadmin/libraries/auth/http.auth.lib.php:        if (PMA_getenv('PHP_AUTH_PW')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_PW = PMA_getenv('PHP_AUTH_PW');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('REMOTE_PASSWORD')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_PW = PMA_getenv('REMOTE_PASSWORD');
./phpmyadmin/libraries/auth/http.auth.lib.php:        } elseif (PMA_getenv('AUTH_PASSWORD')) {
./phpmyadmin/libraries/auth/http.auth.lib.php:            $PHP_AUTH_PW = PMA_getenv('AUTH_PASSWORD');
./phpmyadmin/libraries/auth/http.auth.lib.php:    // Returns whether we get authentication settings or not
./phpmyadmin/libraries/auth/http.auth.lib.php:    $error = PMA_DBI_getError();
./phpmyadmin/libraries/auth/config.auth.lib.php:    $conn_error = PMA_DBI_getError();
./phpmyadmin/libraries/auth/swekey/swekey.php: *  @param  url                 The url to get
./phpmyadmin/libraries/auth/swekey/swekey.php:                    error_log("SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url");
./phpmyadmin/libraries/auth/swekey/swekey.php:        $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);
./phpmyadmin/libraries/auth/swekey/swekey.php:            error_log("SWEKEY_ERROR:Error $gSwekeyLastError ($curlerr) getting $url");
./phpmyadmin/libraries/auth/swekey/swekey.php:        error_log("SWEKEY_ERROR:Error $curlerr getting $url");
./phpmyadmin/libraries/auth/swekey/swekey.php:               $res = $reply->getBody();
./phpmyadmin/libraries/auth/swekey/swekey.php:               $info = $r->getResponseInfo();
./phpmyadmin/libraries/auth/swekey/swekey.php:                    error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);
./phpmyadmin/libraries/auth/swekey/swekey.php: //               error_log("SWEKEY_WARNING:HttpException ".$e." getting ".$url);
./phpmyadmin/libraries/auth/swekey/swekey.php:        error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);
./phpmyadmin/libraries/auth/swekey/swekey.php:    $res = @file_get_contents($url);
./phpmyadmin/libraries/auth/swekey/swekey.php:    error_log("SWEKEY_ERROR:Error ".$response_code." getting ".$url);
./phpmyadmin/libraries/auth/swekey/swekey.php: *  This function get a new random token and reuse it.
./phpmyadmin/libraries/auth/swekey/swekey.php: *  You should always use this function to get half random token.
./phpmyadmin/libraries/auth/swekey/swekey.php:    // If not we try to get it from a temp file (PHP >= 5.2.1 only)
./phpmyadmin/libraries/auth/swekey/swekey.php:        if (function_exists('sys_get_temp_dir')) {
./phpmyadmin/libraries/auth/swekey/swekey.php:            $tempdir = sys_get_temp_dir();
./phpmyadmin/libraries/auth/swekey/swekey.php:            $cachefile = $tempdir."/swekey-rnd-token-".get_current_user();
./phpmyadmin/libraries/auth/swekey/swekey.php:                    $res = @file_get_contents($cachefile);
./phpmyadmin/libraries/auth/swekey/swekey.php:    // If we don't have a valid RT here we have to get it from the server
./phpmyadmin/libraries/auth/swekey/swekey.php: *  You should always use this function to get random token.
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:    			g_SwekeyPlugin = document.getElementById("swekey_activex");
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:                    // ortherwise SetClientSite is not called and we can not get the url
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:    				g_SwekeyPlugin = document.getElementById("swekey_activex");
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:			g_SwekeyPlugin = document.getElementById("swekey_plugin");
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:						g_SwekeyPlugin = document.getElementById("swekey_plugin");
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:			return Swekey_Plugin().getotp(id, rt);
./phpmyadmin/libraries/auth/swekey/authentication.inc.php:			return Swekey_Plugin().getlinkedotp(id, rt);
./phpmyadmin/libraries/auth/swekey/swekey.auth.lib.php:        $valid_swekeys = explode("\n", @file_get_contents($confFile));
./phpmyadmin/libraries/auth/swekey/swekey.auth.lib.php:            var input_username = document.getElementById("<?php echo $input_name; ?>");
./phpmyadmin/libraries/auth/swekey/swekey.auth.lib.php:            var input_go = document.getElementById("<?php echo $input_go; ?>");
./phpmyadmin/libraries/session.inc.php:} elseif (ini_get('session.auto_start') == true && session_name() != 'phpMyAdmin') {
./phpmyadmin/libraries/session.inc.php:session_set_cookie_params(0, $GLOBALS['PMA_Config']->getCookiePath(),
./phpmyadmin/libraries/session.inc.php:$path = $GLOBALS['PMA_Config']->get('SessionSavePath');
./phpmyadmin/libraries/session.inc.php:// on some servers (for example, sourceforge.net), we get a permission error
./phpmyadmin/libraries/db_links.inc.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/Advisor.class.php:        $sysinfo = getSysInfo();
./phpmyadmin/libraries/Advisor.class.php:                        . $e->getMessage();
./phpmyadmin/libraries/Advisor.class.php:                        . $e->getMessage();
./phpmyadmin/libraries/Advisor.class.php:                        . $e->getMessage();
./phpmyadmin/libraries/Advisor.class.php:            return sprintf(_gettext(Advisor::escapePercent($str)));
./phpmyadmin/libraries/Advisor.class.php:            $printf = 'sprintf("' . _gettext(Advisor::escapePercent($str)) . '",';
./phpmyadmin/libraries/Advisor.class.php:                        $e->getMessage()
./phpmyadmin/libraries/Advisor.class.php:        $err = ob_get_contents();
./phpmyadmin/libraries/Error_Handler.class.php:                        $_SESSION['errors'][$error->getHash()] = $error;
./phpmyadmin/libraries/Error_Handler.class.php:    protected function getErrors()
./phpmyadmin/libraries/Error_Handler.class.php:        $this->_errors[$error->getHash()] = $error;
./phpmyadmin/libraries/Error_Handler.class.php:        switch ($error->getNumber()) {
./phpmyadmin/libraries/Error_Handler.class.php:        return error_log($error->getMessage());
./phpmyadmin/libraries/Error_Handler.class.php:        foreach ($this->getErrors() as $error) {
./phpmyadmin/libraries/Error_Handler.class.php:            echo $error->getTitle();
./phpmyadmin/libraries/Error_Handler.class.php:        foreach ($this->getErrors() as $error) {
./phpmyadmin/libraries/Error_Handler.class.php:            foreach ($this->getErrors() as $error) {
./phpmyadmin/libraries/Error_Handler.class.php:        return count($this->getErrors());
./phpmyadmin/libraries/Error_Handler.class.php:            foreach ($this->getErrors() as $error) {
./phpmyadmin/libraries/header_meta_style.inc.php:    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>phpmyadmin.css.php<?php echo PMA_generate_common_url(array('server' => $GLOBALS['server'])); ?>&amp;js_frame=<?php echo isset($print_view) ? 'print' : 'right'; ?>&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />
./phpmyadmin/libraries/sqlvalidator.class.php:        var $target_dbms;
./phpmyadmin/libraries/sqlvalidator.class.php:        var $target_dbms_version;
./phpmyadmin/libraries/sqlvalidator.class.php:         * @param string   Target DBMS
./phpmyadmin/libraries/sqlvalidator.class.php:         * @param string   Version of target DBMS
./phpmyadmin/libraries/sqlvalidator.class.php:                                      $target_dbms, $target_dbms_version,
./phpmyadmin/libraries/sqlvalidator.class.php:                "a_targetDbms" => $target_dbms,
./phpmyadmin/libraries/sqlvalidator.class.php:                "a_targetDbmsVersion" => $target_dbms_version,
./phpmyadmin/libraries/sqlvalidator.class.php:            $this->target_dbms                   = 'N/A';
./phpmyadmin/libraries/sqlvalidator.class.php:            $this->target_dbms_version           = 'N/A';
./phpmyadmin/libraries/sqlvalidator.class.php:         * Sets the target DBMS
./phpmyadmin/libraries/sqlvalidator.class.php:         * @param string  the target DBMS name
./phpmyadmin/libraries/sqlvalidator.class.php:         * @param string  the target DBMS revision
./phpmyadmin/libraries/sqlvalidator.class.php:        function setTargetDbms($target_dbms, $target_dbms_version)
./phpmyadmin/libraries/sqlvalidator.class.php:            $this->target_dbms         = $target_dbms;
./phpmyadmin/libraries/sqlvalidator.class.php:            $this->target_dbms_version = $target_dbms_version;
./phpmyadmin/libraries/sqlvalidator.class.php:        } // end of the "setTargetDbms()" function
./phpmyadmin/libraries/sqlvalidator.class.php:         * Appends the target DBMS
./phpmyadmin/libraries/sqlvalidator.class.php:         * @param string  the target DBMS name
./phpmyadmin/libraries/sqlvalidator.class.php:         * @param string  the target DBMS revision
./phpmyadmin/libraries/sqlvalidator.class.php:        function appendTargetDbms($target_dbms, $target_dbms_version)
./phpmyadmin/libraries/sqlvalidator.class.php:            $this->target_dbms         .= ' - ' . $target_dbms;
./phpmyadmin/libraries/sqlvalidator.class.php:            $this->target_dbms_version .= ' - ' . $target_dbms_version;
./phpmyadmin/libraries/sqlvalidator.class.php:        } // end of the "appendTargetDbms()" function
./phpmyadmin/libraries/sqlvalidator.class.php:                                                              $this->target_dbms, $this->target_dbms_version,
./phpmyadmin/libraries/sqlvalidator.class.php:                && ($this->session_data->target != $this->url)) {
./phpmyadmin/libraries/sqlvalidator.class.php:                $url = $this->session_data->target;
./phpmyadmin/libraries/Error.class.php:    public function getHash()
./phpmyadmin/libraries/Error.class.php:            $backtrace = serialize($this->getBacktrace());
./phpmyadmin/libraries/Error.class.php:                $this->getNumber() .
./phpmyadmin/libraries/Error.class.php:                $this->getMessage() .
./phpmyadmin/libraries/Error.class.php:                $this->getFile() .
./phpmyadmin/libraries/Error.class.php:                $this->getLine() .
./phpmyadmin/libraries/Error.class.php:    public function getBacktrace()
./phpmyadmin/libraries/Error.class.php:    public function getFile()
./phpmyadmin/libraries/Error.class.php:    public function getLine()
./phpmyadmin/libraries/Error.class.php:    public function getType()
./phpmyadmin/libraries/Error.class.php:        return PMA_Error::$errortype[$this->getNumber()];
./phpmyadmin/libraries/Error.class.php:    public function getLevel()
./phpmyadmin/libraries/Error.class.php:        return PMA_Error::$errorlevel[$this->getNumber()];
./phpmyadmin/libraries/Error.class.php:    public function getHtmlTitle()
./phpmyadmin/libraries/Error.class.php:        return htmlspecialchars(substr($this->getTitle(), 0, 100));
./phpmyadmin/libraries/Error.class.php:    public function getTitle()
./phpmyadmin/libraries/Error.class.php:        return $this->getType() . ': ' . $this->getMessage();
./phpmyadmin/libraries/Error.class.php:        foreach ($this->getBacktrace() as $step) {
./phpmyadmin/libraries/Error.class.php:            echo gettype($arg) . ' ' . htmlspecialchars($arg);
./phpmyadmin/libraries/Error.class.php:            echo gettype($arg);
./phpmyadmin/libraries/Error.class.php:        echo '<div class="' . $this->getLevel() . '">';
./phpmyadmin/libraries/Error.class.php:            echo '<strong>' . $this->getType() . '</strong>';
./phpmyadmin/libraries/Error.class.php:            echo ' in ' . $this->getFile() . '#' . $this->getLine();
./phpmyadmin/libraries/Error.class.php:        echo $this->getMessage();
./phpmyadmin/libraries/Error.class.php:        return $this->getNumber() & (E_USER_WARNING | E_USER_ERROR | E_USER_NOTICE);
./phpmyadmin/libraries/transformations/text_plain__imagelink.inc.php:    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" target="_blank"><img src="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" border="0" width="' . (isset($options[1]) ? $options[1] : 100) . '" height="' . (isset($options[2]) ? $options[2] : 50) . '" />' . $buffer . '</a>');
./phpmyadmin/libraries/transformations/text_plain__external.inc.php:            $newstring .= fgets($pipes[1], 1024);
./phpmyadmin/libraries/transformations/image_png__inline.inc.php:        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=png&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');
./phpmyadmin/libraries/transformations/image_jpeg__inline.inc.php:        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');
./phpmyadmin/libraries/server_common.inc.php: * Note: this can be called also from the db panel to get the privileges of
./phpmyadmin/libraries/mysql_charsets.lib.php:                    . '" title="' . PMA_getCollationDescr($current_collation) . '"'
./phpmyadmin/libraries/mysql_charsets.lib.php:function PMA_getDbCollation($db)
./phpmyadmin/libraries/mysql_charsets.lib.php:function PMA_getServerCollation()
./phpmyadmin/libraries/mysql_charsets.lib.php:function PMA_getCollationDescr($collation)
./phpmyadmin/libraries/Theme_Manager.class.php:    function getThemesPath()
./phpmyadmin/libraries/Theme_Manager.class.php:        if (! $this->getThemeCookie()
./phpmyadmin/libraries/Theme_Manager.class.php:         || ! $this->setActiveTheme($this->getThemeCookie())) {
./phpmyadmin/libraries/Theme_Manager.class.php:    function getThemeCookieName()
./phpmyadmin/libraries/Theme_Manager.class.php:    function getThemeCookie()
./phpmyadmin/libraries/Theme_Manager.class.php:        if (isset($_COOKIE[$this->getThemeCookieName()])) {
./phpmyadmin/libraries/Theme_Manager.class.php:            return $_COOKIE[$this->getThemeCookieName()];
./phpmyadmin/libraries/Theme_Manager.class.php:        $GLOBALS['PMA_Config']->setCookie($this->getThemeCookieName(), $this->theme->id,
./phpmyadmin/libraries/Theme_Manager.class.php:        if ($handleThemes = opendir($this->getThemesPath())) {
./phpmyadmin/libraries/Theme_Manager.class.php:                if ($PMA_Theme == '.' || $PMA_Theme == '..' || ! is_dir($this->getThemesPath() . '/' . $PMA_Theme)) {
./phpmyadmin/libraries/Theme_Manager.class.php:                $new_theme = PMA_Theme::load($this->getThemesPath() . '/' . $PMA_Theme);
./phpmyadmin/libraries/Theme_Manager.class.php:            } // end get themes
./phpmyadmin/libraries/Theme_Manager.class.php:                'phpMyAdmin-ERROR: cannot open themes folder: ' . $this->getThemesPath(),
./phpmyadmin/libraries/Theme_Manager.class.php:    function getHtmlSelectBox($form = true)
./phpmyadmin/libraries/Theme_Manager.class.php:                .' target="_parent">';
./phpmyadmin/libraries/Theme_Manager.class.php:        $theme_preview_href = '<a href="' . $theme_preview_path . '" target="themes" class="themeselect">';
./phpmyadmin/libraries/Theme_Manager.class.php:            $select_box .=  '>' . htmlspecialchars($each_theme->getName()) . '</option>';
./phpmyadmin/libraries/Theme_Manager.class.php:        $GLOBALS['theme']           = $this->theme->getId();
./phpmyadmin/libraries/Theme_Manager.class.php:        $GLOBALS['pmaThemePath']    = $this->theme->getPath();
./phpmyadmin/libraries/Theme_Manager.class.php:        $GLOBALS['pmaThemeImage']   = $this->theme->getImgPath();
./phpmyadmin/libraries/Theme_Manager.class.php:        if (file_exists($this->theme->getLayoutFile())) {
./phpmyadmin/libraries/Theme_Manager.class.php:            include $this->theme->getLayoutFile();
./phpmyadmin/libraries/Theme_Manager.class.php:    function getFallBackTheme()
./phpmyadmin/libraries/Theme_Manager.class.php:        $fallback_theme = $this->getFallBackTheme();
./phpmyadmin/libraries/engines/pbxt.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/pbxt.lib.php:    function getInfoPages()
./phpmyadmin/libraries/engines/pbxt.lib.php:    function getPage($id)
./phpmyadmin/libraries/engines/pbxt.lib.php:        if (! array_key_exists($id, $this->getInfoPages())) {
./phpmyadmin/libraries/engines/pbxt.lib.php:        $id = 'getPage' . $id;
./phpmyadmin/libraries/engines/pbxt.lib.php:    function getPageDocumentation()
./phpmyadmin/libraries/engines/pbxt.lib.php:        . sprintf(__('Documentation and further information about PBXT can be found on the %sPrimeBase XT Home Page%s.'), '<a href="' . PMA_linkURL('http://www.primebase.com/xt/') . '" target="_blank">', '</a>')
./phpmyadmin/libraries/engines/pbxt.lib.php:        . '<li><a href="' . PMA_linkURL('http://pbxt.blogspot.com/') . '" target="_blank">' . __('The PrimeBase XT Blog by Paul McCullagh') . '</a></li>' . "\n"
./phpmyadmin/libraries/engines/pbxt.lib.php:        . '<li><a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">' . __('The PrimeBase Media Streaming (PBMS) home page') . '</a></li>' . "\n"
./phpmyadmin/libraries/engines/myisam.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/mrg_myisam.lib.php:    function getMysqlHelpPage()
./phpmyadmin/libraries/engines/bdb.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/bdb.lib.php:    function getVariablesLikePattern()
./phpmyadmin/libraries/engines/bdb.lib.php:    function getMysqlHelpPage()
./phpmyadmin/libraries/engines/binlog.lib.php:    function getMysqlHelpPage()
./phpmyadmin/libraries/engines/memory.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/ndbcluster.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/ndbcluster.lib.php:    function getVariablesLikePattern()
./phpmyadmin/libraries/engines/ndbcluster.lib.php:    function getMysqlHelpPage()
./phpmyadmin/libraries/engines/pbms.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/pbms.lib.php:    function getInfoPages()
./phpmyadmin/libraries/engines/pbms.lib.php:    function getPage($id)
./phpmyadmin/libraries/engines/pbms.lib.php:        if (! array_key_exists($id, $this->getInfoPages())) {
./phpmyadmin/libraries/engines/pbms.lib.php:        $id = 'getPage' . $id;
./phpmyadmin/libraries/engines/pbms.lib.php:    function getPageConfigure()
./phpmyadmin/libraries/engines/pbms.lib.php:    function getPageDocumentation()
./phpmyadmin/libraries/engines/pbms.lib.php:        . sprintf(__('Documentation and further information about PBMS can be found on %sThe PrimeBase Media Streaming home page%s.'), '<a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">', '</a>')
./phpmyadmin/libraries/engines/pbms.lib.php:        . '<li><a href="' . PMA_linkURL('http://bpbdev.blogspot.com/') . '" target="_blank">' . __('The PrimeBase Media Streaming Blog by Barry Leslie') . '</a></li>' . "\n"
./phpmyadmin/libraries/engines/pbms.lib.php:        . '<li><a href="' . PMA_linkURL('http://www.primebase.com/xt') . '" target="_blank">' . __('PrimeBase XT Home Page') . '</a></li>' . "\n"
./phpmyadmin/libraries/engines/innodb.lib.php:    function getVariables()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getVariablesLikePattern()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getInfoPages()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getPageBufferpool()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getPageStatus()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getPage($id)
./phpmyadmin/libraries/engines/innodb.lib.php:        if (! array_key_exists($id, $this->getInfoPages())) {
./phpmyadmin/libraries/engines/innodb.lib.php:        $id = 'getPage' . $id;
./phpmyadmin/libraries/engines/innodb.lib.php:    function getMysqlHelpPage()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getInnodbPluginVersion()
./phpmyadmin/libraries/engines/innodb.lib.php:    function getInnodbFileFormat()
./phpmyadmin/libraries/Config.class.php:        if (@ini_get('zlib.output_compression')) {
./phpmyadmin/libraries/Config.class.php:        if (strtolower($this->get('OBGzip')) == 'auto') {
./phpmyadmin/libraries/Config.class.php:            if ($this->get('PMA_USR_BROWSER_AGENT') == 'IE'
./phpmyadmin/libraries/Config.class.php:                && $this->get('PMA_USR_BROWSER_VER') >= 6
./phpmyadmin/libraries/Config.class.php:                && $this->get('PMA_USR_BROWSER_VER') < 7
./phpmyadmin/libraries/Config.class.php:        if (PMA_getenv('HTTP_USER_AGENT')) {
./phpmyadmin/libraries/Config.class.php:            $HTTP_USER_AGENT = PMA_getenv('HTTP_USER_AGENT');
./phpmyadmin/libraries/Config.class.php:        if ($this->get('GD2Available') == 'yes') {
./phpmyadmin/libraries/Config.class.php:        } elseif ($this->get('GD2Available') == 'no') {
./phpmyadmin/libraries/Config.class.php:                    $a = strip_tags(ob_get_contents());
./phpmyadmin/libraries/Config.class.php:        if (PMA_getenv('SERVER_SOFTWARE')
./phpmyadmin/libraries/Config.class.php:            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'Microsoft')
./phpmyadmin/libraries/Config.class.php:            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'IIS')
./phpmyadmin/libraries/Config.class.php:        $eval_result = eval('?' . '>' . trim(file_get_contents($this->getSource())));
./phpmyadmin/libraries/Config.class.php:            $this->source_mtime = filemtime($this->getSource());
./phpmyadmin/libraries/Config.class.php:                $this->get('DefaultConnectionCollation')
./phpmyadmin/libraries/Config.class.php:        if ($tmanager->getThemeCookie() || isset($_REQUEST['set_theme'])) {
./phpmyadmin/libraries/Config.class.php:                && $tmanager->theme->getId() != 'original')
./phpmyadmin/libraries/Config.class.php:                && $config_data['ThemeDefault'] != $tmanager->theme->getId()
./phpmyadmin/libraries/Config.class.php:                    $tmanager->theme->getId(),
./phpmyadmin/libraries/Config.class.php:            if ($this->settings['ThemeDefault'] != $tmanager->theme->getId()
./phpmyadmin/libraries/Config.class.php:        $prefs_type = $this->get('user_preferences');
./phpmyadmin/libraries/Config.class.php:    function getUserValue($cookie_name, $cfg_value)
./phpmyadmin/libraries/Config.class.php:        $prefs_type = $this->get('user_preferences');
./phpmyadmin/libraries/Config.class.php:        if (! $this->getSource()) {
./phpmyadmin/libraries/Config.class.php:        if (! file_exists($this->getSource())) {
./phpmyadmin/libraries/Config.class.php:        if (! is_readable($this->getSource())) {
./phpmyadmin/libraries/Config.class.php:                    $this->getSource()
./phpmyadmin/libraries/Config.class.php:        if ($this->get('CheckConfigurationPermissions')) {
./phpmyadmin/libraries/Config.class.php:            $perms = @fileperms($this->getSource());
./phpmyadmin/libraries/Config.class.php:                if ($this->get('PMA_IS_WINDOWS') == 0) {
./phpmyadmin/libraries/Config.class.php:    function get($setting)
./phpmyadmin/libraries/Config.class.php:    function getSource()
./phpmyadmin/libraries/Config.class.php:    function getThemeUniqueValue()
./phpmyadmin/libraries/Config.class.php:        if (null !== $this->get('fontsize')) {
./phpmyadmin/libraries/Config.class.php:            $fontsize = intval($this->get('fontsize'));
./phpmyadmin/libraries/Config.class.php:            $this->get('user_preferences_mtime') +
./phpmyadmin/libraries/Config.class.php:        // they'll get an error if the autodetect code doesn't work
./phpmyadmin/libraries/Config.class.php:        $pma_absolute_uri = $this->get('PmaAbsoluteUri');
./phpmyadmin/libraries/Config.class.php:                if (PMA_getenv('HTTP_HOST')) {
./phpmyadmin/libraries/Config.class.php:                        $url['scheme'] . '://' . PMA_getenv('HTTP_HOST')
./phpmyadmin/libraries/Config.class.php:                        $url['host'] = PMA_getenv('HTTP_HOST');
./phpmyadmin/libraries/Config.class.php:                } elseif (PMA_getenv('SERVER_NAME')) {
./phpmyadmin/libraries/Config.class.php:                    $url['host'] = PMA_getenv('SERVER_NAME');
./phpmyadmin/libraries/Config.class.php:                if (empty($url['port']) && PMA_getenv('SERVER_PORT')) {
./phpmyadmin/libraries/Config.class.php:                    $url['port'] = PMA_getenv('SERVER_PORT');
./phpmyadmin/libraries/Config.class.php:            if ($this->get('PMA_IS_WINDOWS') == 1) {
./phpmyadmin/libraries/Config.class.php:                if ($this->get('PMA_IS_WINDOWS') == 1) {
./phpmyadmin/libraries/Config.class.php:        } elseif (! $this->get('fontsize')) {
./phpmyadmin/libraries/Config.class.php:        $this->setCookie('pma_fontsize', $this->get('fontsize'), '82%');
./phpmyadmin/libraries/Config.class.php:        if (ini_get('file_uploads')) {
./phpmyadmin/libraries/Config.class.php:            // ini_get() also returns the string "Off" in this case:
./phpmyadmin/libraries/Config.class.php:            if ('off' == strtolower(ini_get('file_uploads'))) {
./phpmyadmin/libraries/Config.class.php:        if (! $filesize = ini_get('upload_max_filesize')) {
./phpmyadmin/libraries/Config.class.php:        if ($postsize = ini_get('post_max_size')) {
./phpmyadmin/libraries/Config.class.php:                min(PMA_get_real_size($filesize), PMA_get_real_size($postsize))
./phpmyadmin/libraries/Config.class.php:            $this->set('max_upload_size', PMA_get_real_size($filesize));
./phpmyadmin/libraries/Config.class.php:        $url = parse_url($this->get('PmaAbsoluteUri'));
./phpmyadmin/libraries/Config.class.php:        if (PMA_getenv('REQUEST_URI')) {
./phpmyadmin/libraries/Config.class.php:            // produces E_WARNING if it cannot get parsed, e.g. '/foobar:/'
./phpmyadmin/libraries/Config.class.php:            $url = @parse_url(PMA_getenv('REQUEST_URI'));
./phpmyadmin/libraries/Config.class.php:            if (PMA_getenv('HTTP_SCHEME')) {
./phpmyadmin/libraries/Config.class.php:                $url['scheme'] = PMA_getenv('HTTP_SCHEME');
./phpmyadmin/libraries/Config.class.php:            } elseif (PMA_getenv('HTTPS') && strtolower(PMA_getenv('HTTPS')) == 'on') {
./phpmyadmin/libraries/Config.class.php:            } elseif (PMA_getenv('HTTP_X_FORWARDED_PROTO')) {
./phpmyadmin/libraries/Config.class.php:                $url['scheme'] = strtolower(PMA_getenv('HTTP_X_FORWARDED_PROTO'));
./phpmyadmin/libraries/Config.class.php:            } elseif (PMA_getenv('HTTP_FRONT_END_HTTPS') && strtolower(PMA_getenv('HTTP_FRONT_END_HTTPS')) == 'on') {
./phpmyadmin/libraries/Config.class.php:        $this->set('cookie_path', $this->getCookiePath());
./phpmyadmin/libraries/Config.class.php:    public function getCookiePath()
./phpmyadmin/libraries/Config.class.php:        $parsed_url = parse_url($this->get('PmaAbsoluteUri'));
./phpmyadmin/libraries/Config.class.php:        $GLOBALS['collation_connection'] = $this->get('collation_connection');
./phpmyadmin/libraries/Config.class.php:        $GLOBALS['is_upload']       = $this->get('enable_upload');
./phpmyadmin/libraries/Config.class.php:        $GLOBALS['max_upload_size'] = $this->get('max_upload_size');
./phpmyadmin/libraries/Config.class.php:        $GLOBALS['cookie_path']     = $this->get('cookie_path');
./phpmyadmin/libraries/Config.class.php:        $GLOBALS['is_https']        = $this->get('is_https');
./phpmyadmin/libraries/Config.class.php:                define($define, $this->get($define));
./phpmyadmin/libraries/Config.class.php:    static protected function _getFontsizeOptions($current_size = '82%')
./phpmyadmin/libraries/Config.class.php:    static protected function _getFontsizeSelection()
./phpmyadmin/libraries/Config.class.php:        $current_size = $GLOBALS['PMA_Config']->get('fontsize');
./phpmyadmin/libraries/Config.class.php:        $options = PMA_Config::_getFontsizeOptions($current_size);
./phpmyadmin/libraries/Config.class.php:    static public function getFontsizeForm()
./phpmyadmin/libraries/Config.class.php:            . ' method="post" action="index.php" target="_parent">' . "\n"
./phpmyadmin/libraries/Config.class.php:            . PMA_Config::_getFontsizeSelection() . "\n"
./phpmyadmin/libraries/Config.class.php:            $this->getCookiePath(),
./phpmyadmin/libraries/Config.class.php:                $this->getCookiePath(),
./phpmyadmin/libraries/grab_globals.lib.php: * @param array   &$target    values to
./phpmyadmin/libraries/grab_globals.lib.php:function PMA_recursive_extract($array, &$target, $sanitize = true)
./phpmyadmin/libraries/grab_globals.lib.php:            unset($target[$key]);
./phpmyadmin/libraries/grab_globals.lib.php:            PMA_recursive_extract($array[$key], $target[$key], false);
./phpmyadmin/libraries/grab_globals.lib.php:            $target[$key] = $array[$key];
./phpmyadmin/libraries/grab_globals.lib.php:    if (PMA_getenv($current) && false === strpos(PMA_getenv($current), '<')) {
./phpmyadmin/libraries/grab_globals.lib.php:        $$current = PMA_getenv($current);
./phpmyadmin/libraries/core.lib.php: * NOTE: call-by-reference is used to not get NOTICE on undefined vars,
./phpmyadmin/libraries/core.lib.php: * @see     http://php.net/gettype
./phpmyadmin/libraries/core.lib.php:        switch (gettype($compare)) {
./phpmyadmin/libraries/core.lib.php:                $type = gettype($compare);
./phpmyadmin/libraries/core.lib.php:        $type = gettype($compare);
./phpmyadmin/libraries/core.lib.php:    if (gettype($var) === $type) {
./phpmyadmin/libraries/core.lib.php:function PMA_getPHPDocLink($target)
./phpmyadmin/libraries/core.lib.php:    if (function_exists('_pgettext')) {
./phpmyadmin/libraries/core.lib.php:        $lang = _pgettext('PHP documentation language', 'en');
./phpmyadmin/libraries/core.lib.php:    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);
./phpmyadmin/libraries/core.lib.php:        '[a@' . PMA_getPHPDocLink('book.' . $extension . '.php') . '@Documentation][em]' . $extension . '[/em][/a]');
./phpmyadmin/libraries/core.lib.php:function PMA_getTableCount($db)
./phpmyadmin/libraries/core.lib.php:function PMA_get_real_size($size = 0)
./phpmyadmin/libraries/core.lib.php:} // end function PMA_get_real_size()
./phpmyadmin/libraries/core.lib.php:            return func_get_arg(0);
./phpmyadmin/libraries/core.lib.php:            $args = func_get_args();
./phpmyadmin/libraries/core.lib.php:            $args = func_get_args();
./phpmyadmin/libraries/core.lib.php: * searchs in $_SERVER, $_ENV than trys getenv() and apache_getenv()
./phpmyadmin/libraries/core.lib.php:function PMA_getenv($var_name)
./phpmyadmin/libraries/core.lib.php:    } elseif (getenv($var_name)) {
./phpmyadmin/libraries/core.lib.php:        return getenv($var_name);
./phpmyadmin/libraries/core.lib.php:    } elseif (function_exists('apache_getenv')
./phpmyadmin/libraries/core.lib.php:     && apache_getenv($var_name, true)) {
./phpmyadmin/libraries/core.lib.php:        return apache_getenv($var_name, true);
./phpmyadmin/libraries/core.lib.php:                $separator = PMA_get_arg_separator();
./phpmyadmin/libraries/core.lib.php:    PMA_AddJsCode(PMA_getJsValue($key, $value, $escape));
./phpmyadmin/libraries/db_common.inc.php:        if (PMA_DBI_getError() && $GLOBALS['errno'] == 2014) {
./phpmyadmin/libraries/user_preferences.inc.php:$arr = ConfigFile::getInstance()->getConfigArray();
./phpmyadmin/libraries/user_preferences.inc.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/StorageEngine.class.php:    static public function getStorageEngines()
./phpmyadmin/libraries/StorageEngine.class.php:    static public function getHtmlSelect($name = 'engine', $id = null,
./phpmyadmin/libraries/StorageEngine.class.php:        foreach (PMA_StorageEngine::getStorageEngines() as $key => $details) {
./phpmyadmin/libraries/StorageEngine.class.php:     * public static final PMA_StorageEngine getEngine()
./phpmyadmin/libraries/StorageEngine.class.php:    static public function getEngine($engine)
./phpmyadmin/libraries/StorageEngine.class.php:        $storage_engines = PMA_StorageEngine::getStorageEngines();
./phpmyadmin/libraries/StorageEngine.class.php:    function getHtmlVariables()
./phpmyadmin/libraries/StorageEngine.class.php:        foreach ($this->getVariablesStatus() as $details) {
./phpmyadmin/libraries/StorageEngine.class.php:    function getVariablesStatus()
./phpmyadmin/libraries/StorageEngine.class.php:        $variables = $this->getVariables();
./phpmyadmin/libraries/StorageEngine.class.php:        $like = $this->getVariablesLikePattern();
./phpmyadmin/libraries/StorageEngine.class.php:        $storage_engines = PMA_StorageEngine::getStorageEngines();
./phpmyadmin/libraries/StorageEngine.class.php:     * public String getTitle()
./phpmyadmin/libraries/StorageEngine.class.php:    function getTitle()
./phpmyadmin/libraries/StorageEngine.class.php:     * public String getComment()
./phpmyadmin/libraries/StorageEngine.class.php:    function getComment()
./phpmyadmin/libraries/StorageEngine.class.php:     * public String getSupportInformationMessage()
./phpmyadmin/libraries/StorageEngine.class.php:    function getSupportInformationMessage()
./phpmyadmin/libraries/StorageEngine.class.php:     * public string[][] getVariables()
./phpmyadmin/libraries/StorageEngine.class.php:    function getVariables()
./phpmyadmin/libraries/StorageEngine.class.php:    function getMysqlHelpPage()
./phpmyadmin/libraries/StorageEngine.class.php:     * public string getVariablesLikePattern()
./phpmyadmin/libraries/StorageEngine.class.php:    function getVariablesLikePattern()
./phpmyadmin/libraries/StorageEngine.class.php:     * public String[] getInfoPages()
./phpmyadmin/libraries/StorageEngine.class.php:    function getInfoPages()
./phpmyadmin/libraries/StorageEngine.class.php:     * public String getPage()
./phpmyadmin/libraries/StorageEngine.class.php:    function getPage($id)
./phpmyadmin/libraries/sqlvalidator.lib.php:            $str = sprintf(__('The SQL validator could not be initialized. Please check if you have installed the necessary PHP extensions as described in the %sdocumentation%s.'), '<a href="./Documentation.html#faqsqlvalidator" target="documentation">', '</a>');
./phpmyadmin/libraries/sqlvalidator.lib.php:            $srv->setTargetDbms('MySQL', PMA_MYSQL_STR_VERSION);
./phpmyadmin/libraries/kanji-encoding.lib.php:        $line = fgets($fps, 4096);
./phpmyadmin/libraries/kanji-encoding.lib.php:           . $spaces . '<input type="radio" name="knjenc" value="" checked="checked" id="kj-none" /><label for="kj-none">' . _pgettext('None encoding conversion', 'None') . "</label>\n"
./phpmyadmin/libraries/config.default.php: * target of the navigation panel quick access icon
./phpmyadmin/libraries/config.default.php: * When approximate count < this, PMA will get exact count for table rows.
./phpmyadmin/libraries/sanitizing.lib.php: * Callback function for replacing [a@link@target] links in bb code.
./phpmyadmin/libraries/sanitizing.lib.php:    /* a-z and _ allowed in target */
./phpmyadmin/libraries/sanitizing.lib.php:    /* Construct target */
./phpmyadmin/libraries/sanitizing.lib.php:    $target = '';
./phpmyadmin/libraries/sanitizing.lib.php:        $target = ' target="' . $found[3] . '"';
./phpmyadmin/libraries/sanitizing.lib.php:    return '<a href="' . $url . '"' . $target . '>';
./phpmyadmin/libraries/sanitizing.lib.php:    /* Match links in bb code ([a@url@target], where @target is options) */
./phpmyadmin/libraries/vendor_config.php: * Path to gettext.inc file. Useful when you want php-gettext somewhere else,
./phpmyadmin/libraries/vendor_config.php: * eg. /usr/share/php/gettext/gettext.inc.
./phpmyadmin/libraries/vendor_config.php:define('GETTEXT_INC', './libraries/php-gettext/gettext.inc');
./phpmyadmin/libraries/transformations.lib.php: * PMA_transformation_getOptions("'option ,, quoted',abd,'2,3',");
./phpmyadmin/libraries/transformations.lib.php:function PMA_transformation_getOptions($option_string)
./phpmyadmin/libraries/transformations.lib.php:function PMA_getAvailableMIMEtypes()
./phpmyadmin/libraries/transformations.lib.php:function PMA_getTransformationDescription($file, $html_formatted = true)
./phpmyadmin/libraries/transformations.lib.php:function PMA_getMIME($db, $table, $strict = false)
./phpmyadmin/libraries/transformations.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/transformations.lib.php:} // end of the 'PMA_getMIME()' function
./phpmyadmin/libraries/transformations.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/tbl_info.inc.php:// need this test because when we are creating a table, we get 0 rows
./phpmyadmin/libraries/PDF.class.php:            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');
./phpmyadmin/libraries/PDF.class.php:        $pdfData = $this->getPDFData();
./phpmyadmin/libraries/Message.class.php: * // get simple success message 'Success'
./phpmyadmin/libraries/Message.class.php: * // get special notice 'Some locale notice'
./phpmyadmin/libraries/Message.class.php:        return $this->getMessage();
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message of type success
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a simple success message
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message of type error
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a simple error message
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message of type notice
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a simple notice message
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message with customized content
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized message
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message for number of affected rows
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized message
./phpmyadmin/libraries/Message.class.php:        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message for number of deleted rows
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized message
./phpmyadmin/libraries/Message.class.php:        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message for number of inserted rows
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized message
./phpmyadmin/libraries/Message.class.php:        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message of type error with custom content
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized error message
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message of type notice with custom content
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized notice message
./phpmyadmin/libraries/Message.class.php:     * get PMA_Message of type success with custom content
./phpmyadmin/libraries/Message.class.php:     * shorthand for getting a customized success message
./phpmyadmin/libraries/Message.class.php:        return $this->getNumber() === PMA_Message::SUCCESS;
./phpmyadmin/libraries/Message.class.php:        return $this->getNumber() === PMA_Message::NOTICE;
./phpmyadmin/libraries/Message.class.php:        return $this->getNumber() === PMA_Message::ERROR;
./phpmyadmin/libraries/Message.class.php:    public function getParams()
./phpmyadmin/libraries/Message.class.php:    public function getAddedMessages()
./phpmyadmin/libraries/Message.class.php:        $params = func_get_args();
./phpmyadmin/libraries/Message.class.php:    public function getHash()
./phpmyadmin/libraries/Message.class.php:                $this->getNumber() .
./phpmyadmin/libraries/Message.class.php:    public function getMessage()
./phpmyadmin/libraries/Message.class.php:            $string = $this->getString();
./phpmyadmin/libraries/Message.class.php:        if (count($this->getParams()) > 0) {
./phpmyadmin/libraries/Message.class.php:            $message = PMA_Message::format($message, $this->getParams());
./phpmyadmin/libraries/Message.class.php:        foreach ($this->getAddedMessages() as $add_message) {
./phpmyadmin/libraries/Message.class.php:    public function getString()
./phpmyadmin/libraries/Message.class.php:    public function getNumber()
./phpmyadmin/libraries/Message.class.php:    public function getLevel()
./phpmyadmin/libraries/Message.class.php:        return PMA_Message::$level[$this->getNumber()];
./phpmyadmin/libraries/Message.class.php:        echo $this->getDisplay();
./phpmyadmin/libraries/Message.class.php:    public function getDisplay()
./phpmyadmin/libraries/Message.class.php:        return '<div class="' . $this->getLevel() . '">'
./phpmyadmin/libraries/Message.class.php:            . $this->getMessage() . '</div>';
./phpmyadmin/libraries/List_Database.class.php:        foreach ($this->getArrayCopy() as $key => $db) {
./phpmyadmin/libraries/List_Database.class.php:        PMA_DBI_getError();
./phpmyadmin/libraries/List_Database.class.php:            // failed to get database list, try the control user
./phpmyadmin/libraries/List_Database.class.php:            PMA_DBI_getError();
./phpmyadmin/libraries/List_Database.class.php:    public function getDefault()
./phpmyadmin/libraries/List_Database.class.php:        return $this->getEmpty();
./phpmyadmin/libraries/List_Database.class.php:    public function getGroupedDetails($offset, $count)
./phpmyadmin/libraries/List_Database.class.php:            $db_tooltips = PMA_getDbComments();
./phpmyadmin/libraries/List_Database.class.php:        foreach ($this->getLimitedItems($offset, $count) as $db) {
./phpmyadmin/libraries/List_Database.class.php:                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);
./phpmyadmin/libraries/List_Database.class.php:    public function getLimitedItems($offset, $count)
./phpmyadmin/libraries/List_Database.class.php:        return array_slice($this->getArrayCopy(), $offset, $count);
./phpmyadmin/libraries/List_Database.class.php:    public function getHtmlListGrouped($selected = '', $offset, $count)
./phpmyadmin/libraries/List_Database.class.php:            $selected = $this->getDefault();
./phpmyadmin/libraries/List_Database.class.php:        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {
./phpmyadmin/libraries/List_Database.class.php:                    . '" target="_parent">';
./phpmyadmin/libraries/List_Database.class.php:    public function getHtmlSelectGrouped($selected = '', $offset, $count)
./phpmyadmin/libraries/List_Database.class.php:            $selected = $this->getDefault();
./phpmyadmin/libraries/List_Database.class.php:        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {
./phpmyadmin/libraries/List_Database.class.php:        // 1. get allowed dbs from the "mysql.db" table
./phpmyadmin/libraries/List_Database.class.php:        // 2. get allowed dbs from the "mysql.tables_priv" table
./phpmyadmin/libraries/select_lang.lib.php:    if (PMA_getenv('HTTP_ACCEPT_LANGUAGE')) {
./phpmyadmin/libraries/select_lang.lib.php:        foreach (explode(',', PMA_getenv('HTTP_ACCEPT_LANGUAGE')) as $lang) {
./phpmyadmin/libraries/select_lang.lib.php:    if (PMA_langDetect(PMA_getenv('HTTP_USER_AGENT'), 2)) {
./phpmyadmin/libraries/select_lang.lib.php: * Load gettext functions.
./phpmyadmin/libraries/select_lang.lib.php: * You should not add any messages here, use instead gettext directly
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:    $client_api = explode('.', mysqli_get_client_info());
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:function PMA_DBI_get_host_info($link = null)
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:    return mysqli_get_host_info($link);
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:function PMA_DBI_get_proto_info($link = null)
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:    return mysqli_get_proto_info($link);
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:function PMA_DBI_get_client_info()
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:    return mysqli_get_client_info();
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:function PMA_DBI_getError($link = null)
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:        // Do not stop now. We still can get the error code
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:    // keep the error number for further check after the call to PMA_DBI_getError()
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php: * @param   boolean  $get_from_cache
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:function PMA_DBI_affected_rows($link = null, $get_from_cache = true)
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:    if ($get_from_cache) {
./phpmyadmin/libraries/dbi/mysqli.dbi.lib.php:function PMA_DBI_get_fields_meta($result)
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:function PMA_DBI_get_host_info($link = null)
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:function PMA_DBI_get_proto_info($link = null)
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:function PMA_DBI_get_client_info()
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:function PMA_DBI_getError($link = null)
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:        // Do not stop now. We still can get the error code
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:        $error_number = drizzle_con_errno($link->getConnectionObject());
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:        $error_message = drizzle_con_error($link->getConnectionObject());
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:    // keep the error number for further check after the call to PMA_DBI_getError()
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php: * @param   bool               $get_from_cache
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:function PMA_DBI_affected_rows($link = null, $get_from_cache = true)
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:    if ($get_from_cache) {
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:function PMA_DBI_get_fields_meta($result)
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:    $columns = $result->getColumns();
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:    $colums = $result->getColumns();
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:    $colums = $result->getColumns();
./phpmyadmin/libraries/dbi/drizzle.dbi.lib.php:    $columns = $result->getColumns();
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    $client_api = explode('.', mysql_get_client_info());
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    if (is_resource($result) && get_resource_type($result) === 'mysql result') {
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:function PMA_DBI_get_host_info($link = null)
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    return mysql_get_host_info($link);
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:function PMA_DBI_get_proto_info($link = null)
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    return mysql_get_proto_info($link);
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:function PMA_DBI_get_client_info()
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    return mysql_get_client_info();
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:function PMA_DBI_getError($link = null)
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    // keep the error number for further check after the call to PMA_DBI_getError()
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    // If the primary key is BIGINT we get an incorrect result
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php: * @param   bool      $get_from_cache
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:function PMA_DBI_affected_rows($link = null, $get_from_cache = true)
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:    if ($get_from_cache) {
./phpmyadmin/libraries/dbi/mysql.dbi.lib.php:function PMA_DBI_get_fields_meta($result)
./phpmyadmin/libraries/dbi/drizzle-wrappers.lib.php:            $r[] = get_class($arg);
./phpmyadmin/libraries/dbi/drizzle-wrappers.lib.php:    public function getConnectionObject()
./phpmyadmin/libraries/dbi/drizzle-wrappers.lib.php:    public function getColumns()
./phpmyadmin/libraries/header_scripts.inc.php:$GLOBALS['js_include'][] = 'get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId());
./phpmyadmin/libraries/display_import_ajax.lib.php:    if (! extension_loaded('apc') || ! function_exists('apc_fetch') || ! function_exists('getallheaders')) {
./phpmyadmin/libraries/display_import_ajax.lib.php:    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));
./phpmyadmin/libraries/display_import_ajax.lib.php:    if (! function_exists("uploadprogress_get_info") || ! function_exists('getallheaders')) {
./phpmyadmin/libraries/display_import_ajax.lib.php:  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin's file.
./phpmyadmin/libraries/display_import_ajax.lib.php:    echo json_encode(PMA_getUploadStatus($id));
./phpmyadmin/libraries/display_change_password.lib.php:                <input type="radio" name="nopass" value="0" id="nopass_0" onclick="document.getElementById('text_pma_pw').focus();" checked="checked " />
./phpmyadmin/libraries/config/FormDisplay.class.php:        PMA_config_get_validators();
./phpmyadmin/libraries/config/FormDisplay.class.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/FormDisplay.class.php:                $values[$path] = $cf->getValue($work_path);
./phpmyadmin/libraries/config/FormDisplay.class.php:        $validators = PMA_config_get_validators();
./phpmyadmin/libraries/config/FormDisplay.class.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/FormDisplay.class.php:        $value = $cf->get($work_path);
./phpmyadmin/libraries/config/FormDisplay.class.php:        $value_default = $cf->getDefault($system_path);
./phpmyadmin/libraries/config/FormDisplay.class.php:            'doc' => $this->getDocLink($system_path),
./phpmyadmin/libraries/config/FormDisplay.class.php:            'wiki' =>  $this->getWikiLink($system_path),
./phpmyadmin/libraries/config/FormDisplay.class.php:        switch ($form->getOptionType($field)) {
./phpmyadmin/libraries/config/FormDisplay.class.php:                $opts['values'] = $form->getOptionValueList($form->fields[$field]);
./phpmyadmin/libraries/config/FormDisplay.class.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/FormDisplay.class.php:            $cf->set($work_path, $cf->getDefault($canonical_path));
./phpmyadmin/libraries/config/FormDisplay.class.php:                    settype($value, gettype($vk));
./phpmyadmin/libraries/config/FormDisplay.class.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/FormDisplay.class.php:            // get current server id
./phpmyadmin/libraries/config/FormDisplay.class.php:                ? $cf->getServerCount() + 1
./phpmyadmin/libraries/config/FormDisplay.class.php:                $type = $form->getOptionType($field);
./phpmyadmin/libraries/config/FormDisplay.class.php:                        if (!$this->_validateSelect($_POST[$key], $form->getOptionValueList($system_path))) {
./phpmyadmin/libraries/config/FormDisplay.class.php:    public function getDocLink($path)
./phpmyadmin/libraries/config/FormDisplay.class.php:        return 'Documentation.html#cfg_' . $this->_getOptName($path);
./phpmyadmin/libraries/config/FormDisplay.class.php:    public function getWikiLink($path)
./phpmyadmin/libraries/config/FormDisplay.class.php:        $opt_name = $this->_getOptName($path);
./phpmyadmin/libraries/config/FormDisplay.class.php:    private function _getOptName($path)
./phpmyadmin/libraries/config/FormDisplay.class.php:                ? ConfigFile::getInstance()->get('UserprefsDisallow', array())
./phpmyadmin/libraries/config/validate.lib.php:function PMA_config_get_validators()
./phpmyadmin/libraries/config/validate.lib.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/validate.lib.php:        $validators = $cf->getDbEntry('_validators', array());
./phpmyadmin/libraries/config/validate.lib.php:            $org_cfg = $cf->getOrgConfigObj();
./phpmyadmin/libraries/config/validate.lib.php:            $uvs = $cf->getDbEntry('_userValidators', array());
./phpmyadmin/libraries/config/validate.lib.php:    $validators = PMA_config_get_validators();
./phpmyadmin/libraries/config/validate.lib.php:    $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/validate.lib.php:        $vid = $cf->getCanonicalPath($vid);
./phpmyadmin/libraries/config/validate.lib.php:        $k2 = strpos($k2, '/') ? $cf->getCanonicalPath($k2) : $k2;
./phpmyadmin/libraries/config/validate.lib.php:        $old_html_errors = ini_get('html_errors');
./phpmyadmin/libraries/config/validate.lib.php:        $old_track_errors = ini_get('track_errors');
./phpmyadmin/libraries/config/validate.lib.php:        $old_display_errors = ini_get('display_errors');
./phpmyadmin/libraries/config/FormDisplay.tpl.php: * @param string $method         'post' or 'get'
./phpmyadmin/libraries/config/FormDisplay.tpl.php:        $method = 'get';
./phpmyadmin/libraries/config/FormDisplay.tpl.php:    echo PMA_getHiddenFields((array)$hidden_fields);
./phpmyadmin/libraries/config/FormDisplay.tpl.php:            // sprite-aware PMA_getImage() function because the PMA_theme class
./phpmyadmin/libraries/config/FormDisplay.tpl.php:            // In this case we just use PMA_getImage() because it's available
./phpmyadmin/libraries/config/FormDisplay.tpl.php:                $icons[$k] = PMA_getImage($v[0], $v[1]);
./phpmyadmin/libraries/config/FormDisplay.tpl.php:            <?php if (!empty($opts['doc'])) { ?><a href="<?php echo $base_dir . $opts['doc']  ?>" target="documentation"><?php echo $icons['help']; ?></a><?php } ?>
./phpmyadmin/libraries/config/FormDisplay.tpl.php:            <?php if (!empty($opts['wiki'])){ ?><a href="<?php echo $opts['wiki'] ?>" target="wiki"><?php echo $icons['info']; ?></a><?php } ?>
./phpmyadmin/libraries/config/messages.inc.php:$strConfigForm_Page_titles_desc = __('Specify browser\'s title bar text. Refer to [a@Documentation.html#cfg_TitleTable]documentation[/a] for magic strings that can be used to get special values.');
./phpmyadmin/libraries/config/messages.inc.php:$strConfigLeftDefaultTabTable_name = __('Target for quick access icon');
./phpmyadmin/libraries/config/messages.inc.php:$strConfigLeftLogoLinkWindow_name = __('Logo link target');
./phpmyadmin/libraries/config/messages.inc.php:$strConfigLoginCookieDeleteAll_desc = __('If TRUE, logout deletes cookies for all servers; when set to FALSE, logout only occurs for the current server. Setting this to FALSE makes it easy to forget to log out from other servers when connected to multiple servers.');
./phpmyadmin/libraries/config/ConfigFile.class.php:     * by {@link getConfig()} or {@link getConfigArray()}
./phpmyadmin/libraries/config/ConfigFile.class.php:     * Private constructor, use {@link getInstance()}
./phpmyadmin/libraries/config/ConfigFile.class.php:    public static function getInstance()
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getOrgConfigObj()
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getPersistKeysMap()
./phpmyadmin/libraries/config/ConfigFile.class.php:     * by {@link getConfig()} or {@link getConfigArray()}
./phpmyadmin/libraries/config/ConfigFile.class.php:            $canonical_path = $this->getCanonicalPath($path);
./phpmyadmin/libraries/config/ConfigFile.class.php:            $default_value = $this->getDefault($canonical_path);
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getFlatDefaultConfig()
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function get($path, $default = null)
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getDefault($canonical_path, $default = null)
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getValue($path, $default = null)
./phpmyadmin/libraries/config/ConfigFile.class.php:        $path = $this->getCanonicalPath($path);
./phpmyadmin/libraries/config/ConfigFile.class.php:        return $this->getDefault($path, $default);
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getCanonicalPath($path) {
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getDbEntry($path, $default = null)
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getServerCount()
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getServers()
./phpmyadmin/libraries/config/ConfigFile.class.php:    function getServerDSN($server)
./phpmyadmin/libraries/config/ConfigFile.class.php:        $dsn = $this->getValue("$path/extension") . '://';
./phpmyadmin/libraries/config/ConfigFile.class.php:        if ($this->getValue("$path/auth_type") == 'config') {
./phpmyadmin/libraries/config/ConfigFile.class.php:            $dsn .= $this->getValue("$path/user");
./phpmyadmin/libraries/config/ConfigFile.class.php:            if (!$this->getValue("$path/nopassword")) {
./phpmyadmin/libraries/config/ConfigFile.class.php:        if ($this->getValue("$path/connect_type") == 'tcp') {
./phpmyadmin/libraries/config/ConfigFile.class.php:            $dsn .= $this->getValue("$path/host");
./phpmyadmin/libraries/config/ConfigFile.class.php:            $port = $this->getValue("$path/port");
./phpmyadmin/libraries/config/ConfigFile.class.php:            $dsn .= $this->getValue("$path/socket");
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getServerName($id)
./phpmyadmin/libraries/config/ConfigFile.class.php:        $verbose = $this->get("Servers/$id/verbose");
./phpmyadmin/libraries/config/ConfigFile.class.php:        $host = $this->get("Servers/$id/host");
./phpmyadmin/libraries/config/ConfigFile.class.php:        $last_server = $this->getServerCount();
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getFilePath()
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getConfig()
./phpmyadmin/libraries/config/ConfigFile.class.php:    public function getConfigArray()
./phpmyadmin/libraries/config/ConfigFile.class.php:            $c[$k] = $this->getDefault($k);
./phpmyadmin/libraries/config/config_functions.lib.php:        $args = func_get_args();
./phpmyadmin/libraries/config/Form.class.php:    public function getOptionType($option_name)
./phpmyadmin/libraries/config/Form.class.php:    public function getOptionValueList($option_path)
./phpmyadmin/libraries/config/Form.class.php:        $value = ConfigFile::getInstance()->getDbEntry($option_path);
./phpmyadmin/libraries/config/Form.class.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/config/Form.class.php:            $v = $cf->getDbEntry($path);
./phpmyadmin/libraries/config/Form.class.php:                $type = gettype($cf->getDefault($path));
./phpmyadmin/libraries/tbl_select.lib.php:function PMA_tbl_getFields($db, $table)
./phpmyadmin/libraries/tbl_select.lib.php:    $fields = PMA_DBI_get_columns($db, $table, null, true);
./phpmyadmin/libraries/tbl_select.lib.php:    $geom_types = PMA_getGISDatatypes();
./phpmyadmin/libraries/tbl_select.lib.php:function PMA_tbl_getSubTabs()
./phpmyadmin/libraries/tbl_select.lib.php:function PMA_getForeignFields_Values($foreigners, $foreignData, $field, $tbl_fields_type, $i, $db, $table, $titles, $foreignMaxLimit, $fields, $in_fbs = false, $in_zoom_search_edit = false)
./phpmyadmin/libraries/tbl_select.lib.php:<a target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes'); return false" href="browse_foreigners.php?
./phpmyadmin/libraries/tbl_select.lib.php:    } elseif (in_array($tbl_fields_type[$i], PMA_getGISDatatypes())) {
./phpmyadmin/libraries/tbl_select.lib.php:            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));
./phpmyadmin/libraries/tbl_select.lib.php:function PMA_tbl_search_getWhereClause($fields, $names, $types, $collations, $func_type, $unaryFlag, $geom_func = null)
./phpmyadmin/libraries/tbl_select.lib.php:        $geom_funcs = PMA_getGISFunctions($types, true, false);
./phpmyadmin/libraries/tbl_select.lib.php:    } elseif (in_array($types, PMA_getGISDatatypes()) && ! empty($fields)) {
./phpmyadmin/libraries/php-gettext/streams.php:   This file is part of PHP-gettext.
./phpmyadmin/libraries/php-gettext/streams.php:   PHP-gettext is free software; you can redistribute it and/or modify
./phpmyadmin/libraries/php-gettext/streams.php:   PHP-gettext is distributed in the hope that it will be useful,
./phpmyadmin/libraries/php-gettext/streams.php:   along with PHP-gettext; if not, write to the Free Software
./phpmyadmin/libraries/php-gettext/gettext.php:   This file is part of PHP-gettext.
./phpmyadmin/libraries/php-gettext/gettext.php:   PHP-gettext is free software; you can redistribute it and/or modify
./phpmyadmin/libraries/php-gettext/gettext.php:   PHP-gettext is distributed in the hope that it will be useful,
./phpmyadmin/libraries/php-gettext/gettext.php:   along with PHP-gettext; if not, write to the Free Software
./phpmyadmin/libraries/php-gettext/gettext.php: * Provides a simple gettext replacement that works independently from
./phpmyadmin/libraries/php-gettext/gettext.php: * the system's gettext abilities.
./phpmyadmin/libraries/php-gettext/gettext.php: * The files are passed to gettext_reader as a Stream (see streams.php)
./phpmyadmin/libraries/php-gettext/gettext.php:class gettext_reader {
./phpmyadmin/libraries/php-gettext/gettext.php:  function gettext_reader($Reader, $enable_cache = true) {
./phpmyadmin/libraries/php-gettext/gettext.php:    /* get original and translations tables */
./phpmyadmin/libraries/php-gettext/gettext.php:  function get_original_string($num) {
./phpmyadmin/libraries/php-gettext/gettext.php:  function get_translation_string($num) {
./phpmyadmin/libraries/php-gettext/gettext.php:      $txt = $this->get_original_string($start);
./phpmyadmin/libraries/php-gettext/gettext.php:      $cmp = strcmp($string, $this->get_original_string($half));
./phpmyadmin/libraries/php-gettext/gettext.php:      // Caching enabled, get translated string from cache
./phpmyadmin/libraries/php-gettext/gettext.php:        return $this->get_translation_string($num);
./phpmyadmin/libraries/php-gettext/gettext.php:  function get_plural_forms() {
./phpmyadmin/libraries/php-gettext/gettext.php:        $header = $this->get_translation_string(0);
./phpmyadmin/libraries/php-gettext/gettext.php:    $string = $this->get_plural_forms();
./phpmyadmin/libraries/php-gettext/gettext.php:   * Plural version of gettext
./phpmyadmin/libraries/php-gettext/gettext.php:  function ngettext($single, $plural, $number) {
./phpmyadmin/libraries/php-gettext/gettext.php:        $result = $this->get_translation_string($num);
./phpmyadmin/libraries/php-gettext/gettext.php:  function pgettext($context, $msgid) {
./phpmyadmin/libraries/php-gettext/gettext.php:  function npgettext($context, $singular, $plural, $number) {
./phpmyadmin/libraries/php-gettext/gettext.php:    $ret = $this->ngettext($key, $plural, $number);
./phpmyadmin/libraries/user_preferences.lib.php:    $cf = ConfigFile::getInstance();
./phpmyadmin/libraries/user_preferences.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/user_preferences.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/user_preferences.lib.php:        $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));
./phpmyadmin/libraries/user_preferences.lib.php:        $new_settings = ConfigFile::getInstance()->getConfigArray();
./phpmyadmin/libraries/mult_submits.inc.php:            $message = PMA_Message::error(PMA_DBI_getError());
./phpmyadmin/libraries/database_interface.lib.php:        or PMA_mysqlDie(PMA_DBI_getError($link), $query);
./phpmyadmin/libraries/database_interface.lib.php:        $GLOBALS['cached_affected_rows'] = PMA_DBI_affected_rows($link, $get_from_cache = false);
./phpmyadmin/libraries/database_interface.lib.php:                //. (isset($trace_step['object']) ? get_class($trace_step['object']) : '')
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_tables($database, $link = null)
./phpmyadmin/libraries/database_interface.lib.php: * PMA_DBI_get_tables_full('my_database');
./phpmyadmin/libraries/database_interface.lib.php: * PMA_DBI_get_tables_full('my_database', 'my_table'));
./phpmyadmin/libraries/database_interface.lib.php: * PMA_DBI_get_tables_full('my_database', 'my_tables_', true));
./phpmyadmin/libraries/database_interface.lib.php: * PMA_DBI_get_tables_full('my_database', 'my_tables_', 'comment'));
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_tables_full($database, $table = false, $tbl_is_group = false, $link = null,
./phpmyadmin/libraries/database_interface.lib.php:        // get table information from information_schema
./phpmyadmin/libraries/database_interface.lib.php:    } // end (get information from table schema)
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_databases_full($database = null, $force_stats = false,
./phpmyadmin/libraries/database_interface.lib.php:        // get table information from information_schema
./phpmyadmin/libraries/database_interface.lib.php:        $mysql_error = PMA_DBI_getError($link);
./phpmyadmin/libraries/database_interface.lib.php:                    = PMA_getDbCollation($database_name);
./phpmyadmin/libraries/database_interface.lib.php:                // get additional info about tables
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_columns_full($database = null, $table = null,
./phpmyadmin/libraries/database_interface.lib.php:        // get columns information from information_schema
./phpmyadmin/libraries/database_interface.lib.php:                $columns[$database] = PMA_DBI_get_columns_full(
./phpmyadmin/libraries/database_interface.lib.php:            $tables = PMA_DBI_get_tables($database);
./phpmyadmin/libraries/database_interface.lib.php:                $columns[$table] = PMA_DBI_get_columns_full(
./phpmyadmin/libraries/database_interface.lib.php: * The 'Key' column is not calculated properly, use PMA_DBI_get_columns() to get
./phpmyadmin/libraries/database_interface.lib.php: * @see PMA_DBI_get_columns()
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_columns_sql($database, $table, $column = null, $full = false)
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_columns($database, $table, $column = null, $full = false, $link = null)
./phpmyadmin/libraries/database_interface.lib.php:    $sql = PMA_DBI_get_columns_sql($database, $table, $column, $full);
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_table_indexes_sql($database, $table, $where = null)
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_table_indexes($database, $table, $link = null)
./phpmyadmin/libraries/database_interface.lib.php:    $sql = PMA_DBI_get_table_indexes_sql($database, $table);
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_variable($var, $type = PMA_DBI_GETVAR_SESSION, $link = null)
./phpmyadmin/libraries/database_interface.lib.php:    // get requested row
./phpmyadmin/libraries/database_interface.lib.php:                $result_target =& $resultrows;
./phpmyadmin/libraries/database_interface.lib.php:                        $result_target =& $result_target[];
./phpmyadmin/libraries/database_interface.lib.php:                    if (! isset($result_target[$row[$key_index]])) {
./phpmyadmin/libraries/database_interface.lib.php:                        $result_target[$row[$key_index]] = array();
./phpmyadmin/libraries/database_interface.lib.php:                    $result_target =& $result_target[$row[$key_index]];
./phpmyadmin/libraries/database_interface.lib.php:                $result_target = $row;
./phpmyadmin/libraries/database_interface.lib.php:                $result_target =& $resultrows;
./phpmyadmin/libraries/database_interface.lib.php:                        $result_target =& $result_target[];
./phpmyadmin/libraries/database_interface.lib.php:                    if (! isset($result_target[$row[$key_index]])) {
./phpmyadmin/libraries/database_interface.lib.php:                        $result_target[$row[$key_index]] = array();
./phpmyadmin/libraries/database_interface.lib.php:                    $result_target =& $result_target[$row[$key_index]];
./phpmyadmin/libraries/database_interface.lib.php:                $result_target = $row[$value];
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_getCompatibilities()
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_warnings($link = null)
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_procedures_or_functions($db, $which, $link = null)
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_definition($db, $which, $name, $link = null)
./phpmyadmin/libraries/database_interface.lib.php:function PMA_DBI_get_triggers($db, $table = '', $delimiter = '//')
./phpmyadmin/libraries/replication.inc.php: * get master replication from server
./phpmyadmin/libraries/replication.inc.php: * get slave replication from server
./phpmyadmin/libraries/replication.inc.php: * @param mixed  $trg_link link of target server, note: if the server is current PMA server, use null
./phpmyadmin/libraries/replication.inc.php:    $src_tables = PMA_DBI_get_tables($src_db, $src_link);
./phpmyadmin/libraries/replication.inc.php:    $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);
./phpmyadmin/libraries/replication.inc.php:    $target_tables_uncommon = array();
./phpmyadmin/libraries/replication.inc.php:    PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);
./phpmyadmin/libraries/replication.inc.php:     * Finding the uncommon tables for the target database
./phpmyadmin/libraries/replication.inc.php:     * BY comparing the matching tables with all the tables in the target database
./phpmyadmin/libraries/replication.inc.php:    PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);
./phpmyadmin/libraries/replication.inc.php:    $target_columns = array();
./phpmyadmin/libraries/replication.inc.php:    $target_tables_keys = array();
./phpmyadmin/libraries/replication.inc.php:    $target_indexes = array();
./phpmyadmin/libraries/replication.inc.php:            $target_columns, $alter_str_array, $add_column_array, $uncommon_columns, $criteria, $target_tables_keys, $counter);
./phpmyadmin/libraries/replication.inc.php:        PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_indexes, $target_indexes,
./phpmyadmin/libraries/replication.inc.php:     * Generating Create Table query for all the non-matching tables present in Source but not in Target and populating tables.
./phpmyadmin/libraries/replication.inc.php:            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, $source_tables_uncommon, $q, $uncommon_tables_fields, false);
./phpmyadmin/libraries/replication.inc.php:            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $source_tables_uncommon, $q, $uncommon_tables_fields, false);
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:      $this->fileLength += ($record->getContentLength() + 4);
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:    function getDBFHeader() {
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:    function getIndexFromDBFData($field, $value) {
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:          fwrite($this->SHXFile, pack("N", $record->getContentLength()));
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:          $offset += (4 + $record->getContentLength());
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:      fwrite($this->SHPFile, pack("N", $this->getContentLength()));
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:    function getContentLength() {
./phpmyadmin/libraries/bfShapeFiles/ShapeFile.lib.php:      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);
./phpmyadmin/libraries/Tracker.class.php:        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */
./phpmyadmin/libraries/Tracker.class.php:        $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/Tracker.class.php:    static protected function getTableName($string)
./phpmyadmin/libraries/Tracker.class.php:        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */
./phpmyadmin/libraries/Tracker.class.php:        $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/Tracker.class.php:    static public function getLogComment()
./phpmyadmin/libraries/Tracker.class.php:        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);
./phpmyadmin/libraries/Tracker.class.php:        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);
./phpmyadmin/libraries/Tracker.class.php:            $create_sql .= self::getLogComment() .
./phpmyadmin/libraries/Tracker.class.php:            $create_sql .= self::getLogComment() .
./phpmyadmin/libraries/Tracker.class.php:        $create_sql .= self::getLogComment() .
./phpmyadmin/libraries/Tracker.class.php:                       PMA_getTableDef($dbname, $tablename, "\n", "");
./phpmyadmin/libraries/Tracker.class.php:            $create_sql .= self::getLogComment() .
./phpmyadmin/libraries/Tracker.class.php:        $create_sql .= self::getLogComment() . $query;
./phpmyadmin/libraries/Tracker.class.php:     * (in other words: gets the HEAD version).
./phpmyadmin/libraries/Tracker.class.php:    static public function getVersion($dbname, $tablename, $statement = null)
./phpmyadmin/libraries/Tracker.class.php:    static public function getTrackedData($dbname, $tablename, $version)
./phpmyadmin/libraries/Tracker.class.php:        // For each log entry we want to get date, username and statement
./phpmyadmin/libraries/Tracker.class.php:        // For each log entry we want to get date, username and statement
./phpmyadmin/libraries/Tracker.class.php:            $GLOBALS['db'] = self::getTableName($prefix[1]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($str);
./phpmyadmin/libraries/Tracker.class.php:            $GLOBALS['db'] = self::getTableName($prefix[0]);
./phpmyadmin/libraries/Tracker.class.php:            $GLOBALS['db'] = self::getTableName($str);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($suffix[0]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename']  = self::getTableName($suffix[0]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($str);
./phpmyadmin/libraries/Tracker.class.php:             $result['tablename'] = self::getTableName($suffix[0]);
./phpmyadmin/libraries/Tracker.class.php:             $result['tablename'] = self::getTableName($prefix[1]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename']      = self::getTableName($names[0]);
./phpmyadmin/libraries/Tracker.class.php:            $result["tablename_after_rename"]  = self::getTableName($names[1]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($suffix[0]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($suffix[0]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($suffix[0]);
./phpmyadmin/libraries/Tracker.class.php:            $result['tablename'] = self::getTableName($prefix[1]);
./phpmyadmin/libraries/Tracker.class.php:            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);
./phpmyadmin/libraries/Tracker.class.php:                $query = self::getLogComment() . $query ;
./phpmyadmin/libraries/display_select_lang.lib.php:<form method="post" action="index.php" target="_parent">
./phpmyadmin/libraries/tbl_replace_fields.inc.php: * specified, the binary data gets deleter. Maybe a nice new text-variable is
./phpmyadmin/libraries/tbl_replace_fields.inc.php:$possibly_uploaded_val = $file_to_insert->getContent();
./phpmyadmin/libraries/tbl_replace_fields.inc.php:    $message .= $file_to_insert->getError();
./phpmyadmin/libraries/display_tbl.lib.php:        PMA_displayTableNavigationOneButton('&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query);
./phpmyadmin/libraries/display_tbl.lib.php:        PMA_displayTableNavigationOneButton('&lt;', _pgettext('Previous page', 'Previous'), $pos_prev, $html_sql_query);
./phpmyadmin/libraries/display_tbl.lib.php:            _pgettext('Next page', 'Next'),
./phpmyadmin/libraries/display_tbl.lib.php:            _pgettext('Last page', 'End'),
./phpmyadmin/libraries/display_tbl.lib.php:            $indexes = PMA_Index::getFromTable($table, $db);
./phpmyadmin/libraries/display_tbl.lib.php:                    $asc_sort = '`' . implode('` ASC, `', array_keys($index->getColumns())) . '` ASC';
./phpmyadmin/libraries/display_tbl.lib.php:                    $desc_sort = '`' . implode('` DESC, `', array_keys($index->getColumns())) . '` DESC';
./phpmyadmin/libraries/display_tbl.lib.php:                        . '>' . htmlspecialchars($index->getName()) . ' ('
./phpmyadmin/libraries/display_tbl.lib.php:                        . '>' . htmlspecialchars($index->getName()) . ' ('
./phpmyadmin/libraries/display_tbl.lib.php:        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);
./phpmyadmin/libraries/display_tbl.lib.php:        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);
./phpmyadmin/libraries/display_tbl.lib.php:                $comments_map[$tb] = PMA_getComments($db, $tb);
./phpmyadmin/libraries/display_tbl.lib.php:        $GLOBALS['mime_map'] = PMA_getMIME($db, $table);
./phpmyadmin/libraries/display_tbl.lib.php:        // prepare to get the column order, if available
./phpmyadmin/libraries/display_tbl.lib.php:        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);
./phpmyadmin/libraries/display_tbl.lib.php:        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);
./phpmyadmin/libraries/display_tbl.lib.php:        //  See if this column should get highlight because it's used in the
./phpmyadmin/libraries/display_tbl.lib.php:                $order_img   = ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i", 'title' => ''));
./phpmyadmin/libraries/display_tbl.lib.php:                $order_img  .= ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i hide", 'title' => ''));
./phpmyadmin/libraries/display_tbl.lib.php:                $order_img   = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i", 'title' => ''));
./phpmyadmin/libraries/display_tbl.lib.php:                $order_img  .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i hide", 'title' => ''));
./phpmyadmin/libraries/display_tbl.lib.php:    // prepare to get the column order, if available
./phpmyadmin/libraries/display_tbl.lib.php:        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);
./phpmyadmin/libraries/display_tbl.lib.php:        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);
./phpmyadmin/libraries/display_tbl.lib.php:        list($where_clause, $clause_is_unique, $condition_array) = PMA_getUniqueCondition($dt_result, $fields_cnt, $fields_meta, $row);
./phpmyadmin/libraries/display_tbl.lib.php:                $edit_str = PMA_getIcon('b_edit.png', __('Edit'));
./phpmyadmin/libraries/display_tbl.lib.php:                $copy_str = PMA_getIcon('b_insrow.png', __('Copy'));
./phpmyadmin/libraries/display_tbl.lib.php:                $del_str = PMA_getIcon('b_drop.png', __('Delete'));
./phpmyadmin/libraries/display_tbl.lib.php:                $del_str = PMA_getIcon('b_drop.png', __('Kill'));
./phpmyadmin/libraries/display_tbl.lib.php:            //  See if this column should get highlight because it's used in the
./phpmyadmin/libraries/display_tbl.lib.php:                            $transform_options  = PMA_transformation_getOptions((isset($GLOBALS['mime_map'][$meta->name]['transformation_options']) ? $GLOBALS['mime_map'][$meta->name]['transformation_options'] : ''));
./phpmyadmin/libraries/display_tbl.lib.php:        // prepare to get the column order, if available
./phpmyadmin/libraries/display_tbl.lib.php:        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);
./phpmyadmin/libraries/display_tbl.lib.php:        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);
./phpmyadmin/libraries/display_tbl.lib.php:    $target=array();
./phpmyadmin/libraries/display_tbl.lib.php:            $target[] = $analyzed_sql[0]['table_ref'][$table_ref_position]['table_true_name'];
./phpmyadmin/libraries/display_tbl.lib.php:    $tabs    = '(\'' . join('\',\'', $target) . '\')';
./phpmyadmin/libraries/display_tbl.lib.php:        $exist_rel = PMA_getForeigners($db, $table, '', 'both');
./phpmyadmin/libraries/display_tbl.lib.php:                $display_field = PMA_getDisplayField($rel['foreign_db'], $rel['foreign_table']);
./phpmyadmin/libraries/display_tbl.lib.php:                PMA_getIcon('b_print.png', __('Print view'), true),
./phpmyadmin/libraries/display_tbl.lib.php:                    PMA_getIcon('b_print.png', __('Print view (with full texts)'), true),
./phpmyadmin/libraries/display_tbl.lib.php:            PMA_getIcon('b_tblexport.png', __('Export'), true),
./phpmyadmin/libraries/display_tbl.lib.php:            PMA_getIcon('b_chart.png', __('Display chart'), true),
./phpmyadmin/libraries/display_tbl.lib.php:                PMA_getIcon('b_globe.gif', __('Visualize GIS data'), true),
./phpmyadmin/libraries/display_tbl.lib.php:            PMA_getIcon('b_views.png', __('Create view'), true),
./phpmyadmin/libraries/display_tbl.lib.php:                $result = '<a href="tbl_get_field.php' . PMA_generate_common_url($url_params) . '">' . $result . '</a>';
./phpmyadmin/libraries/relation.lib.php:function PMA_getRelationsParam($verbose = false)
./phpmyadmin/libraries/relation.lib.php:        $_SESSION['relation'][$GLOBALS['server']] = PMA__getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:                   . '</strong></font> [ <a href="Documentation.html#%s" target="documentation">'
./phpmyadmin/libraries/relation.lib.php:function PMA__getRelationsParam()
./phpmyadmin/libraries/relation.lib.php:            $mime_query  = PMA_DBI_get_columns_sql($cfgRelation['db'], $cfgRelation['column_info']);
./phpmyadmin/libraries/relation.lib.php:} // end of the 'PMA_getRelationsParam()' function
./phpmyadmin/libraries/relation.lib.php:function PMA_getForeigners($db, $table, $column = '', $source = 'both')
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:                    // and as a native foreign key, we won't get it twice
./phpmyadmin/libraries/relation.lib.php:} // end of the 'PMA_getForeigners()' function
./phpmyadmin/libraries/relation.lib.php:function PMA_getDisplayField($db, $table)
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:} // end of the 'PMA_getDisplayField()' function
./phpmyadmin/libraries/relation.lib.php:function PMA_getComments($db, $table = '')
./phpmyadmin/libraries/relation.lib.php:        $fields = PMA_DBI_get_columns($db, $table, null, true);
./phpmyadmin/libraries/relation.lib.php:        $comments[] = PMA_getDbComment($db);
./phpmyadmin/libraries/relation.lib.php:} // end of the 'PMA_getComments()' function
./phpmyadmin/libraries/relation.lib.php:function PMA_getDbComment($db)
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:} // end of the 'PMA_getDbComment()' function
./phpmyadmin/libraries/relation.lib.php:function PMA_getDbComments()
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:} // end of the 'PMA_getDbComments()' function
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:function PMA_getHistory($username)
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:} // end of 'PMA_getHistory()' function
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/relation.lib.php:function PMA_getForeignData($foreigners, $field, $override_total, $foreign_filter, $foreign_limit)
./phpmyadmin/libraries/relation.lib.php:            $foreign_display = PMA_getDisplayField($foreign_db, $foreign_table);
./phpmyadmin/libraries/relation.lib.php:} // end of 'PMA_getForeignData()' function
./phpmyadmin/libraries/relation.lib.php:function PMA_getRelatives($from)
./phpmyadmin/libraries/relation.lib.php:} // end of the "PMA_getRelatives()" function
./phpmyadmin/libraries/relation.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/check_user_privileges.lib.php: * @todo fix to get really all privileges, not only explicitly defined for this user
./phpmyadmin/libraries/check_user_privileges.lib.php:                  && substr(PMA_DBI_getError(), 1, 4) != 1044)
./phpmyadmin/libraries/build_html_for_db.lib.php:function PMA_getColumnOrder()
./phpmyadmin/libraries/build_html_for_db.lib.php:            'description_function' => 'PMA_getCollationDescr',
./phpmyadmin/libraries/build_html_for_db.lib.php:            'footer'    => PMA_getServerCollation(),
./phpmyadmin/libraries/build_html_for_db.lib.php:           . '" target="_parent">'
./phpmyadmin/libraries/build_html_for_db.lib.php:                $out .= PMA_getIcon('s_cancel.png',  __('Not replicated'));
./phpmyadmin/libraries/build_html_for_db.lib.php:                    $out .= PMA_getIcon('s_success.png', __('Replicated'));
./phpmyadmin/libraries/build_html_for_db.lib.php:               . PMA_getIcon('s_rights.png', __('Check Privileges'))
./phpmyadmin/libraries/import/xml.php:$namespaces = $xml->getNameSpaces(true);
./phpmyadmin/libraries/import/xml.php:     * get the database name from the data section
./phpmyadmin/libraries/import/shp.php:    if ((int) ini_get('memory_limit') < 512) {
./phpmyadmin/libraries/import/shp.php:    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');
./phpmyadmin/libraries/import/shp.php:    // get the correct content to the buffer from .shp file.
./phpmyadmin/libraries/import/shp.php:    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {
./phpmyadmin/libraries/import/shp.php:        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');
./phpmyadmin/libraries/import/shp.php:                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";
./phpmyadmin/libraries/import/csv.php:    PMA_mysqlDie($message->getMessage(), '', '', $err_url);
./phpmyadmin/libraries/import/csv.php:    $tmp_fields = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/import/docsql.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/import/upload/uploadprogress.php:function PMA_getUploadStatus($id)
./phpmyadmin/libraries/import/upload/uploadprogress.php:    $status = uploadprogress_get_info($id);
./phpmyadmin/libraries/import/upload/apc.php:function PMA_getUploadStatus($id)
./phpmyadmin/libraries/import/upload/noplugin.php:function PMA_getUploadStatus($id)
./phpmyadmin/libraries/import/sql.php:    $compats = PMA_DBI_getCompatibilities();
./phpmyadmin/libraries/import/sql.php:                // Any chance we will get a complete query?
./phpmyadmin/libraries/import/ods.php:        $type = $row->getName();
./phpmyadmin/libraries/import/ods.php:                                    $col_names[] = PMA_getColumnAlphaName($col_count + 1);
./phpmyadmin/libraries/import/ods.php:                                $col_names[] = PMA_getColumnAlphaName($col_count + 1);
./phpmyadmin/libraries/import/ods.php:        $col_names[] = PMA_getColumnAlphaName($i + 1);
./phpmyadmin/libraries/blobstreaming.lib.php:        $target = "";
./phpmyadmin/libraries/blobstreaming.lib.php:            if ($target == "") {
./phpmyadmin/libraries/blobstreaming.lib.php:                    $target = $current_db;
./phpmyadmin/libraries/blobstreaming.lib.php:        if ($target != "") {
./phpmyadmin/libraries/blobstreaming.lib.php:            $query = "select * from $target.pbms_metadata_header";
./phpmyadmin/libraries/blobstreaming.lib.php:     *  at this point, $PMA_Config->get('Servers') contains the server parameters
./phpmyadmin/libraries/blobstreaming.lib.php:            || function_exists("pbms_get_info") == false
./phpmyadmin/libraries/blobstreaming.lib.php:            || function_exists("pbms_get_metadata_value") == false
./phpmyadmin/libraries/blobstreaming.lib.php:         // get BS server port
./phpmyadmin/libraries/blobstreaming.lib.php:    $pbms_host = $PMA_Config->get('BLOBSTREAMING_HOST');
./phpmyadmin/libraries/blobstreaming.lib.php:    $pbms_port = $PMA_Config->get('BLOBSTREAMING_PORT');
./phpmyadmin/libraries/blobstreaming.lib.php:    if ($PMA_Config->get('PBMS_PCONNECT_EXISTS')) {
./phpmyadmin/libraries/blobstreaming.lib.php:    if (pbms_get_info(trim($bs_reference)) == false) {
./phpmyadmin/libraries/blobstreaming.lib.php:            __('PBMS get BLOB info failed:')
./phpmyadmin/libraries/blobstreaming.lib.php:            . " pbms_get_info($bs_reference)"
./phpmyadmin/libraries/blobstreaming.lib.php:    $content_type = pbms_get_metadata_value("Content-Type");
./phpmyadmin/libraries/blobstreaming.lib.php:            . __('PBMS get BLOB Content-Type failed')
./phpmyadmin/libraries/blobstreaming.lib.php:    $bs_url = PMA_BS_getURL($bs_reference);
./phpmyadmin/libraries/blobstreaming.lib.php:        $output .= ' (<a href="' . $bs_url . '" target="new">'
./phpmyadmin/libraries/blobstreaming.lib.php:        $output .= ' (<a href="' . $bs_url . '" target="new">'
./phpmyadmin/libraries/blobstreaming.lib.php:    if (! $PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {
./phpmyadmin/libraries/blobstreaming.lib.php:function PMA_BS_getURL($reference)
./phpmyadmin/libraries/blobstreaming.lib.php:    $bs_server = $PMA_Config->get('BLOBSTREAMING_SERVER');
./phpmyadmin/libraries/List.class.php:    public function getSingleItem()
./phpmyadmin/libraries/List.class.php:        return $this->getEmpty();
./phpmyadmin/libraries/List.class.php:    public function getEmpty()
./phpmyadmin/libraries/List.class.php:        $this_elements = $this->getArrayCopy();
./phpmyadmin/libraries/List.class.php:        foreach (func_get_args() as $result) {
./phpmyadmin/libraries/List.class.php:    public function getHtmlOptions($selected = '', $include_information_schema = true)
./phpmyadmin/libraries/List.class.php:            $selected = $this->getDefault();
./phpmyadmin/libraries/List.class.php:    public function getDefault()
./phpmyadmin/libraries/List.class.php:        return $this->getEmpty();
./phpmyadmin/libraries/RecentTable.class.php:                isset($this->pma_table) ? $this->getFromDb() : array();
./phpmyadmin/libraries/RecentTable.class.php:    public static function getInstance()
./phpmyadmin/libraries/RecentTable.class.php:    public function getFromDb()
./phpmyadmin/libraries/RecentTable.class.php:            $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));
./phpmyadmin/libraries/RecentTable.class.php:    public function getHtmlSelectOption()
./phpmyadmin/libraries/RecentTable.class.php:    public function getHtmlSelect()
./phpmyadmin/libraries/RecentTable.class.php:        $html .= $this->getHtmlSelectOption();
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:        if (ob_get_clean()) {
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:            $indexes = PMA_Index::getFromTable($this->tableName, $db);
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:                    array_flip(array_keys($index->getColumns()))
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:        $this->displayfield = PMA_getDisplayField($db, $tableName);
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:     * @see Relation_Stats::_getXy
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:        $src_pos  = $this->_getXy($master_table, $master_field);
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:        $dest_pos = $this->_getXy($foreign_table, $foreign_field);
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:    private function _getXy($table, $column)
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:        $alltables = $this->getAllTables($db, $this->pageNumber);
./phpmyadmin/libraries/schema/Dia_Relation_Schema.class.php:            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');
./phpmyadmin/libraries/schema/User_Schema.class.php:            <form method="get" action="schema_edit.php" name="frm_select_page">
./phpmyadmin/libraries/schema/User_Schema.class.php:                echo PMA_getImage('b_views.png');
./phpmyadmin/libraries/schema/User_Schema.class.php:                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);
./phpmyadmin/libraries/schema/User_Schema.class.php:     * get all the export options and verify
./phpmyadmin/libraries/schema/User_Schema.class.php:             * get the tables list
./phpmyadmin/libraries/schema/User_Schema.class.php:             * important that we group together InnoDB tables
./phpmyadmin/libraries/schema/User_Schema.class.php:            $tables = PMA_DBI_get_tables_full($db);
./phpmyadmin/libraries/schema/User_Schema.class.php:             * get the tables list who support Internal Relations;
./phpmyadmin/libraries/schema/User_Schema.class.php:                    $foreigners = PMA_getForeigners($db, $master_table);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:    function getFont()
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:    function getFontSize()
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        //ob_get_clean();
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:     * get width of string/text
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:    function getStringWidth($text,$font,$fontSize)
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:            $indexes = PMA_Index::getFromTable($this->_tableName, $db);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:                    array_flip(array_keys($index->getColumns()))
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        $this->displayfield = PMA_getDisplayField($db, $tableName);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:    private function _getTitle()
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:                $svg->getStringWidth($field, $font, $fontSize)
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        $this->width += $svg->getStringWidth('  ', $font, $fontSize);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:            $this->_getTitle(), 'fill:none;stroke:black;'
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:     * @see Relation_Stats::_getXy
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        $src_pos  = $this->_getXy($master_table, $master_field);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        $dest_pos = $this->_getXy($foreign_table, $foreign_field);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:    function _getXy($table, $column)
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:        $alltables = $this->getAllTables($db, $this->pageNumber);
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');
./phpmyadmin/libraries/schema/Svg_Relation_Schema.class.php:                            $one_table, $svg->getFont(), $svg->getFontSize(),
./phpmyadmin/libraries/schema/Export_Relation_Schema.class.php:     * get all tables involved or included in page
./phpmyadmin/libraries/schema/Export_Relation_Schema.class.php:    public function getAllTables($db, $pageNumber)
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:    function getFont()
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:    function getFontSize()
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:     * get width of string/text
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:    function getStringWidth($text,$font,$fontSize)
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        // if(ob_get_clean()){
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:            $indexes = PMA_Index::getFromTable($this->_tableName, $db);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:                    array_flip(array_keys($index->getColumns()))
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        $this->displayfield = PMA_getDisplayField($db, $tableName);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:    private function _getTitle()
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:                $eps->getStringWidth($field, $font, $fontSize)
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        $this->width += $eps->getStringWidth('      ', $font, $fontSize);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        while ($this->width < $eps->getStringWidth($this->_getTitle(), $font, $fontSize)) {
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        $eps->showXY($this->_getTitle(), $this->x + 5, $this->y + 14);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:     * @see Relation_Stats::_getXy
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        $src_pos  = $this->_getXy($master_table, $master_field);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        $dest_pos = $this->_getXy($foreign_table, $foreign_field);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:    private function _getXy($table, $column)
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:        $alltables = $this->getAllTables($db, $this->pageNumber);
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:                    $table, $eps->getFont(), $eps->getFontSize(), $this->pageNumber,
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');
./phpmyadmin/libraries/schema/Eps_Relation_Schema.class.php:                            $one_table, $eps->getFont(), $eps->getFontSize(),
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $indexes = PMA_Index::getFromTable($this->_tableName, $db);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                    array_flip(array_keys($index->getColumns()))
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        $this->displayfield = PMA_getDisplayField($db, $tableName);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:    private function _getTitle()
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        while ($this->width < $pdf->GetStringWidth($this->_getTitle())) {
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $this->_getTitle(),
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:     * @see Relation_Stats::_getXy
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        $src_pos  = $this->_getXy($master_table, $master_field);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        $dest_pos = $this->_getXy($foreign_table, $foreign_field);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:    private function _getXy($table, $column)
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        $alltables = $this->getAllTables($db, $this->pageNumber);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                ($this->_xMax - $this->_xMin) / ($pdf->getPageWidth() - $this->rightMargin - $this->leftMargin),
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                ($this->_yMax - $this->_yMin) / ($pdf->getPageHeight() - $this->topMargin - $this->bottomMargin)
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        for ($l = 0; $l <= intval(($pdf->getPageHeight() - $topSpace - $bottomSpace) / $gridSize); $l++) {
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                $pdf->getPageWidth(), $l * $gridSize + $topSpace
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                && $l <= intval(($pdf->getPageHeight() - $topSpace - $bottomSpace - $labelHeight) / $gridSize)
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:        for ($j = 0; $j <= intval($pdf->getPageWidth() / $gridSize); $j++) {
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                $pdf->getPageHeight() - $bottomSpace
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $fields = PMA_DBI_get_columns($GLOBALS['db'], $table);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $comments = PMA_getComments($db, $table);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:            $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/schema/Pdf_Relation_Schema.class.php:                $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:         //if(ob_get_clean()){
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:            $indexes = PMA_Index::getFromTable($this->_tableName, $db);
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:                    array_flip(array_keys($index->getColumns()))
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:        $this->displayfield = PMA_getDisplayField($db, $tableName);
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:    private function _getTitle()
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:     * @see Relation_Stats::_getXy
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:        $src_pos  = $this->_getXy($master_table, $master_field);
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:        $dest_pos = $this->_getXy($foreign_table, $foreign_field);
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:    function _getXy($table, $column)
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:        $alltables = $this->getAllTables($db, $this->pageNumber);
./phpmyadmin/libraries/schema/Visio_Relation_Schema.class.php:            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');
./phpmyadmin/libraries/common.lib.php:function PMA_getIcon($icon, $alternate = '', $force_text = false)
./phpmyadmin/libraries/common.lib.php:        $button .= PMA_getImage($icon, $alternate);
./phpmyadmin/libraries/common.lib.php: * @param string $image      The name of the file to get
./phpmyadmin/libraries/common.lib.php:function PMA_getImage($image, $alternate = '', $attributes = array())
./phpmyadmin/libraries/common.lib.php:        if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {
./phpmyadmin/libraries/common.lib.php:            include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';
./phpmyadmin/libraries/common.lib.php:                $lang = _pgettext('MySQL 5.5 documentation language', 'en');
./phpmyadmin/libraries/common.lib.php:                $lang = _pgettext('MySQL 5.1 documentation language', 'en');
./phpmyadmin/libraries/common.lib.php:                $lang = _pgettext('MySQL 5.0 documentation language', 'en');
./phpmyadmin/libraries/common.lib.php:    $open_link = '<a href="' . PMA_linkURL($url) . '" target="mysql_doc">';
./phpmyadmin/libraries/common.lib.php:        return $open_link . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';
./phpmyadmin/libraries/common.lib.php:        return $open_link . PMA_getImage('b_help.png', __('Documentation')) . '</a>';
./phpmyadmin/libraries/common.lib.php:        return '<a href="Documentation.html#' . $anchor . '" target="documentation">'
./phpmyadmin/libraries/common.lib.php:             . PMA_getImage('b_help.png', __('Documentation'))
./phpmyadmin/libraries/common.lib.php:        return '[<a href="Documentation.html#' . $anchor . '" target="documentation">'
./phpmyadmin/libraries/common.lib.php: * @param string $target anchor in documentation
./phpmyadmin/libraries/common.lib.php:function PMA_showPHPDocu($target)
./phpmyadmin/libraries/common.lib.php:    $url = PMA_getPHPDocLink($target);
./phpmyadmin/libraries/common.lib.php:        return '<a href="' . $url . '" target="documentation">'
./phpmyadmin/libraries/common.lib.php:             . PMA_getImage('b_help.png', __('Documentation'))
./phpmyadmin/libraries/common.lib.php:        return '[<a href="' . $url . '" target="documentation">' . __('Documentation') . '</a>]';
./phpmyadmin/libraries/common.lib.php:        $key = $message->getHash();
./phpmyadmin/libraries/common.lib.php:        $type = $message->getLevel();
./phpmyadmin/libraries/common.lib.php:           PMA_getImage('b_help.png', '', array('class' => 'footnotemarker footnote_' . $nr));
./phpmyadmin/libraries/common.lib.php:        $error_message = PMA_DBI_getError();
./phpmyadmin/libraries/common.lib.php:            $error_msg_output .= PMA_SQP_getErrorString() . "\n";
./phpmyadmin/libraries/common.lib.php:               . PMA_getIcon('b_edit.png', __('Edit'))
./phpmyadmin/libraries/common.lib.php:function PMA_getTableList($db, $tables = null, $limit_offset = 0, $limit_count = false)
./phpmyadmin/libraries/common.lib.php:        $tables = PMA_DBI_get_tables_full($db, false, false, null, $limit_offset, $limit_count);
./phpmyadmin/libraries/common.lib.php:        // in this case, get rid of the table limit offset, otherwise
./phpmyadmin/libraries/common.lib.php:        $type = $message->getLevel();
./phpmyadmin/libraries/common.lib.php:        // Also we would like to get the SQL formed in some nice
./phpmyadmin/libraries/common.lib.php:                PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .
./phpmyadmin/libraries/common.lib.php:        $buffer_contents =  ob_get_contents();
./phpmyadmin/libraries/common.lib.php:        _pgettext('Short month name', 'May'),
./phpmyadmin/libraries/common.lib.php:        _pgettext('Short week day name', 'Sun'),
./phpmyadmin/libraries/common.lib.php:                $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)
./phpmyadmin/libraries/common.lib.php:        $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];
./phpmyadmin/libraries/common.lib.php: * @param string  $target     target
./phpmyadmin/libraries/common.lib.php:    $new_form = true, $strip_img = false, $target = '')
./phpmyadmin/libraries/common.lib.php:    if (! empty($target)) {
./phpmyadmin/libraries/common.lib.php:        $tag_params['target'] = htmlentities($target);
./phpmyadmin/libraries/common.lib.php:        if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {
./phpmyadmin/libraries/common.lib.php:                if (strlen($eachval) > $suhosin_get_MaxValueLength) {
./phpmyadmin/libraries/common.lib.php:                 . ' method="post"' . $target . ' style="display: inline;">';
./phpmyadmin/libraries/common.lib.php:    $separator   = PMA_get_arg_separator();
./phpmyadmin/libraries/common.lib.php:function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row, $force_unique = false)
./phpmyadmin/libraries/common.lib.php:            } elseif (in_array($meta->type, PMA_getGISDatatypes())
./phpmyadmin/libraries/common.lib.php:            . PMA_getIcon($image, $text)
./phpmyadmin/libraries/common.lib.php:        // As soon as we get near our currently chosen page ($pageNow -
./phpmyadmin/libraries/common.lib.php: * @param string $script      script name for form target
./phpmyadmin/libraries/common.lib.php: * @param string $frame       target frame
./phpmyadmin/libraries/common.lib.php:                $title1   = ' title="' . _pgettext('First page', 'Begin') . '"';
./phpmyadmin/libraries/common.lib.php:                $title2   = ' title="' . _pgettext('Previous page', 'Previous') . '"';
./phpmyadmin/libraries/common.lib.php:                $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';
./phpmyadmin/libraries/common.lib.php:                $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';
./phpmyadmin/libraries/common.lib.php:                . PMA_generate_common_url($_url_params) . '" target="'
./phpmyadmin/libraries/common.lib.php:                . PMA_generate_common_url($_url_params) . '" target="'
./phpmyadmin/libraries/common.lib.php:        echo "\n", '<form action="./', basename($script), '" method="post" target="', $frame, '">', "\n";
./phpmyadmin/libraries/common.lib.php:                $title3   = ' title="' . _pgettext('Next page', 'Next') . '"';
./phpmyadmin/libraries/common.lib.php:                $title4   = ' title="' . _pgettext('Last page', 'End') . '"';
./phpmyadmin/libraries/common.lib.php:                $caption3 = '&gt; ' . _pgettext('Next page', 'Next');
./phpmyadmin/libraries/common.lib.php:                $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');
./phpmyadmin/libraries/common.lib.php:                . PMA_generate_common_url($_url_params) . '" target="'
./phpmyadmin/libraries/common.lib.php:                . PMA_generate_common_url($_url_params) . '" target="'
./phpmyadmin/libraries/common.lib.php:function PMA_getDbLink($database = null)
./phpmyadmin/libraries/common.lib.php:    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {
./phpmyadmin/libraries/common.lib.php:    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {
./phpmyadmin/libraries/common.lib.php: * @param string $target a valid value for $cfg['LeftDefaultTabTable'],
./phpmyadmin/libraries/common.lib.php:function PMA_getTitleForTarget($target)
./phpmyadmin/libraries/common.lib.php:    return $mapping[$target];
./phpmyadmin/libraries/common.lib.php:    $vars['http_host'] = PMA_getenv('HTTP_HOST') ? PMA_getenv('HTTP_HOST') : '';
./phpmyadmin/libraries/common.lib.php:        $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);
./phpmyadmin/libraries/common.lib.php:            $response['message'] = $message->getDisplay();
./phpmyadmin/libraries/common.lib.php:            $response['error'] = $message->getDisplay();
./phpmyadmin/libraries/common.lib.php:    $files = PMA_getFileSelectOptions(
./phpmyadmin/libraries/common.lib.php:    $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));
./phpmyadmin/libraries/common.lib.php:    $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));
./phpmyadmin/libraries/common.lib.php:    $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));
./phpmyadmin/libraries/common.lib.php:    $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));
./phpmyadmin/libraries/common.lib.php:    $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));
./phpmyadmin/libraries/common.lib.php:    $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));
./phpmyadmin/libraries/common.lib.php:    $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));
./phpmyadmin/libraries/common.lib.php:    $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));
./phpmyadmin/libraries/common.lib.php:    $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));
./phpmyadmin/libraries/common.lib.php:    $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));
./phpmyadmin/libraries/common.lib.php:function PMA_getSupportedDatatypes($html = false, $selected = '')
./phpmyadmin/libraries/common.lib.php:} // end PMA_getSupportedDatatypes()
./phpmyadmin/libraries/common.lib.php:function PMA_getGISDatatypes($upper_case = false)
./phpmyadmin/libraries/common.lib.php:function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false)
./phpmyadmin/libraries/common.lib.php:function PMA_getFunctionsForField($field, $insert_mode)
./phpmyadmin/libraries/common.lib.php:} // end PMA_getFunctionsForField()
./phpmyadmin/libraries/common.lib.php:function PMA_getServerType()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:    $items = PMA_DBI_get_triggers($db, $table);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:    echo PMA_RTE_getList('trigger', $items);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:    echo PMA_TRI_getFooterLinks();
./phpmyadmin/libraries/rte/rte_triggers.lib.php:        $item_query = PMA_TRI_getQueryFromRequest();
./phpmyadmin/libraries/rte/rte_triggers.lib.php:        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                $trigger = PMA_TRI_getDataFromName($_REQUEST['item_original_name']);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                                      . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                                          . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                                              . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                    . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                $items = PMA_DBI_get_triggers($db, $table, '');
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                    $extra_data['new_row'] = PMA_TRI_getRowForList($trigger);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:            $title = PMA_RTE_getWord('add');
./phpmyadmin/libraries/rte/rte_triggers.lib.php:            $item = PMA_TRI_getDataFromRequest();
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                $item = PMA_TRI_getDataFromName($_REQUEST['item_name']);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                $item = PMA_TRI_getDataFromRequest();
./phpmyadmin/libraries/rte/rte_triggers.lib.php:            $editor = PMA_TRI_getEditorForm($mode, $item);
./phpmyadmin/libraries/rte/rte_triggers.lib.php:                PMA_RTE_getWord('not_found'),
./phpmyadmin/libraries/rte/rte_triggers.lib.php:function PMA_TRI_getDataFromRequest()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:} // end PMA_TRI_getDataFromRequest()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:function PMA_TRI_getDataFromName($name)
./phpmyadmin/libraries/rte/rte_triggers.lib.php:    $items = PMA_DBI_get_triggers($db, $table, '');
./phpmyadmin/libraries/rte/rte_triggers.lib.php:} // end PMA_TRI_getDataFromName()
./phpmyadmin/libraries/rte/rte_triggers.lib.php: *                                 PMA_TRI_getDataFromRequest() or
./phpmyadmin/libraries/rte/rte_triggers.lib.php: *                                 PMA_TRI_getDataFromName()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:function PMA_TRI_getEditorForm($mode, $item)
./phpmyadmin/libraries/rte/rte_triggers.lib.php:    $retval .= "    <td>" . _pgettext('Trigger action time', 'Time') . "</td>\n";
./phpmyadmin/libraries/rte/rte_triggers.lib.php:} // end PMA_TRI_getEditorForm()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:function PMA_TRI_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_triggers.lib.php:    if (! empty($_REQUEST['item_table']) && in_array($_REQUEST['item_table'], PMA_DBI_get_tables($db))) {
./phpmyadmin/libraries/rte/rte_triggers.lib.php:} // end PMA_TRI_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_routines.lib.php:    echo PMA_RTE_getList('routine', $items);
./phpmyadmin/libraries/rte/rte_routines.lib.php:    echo PMA_RTN_getFooterLinks();
./phpmyadmin/libraries/rte/rte_routines.lib.php:    // First get the list of parameters from the query
./phpmyadmin/libraries/rte/rte_routines.lib.php:        $routine_query = PMA_RTN_getQueryFromRequest();
./phpmyadmin/libraries/rte/rte_routines.lib.php:        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_routines.lib.php:                    $create_routine = PMA_DBI_get_definition($db, $_REQUEST['item_original_type'], $_REQUEST['item_original_name']);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                                          . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                                              . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                                                  . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                                      . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                $extra_data['new_row'] = PMA_RTN_getRowForList($routine);
./phpmyadmin/libraries/rte/rte_routines.lib.php:        || ! empty($_REQUEST['routine_changetype']))) // FIXME: this must be simpler than that
./phpmyadmin/libraries/rte/rte_routines.lib.php:        } else if (! empty($_REQUEST['routine_changetype'])) {
./phpmyadmin/libraries/rte/rte_routines.lib.php:            $title = PMA_RTE_getWord('add');
./phpmyadmin/libraries/rte/rte_routines.lib.php:            $routine = PMA_RTN_getDataFromRequest();
./phpmyadmin/libraries/rte/rte_routines.lib.php:                $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type']);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                $routine = PMA_RTN_getDataFromRequest();
./phpmyadmin/libraries/rte/rte_routines.lib.php:            $editor = PMA_RTN_getEditorForm($mode, $operation, $routine);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                $template   = PMA_RTN_getParameterRow();
./phpmyadmin/libraries/rte/rte_routines.lib.php:                PMA_RTE_getWord('not_found'),
./phpmyadmin/libraries/rte/rte_routines.lib.php:function PMA_RTN_getDataFromRequest()
./phpmyadmin/libraries/rte/rte_routines.lib.php:            if (! in_array($value, PMA_getSupportedDatatypes(), true)) {
./phpmyadmin/libraries/rte/rte_routines.lib.php:        && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())
./phpmyadmin/libraries/rte/rte_routines.lib.php:} // end function PMA_RTN_getDataFromRequest()
./phpmyadmin/libraries/rte/rte_routines.lib.php:function PMA_RTN_getDataFromName($name, $type, $all = true)
./phpmyadmin/libraries/rte/rte_routines.lib.php:        PMA_DBI_get_definition(
./phpmyadmin/libraries/rte/rte_routines.lib.php:                // parse the output of SHOW CREATE query to get accurate
./phpmyadmin/libraries/rte/rte_routines.lib.php:} // PMA_RTN_getDataFromName()
./phpmyadmin/libraries/rte/rte_routines.lib.php: *                               PMA_RTN_getDataFromRequest() or
./phpmyadmin/libraries/rte/rte_routines.lib.php: *                               PMA_RTN_getDataFromName()
./phpmyadmin/libraries/rte/rte_routines.lib.php:function PMA_RTN_getParameterRow($routine = array(), $index = null, $class = '')
./phpmyadmin/libraries/rte/rte_routines.lib.php:    $retval .= PMA_getSupportedDatatypes(true, $routine['item_param_type'][$i]) . "\n";
./phpmyadmin/libraries/rte/rte_routines.lib.php:    $retval .= "                    <a class='open_enum_editor' target='_blank'\n";
./phpmyadmin/libraries/rte/rte_routines.lib.php:    $retval .= "                        " . PMA_getImage('b_edit', '', array('title'=>__('ENUM/SET editor'))) . "\n";
./phpmyadmin/libraries/rte/rte_routines.lib.php:} // end PMA_RTN_getParameterRow()
./phpmyadmin/libraries/rte/rte_routines.lib.php: *                                 PMA_RTN_getDataFromRequest() or
./phpmyadmin/libraries/rte/rte_routines.lib.php: *                                 PMA_RTN_getDataFromName()
./phpmyadmin/libraries/rte/rte_routines.lib.php:function PMA_RTN_getEditorForm($mode, $operation, $routine)
./phpmyadmin/libraries/rte/rte_routines.lib.php:        $retval .= "        <input style='width: 49%;' type='submit' name='routine_changetype'\n";
./phpmyadmin/libraries/rte/rte_routines.lib.php:        $retval .= PMA_RTN_getParameterRow($routine, $i, $isprocedure_class);
./phpmyadmin/libraries/rte/rte_routines.lib.php:    $retval .= PMA_getSupportedDatatypes(true, $routine['item_returntype']) . "\n";
./phpmyadmin/libraries/rte/rte_routines.lib.php:} // end PMA_RTN_getEditorForm()
./phpmyadmin/libraries/rte/rte_routines.lib.php:function PMA_RTN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_routines.lib.php:        if (! empty($_REQUEST['item_returntype']) && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())) {
./phpmyadmin/libraries/rte/rte_routines.lib.php:} // end PMA_RTN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_routines.lib.php:        $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type'], false);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                        _ngettext(
./phpmyadmin/libraries/rte/rte_routines.lib.php:                    foreach (PMA_DBI_get_fields_meta($result) as $key => $field) {
./phpmyadmin/libraries/rte/rte_routines.lib.php:                    $output .= PMA_message::notice($notice)->getDisplay();
./phpmyadmin/libraries/rte/rte_routines.lib.php:                                                    . __('MySQL said: ') . PMA_DBI_getError(null));
./phpmyadmin/libraries/rte/rte_routines.lib.php:                    $message->getDisplay() . $output,
./phpmyadmin/libraries/rte/rte_routines.lib.php:                echo $message->getDisplay() . $output;
./phpmyadmin/libraries/rte/rte_routines.lib.php:                PMA_RTE_getWord('not_found'),
./phpmyadmin/libraries/rte/rte_routines.lib.php:                echo $message->getDisplay();
./phpmyadmin/libraries/rte/rte_routines.lib.php:        $routine = PMA_RTN_getDataFromName($_GET['item_name'], $_GET['item_type'], true);
./phpmyadmin/libraries/rte/rte_routines.lib.php:            $form = PMA_RTN_getExecuteForm($routine);
./phpmyadmin/libraries/rte/rte_routines.lib.php:                PMA_RTE_getWord('not_found'),
./phpmyadmin/libraries/rte/rte_routines.lib.php: *                                 PMA_RTN_getDataFromName()
./phpmyadmin/libraries/rte/rte_routines.lib.php:function PMA_RTN_getExecuteForm($routine)
./phpmyadmin/libraries/rte/rte_routines.lib.php:                $retval .= PMA_getFunctionsForField($field, false);
./phpmyadmin/libraries/rte/rte_routines.lib.php:} // end PMA_RTN_getExecuteForm()
./phpmyadmin/libraries/rte/rte_export.lib.php:        $title = sprintf(PMA_RTE_getWord('export'), $item_name);
./phpmyadmin/libraries/rte/rte_export.lib.php:                  . sprintf(PMA_RTE_getWord('not_found'), $item_name, $_db);
./phpmyadmin/libraries/rte/rte_export.lib.php:        $export_data = PMA_DBI_get_definition($db, 'EVENT', $item_name);
./phpmyadmin/libraries/rte/rte_export.lib.php:            $export_data = PMA_DBI_get_definition(
./phpmyadmin/libraries/rte/rte_export.lib.php:        $triggers = PMA_DBI_get_triggers($db, $table, '');
./phpmyadmin/libraries/rte/rte_footer.lib.php:function PMA_RTE_getFooterLinks($docu, $priv, $name)
./phpmyadmin/libraries/rte/rte_footer.lib.php:        $retval .= PMA_getIcon($icon);
./phpmyadmin/libraries/rte/rte_footer.lib.php:        $retval .= PMA_RTE_getWord('add') . "</a>\n";
./phpmyadmin/libraries/rte/rte_footer.lib.php:        $retval .= "            " . PMA_getIcon($icon);
./phpmyadmin/libraries/rte/rte_footer.lib.php:        $retval .= PMA_RTE_getWord('no_create') . "\n";
./phpmyadmin/libraries/rte/rte_footer.lib.php:} // end PMA_RTE_getFooterLinks()
./phpmyadmin/libraries/rte/rte_footer.lib.php:function PMA_RTN_getFooterLinks()
./phpmyadmin/libraries/rte/rte_footer.lib.php:    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');
./phpmyadmin/libraries/rte/rte_footer.lib.php:}// end PMA_RTN_getFooterLinks()
./phpmyadmin/libraries/rte/rte_footer.lib.php:function PMA_TRI_getFooterLinks()
./phpmyadmin/libraries/rte/rte_footer.lib.php:    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');
./phpmyadmin/libraries/rte/rte_footer.lib.php:} // end PMA_TRI_getFooterLinks()
./phpmyadmin/libraries/rte/rte_footer.lib.php:function PMA_EVN_getFooterLinks()
./phpmyadmin/libraries/rte/rte_footer.lib.php:    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');
./phpmyadmin/libraries/rte/rte_footer.lib.php:} // end PMA_EVN_getFooterLinks()
./phpmyadmin/libraries/rte/rte_list.lib.php:function PMA_RTE_getList($type, $items)
./phpmyadmin/libraries/rte/rte_list.lib.php:    $retval  = "<!-- LIST OF " . PMA_RTE_getWord('docu') . " START -->\n";
./phpmyadmin/libraries/rte/rte_list.lib.php:    $retval .= "        " . PMA_RTE_getWord('title') . "\n";
./phpmyadmin/libraries/rte/rte_list.lib.php:    $retval .= "        " . PMA_showMySQLDocu('SQL-Syntax', PMA_RTE_getWord('docu')) . "\n";
./phpmyadmin/libraries/rte/rte_list.lib.php:    $retval .= "      " . PMA_RTE_getWord('nothing') . "\n";
./phpmyadmin/libraries/rte/rte_list.lib.php:            $retval .= PMA_RTN_getRowForList($item, $rowclass);
./phpmyadmin/libraries/rte/rte_list.lib.php:            $retval .= PMA_TRI_getRowForList($item, $rowclass);
./phpmyadmin/libraries/rte/rte_list.lib.php:            $retval .= PMA_EVN_getRowForList($item, $rowclass);
./phpmyadmin/libraries/rte/rte_list.lib.php:    $retval .= "<!-- LIST OF " . PMA_RTE_getWord('docu') . " END -->\n";
./phpmyadmin/libraries/rte/rte_list.lib.php:} // end PMA_RTE_getList()
./phpmyadmin/libraries/rte/rte_list.lib.php:function PMA_RTN_getRowForList($routine, $rowclass = '')
./phpmyadmin/libraries/rte/rte_list.lib.php:        // we will show a dialog to get values for these parameters,
./phpmyadmin/libraries/rte/rte_list.lib.php:        $routine_details = PMA_RTN_getDataFromName(
./phpmyadmin/libraries/rte/rte_list.lib.php:} // end PMA_RTN_getRowForList()
./phpmyadmin/libraries/rte/rte_list.lib.php:function PMA_TRI_getRowForList($trigger, $rowclass = '')
./phpmyadmin/libraries/rte/rte_list.lib.php:} // end PMA_TRI_getRowForList()
./phpmyadmin/libraries/rte/rte_list.lib.php:function PMA_EVN_getRowForList($event, $rowclass = '')
./phpmyadmin/libraries/rte/rte_list.lib.php:} // end PMA_EVN_getRowForList()
./phpmyadmin/libraries/rte/rte_events.lib.php:    echo PMA_RTE_getList('event', $items);
./phpmyadmin/libraries/rte/rte_events.lib.php:    echo PMA_EVN_getFooterLinks();
./phpmyadmin/libraries/rte/rte_events.lib.php:        $item_query = PMA_EVN_getQueryFromRequest();
./phpmyadmin/libraries/rte/rte_events.lib.php:        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_events.lib.php:                $create_item = PMA_DBI_get_definition(
./phpmyadmin/libraries/rte/rte_events.lib.php:                                      . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_events.lib.php:                                          . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_events.lib.php:                                              . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_events.lib.php:                                      . __('MySQL said: ') . PMA_DBI_getError(null);
./phpmyadmin/libraries/rte/rte_events.lib.php:                $extra_data['new_row'] = PMA_EVN_getRowForList($event);
./phpmyadmin/libraries/rte/rte_events.lib.php:        || ! empty($_REQUEST['item_changetype'])))
./phpmyadmin/libraries/rte/rte_events.lib.php:        if (! empty($_REQUEST['item_changetype'])) {
./phpmyadmin/libraries/rte/rte_events.lib.php:            $title = PMA_RTE_getWord('add');
./phpmyadmin/libraries/rte/rte_events.lib.php:            $item = PMA_EVN_getDataFromRequest();
./phpmyadmin/libraries/rte/rte_events.lib.php:                && empty($_REQUEST['item_changetype'])
./phpmyadmin/libraries/rte/rte_events.lib.php:                $item = PMA_EVN_getDataFromName($_REQUEST['item_name']);
./phpmyadmin/libraries/rte/rte_events.lib.php:                $item = PMA_EVN_getDataFromRequest();
./phpmyadmin/libraries/rte/rte_events.lib.php:            $editor = PMA_EVN_getEditorForm($mode, $operation, $item);
./phpmyadmin/libraries/rte/rte_events.lib.php:                PMA_RTE_getWord('not_found'),
./phpmyadmin/libraries/rte/rte_events.lib.php:function PMA_EVN_getDataFromRequest()
./phpmyadmin/libraries/rte/rte_events.lib.php:} // end PMA_EVN_getDataFromRequest()
./phpmyadmin/libraries/rte/rte_events.lib.php:function PMA_EVN_getDataFromName($name)
./phpmyadmin/libraries/rte/rte_events.lib.php:} // end PMA_EVN_getDataFromName()
./phpmyadmin/libraries/rte/rte_events.lib.php: *                              PMA_EVN_getDataFromRequest() or
./phpmyadmin/libraries/rte/rte_events.lib.php: *                              PMA_EVN_getDataFromName()
./phpmyadmin/libraries/rte/rte_events.lib.php:function PMA_EVN_getEditorForm($mode, $operation, $item)
./phpmyadmin/libraries/rte/rte_events.lib.php:        $retval .= "               name='item_changetype'\n";
./phpmyadmin/libraries/rte/rte_events.lib.php:    $retval .= "    <td>" . _pgettext('Start of recurring event', 'Start') . "</td>\n";
./phpmyadmin/libraries/rte/rte_events.lib.php:    $retval .= "    <td>" . _pgettext('End of recurring event', 'End') . "</td>\n";
./phpmyadmin/libraries/rte/rte_events.lib.php:} // end PMA_EVN_getEditorForm()
./phpmyadmin/libraries/rte/rte_events.lib.php:function PMA_EVN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_events.lib.php:} // end PMA_EVN_getQueryFromRequest()
./phpmyadmin/libraries/rte/rte_main.inc.php:    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {
./phpmyadmin/libraries/rte/rte_words.lib.php: * @param   string  $index   The index of the string to get
./phpmyadmin/libraries/rte/rte_words.lib.php:function PMA_RTE_getWord($index)
./phpmyadmin/libraries/rte/rte_words.lib.php:} // end PMA_RTE_getWord()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPageSizeFromFormat(), setPageFormat()
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get array of HTML colors
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get array of custom spot colors
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->getFontsList();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->file_id = md5($this->getRandomSeed('TCPDF'.$orientation.$unit.$format.$encoding));
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default graphic vars
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->default_graphic_vars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getTCPDFVersion() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageSizeFromFormat($format) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() documentation or an array of two numners (width, height) or an array containing the following measures and options:<ul>
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPageSizeFromFormat()
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get page measures from format name
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$pf = $this->getPageSizeFromFormat($format);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pf = $this->getPageSizeFromFormat($format['format']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get pattern parts
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getRTL() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getLastH() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getImageScale() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageDimensions($pagenum='') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPageDimensions()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageWidth($pagenum='') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPageDimensions()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageHeight($pagenum='') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPageDimensions()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getBreakMargin($pagenum='') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getScaleFactor() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * Defines the left margin. The method can be called before creating the first page. If the current abscissa gets out of page, it is brought back to the margin.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getCellPaddings(), setCellPaddings()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getCellPaddings(), SetCellPadding()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getCellPaddings() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getCellMargins()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getCellMargins() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get border width
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getAutoPageBreak() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * If the document contains no page, AddPage() is called to prevent from getting an invalid document.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPage(), lastpage(), getNumPages()
./phpmyadmin/libraries/tcpdf/tcpdf.php:			//$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see setPage(), getPage(), getNumPages()
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->setPage($this->getNumPages(), $resetmargins);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see setPage(), lastpage(), getNumPages()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPage() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see setPage(), getPage(), lastpage()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getNumPages() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see startPage(), endPage(), addTOCPage(), endTOCPage(), getPageSizeFromFormat(), setPageFormat()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see AddPage(), endPage(), addTOCPage(), endTOCPage(), getPageSizeFromFormat(), setPageFormat()
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getHeaderData() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getHeaderMargin() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFooterMargin() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getImageRBX() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getImageRBY() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$headerfont = $this->getHeaderFont();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$headerdata = $this->getHeaderData();
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$imgtype = $this->getImageFileType(K_PATH_IMAGES.$headerdata['logo']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$imgy = $this->getImageRBY();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			if ($this->getRTL()) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$barcode = $this->getBarcode();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$pagenumtxt = $this->l['w_page'].' '.$this->getAliasNumPage().' / '.$this->getAliasNbPages();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$pagenumtxt = $this->l['w_page'].' '.$this->getPageNumGroupAlias().' / '.$this->getPageGroupAlias();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		if ($this->getRTL()) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$this->Cell(0, 0, $this->getAliasRightShift().$pagenumtxt, 'T', 0, 'R');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getAliasNbPages()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getSpotColor($name) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$spotcolor = $this->getSpotColor($name);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getColorStringFromArray($c) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $getarray (boolean) if true returns an array of characters widths, if false returns the total length.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function GetStringWidth($s, $fontname='', $fontstyle='', $fontsize=0, $getarray=false) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		return $this->GetArrStringWidth($this->utf8Bidi($this->UTF8StringToArray($s), $s, $this->tmprtl), $fontname, $fontstyle, $fontsize, $getarray);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $getarray (boolean) if true returns an array of characters widths, if false returns the total length.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function GetArrStringWidth($sa, $fontname='', $fontstyle='', $fontsize=0, $getarray=false) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		if ($getarray) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get raw width
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$chw = $this->getRawCharWidth($char);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getRawCharWidth($char) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getFontsList() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$fontsdir = opendir($this->_getfontpath());
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$fb = $this->getFontBuffer($fontkey);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get specified font directory (if any)
./phpmyadmin/libraries/tcpdf/tcpdf.php:			} elseif (file_exists($this->_getfontpath().$tmp_fontfile)) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$fontfile = $this->_getfontpath().$tmp_fontfile;
./phpmyadmin/libraries/tcpdf/tcpdf.php:				} elseif (file_exists($this->_getfontpath().$tmp_fontfile)) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$fontfile = $this->_getfontpath().$tmp_fontfile;
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->CurrentFont = $this->getFontBuffer($fontdata['fontkey']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontDescent($font, $style='', $size=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$fontinfo = $this->getFontBuffer($fontdata['fontkey']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontAscent($font, $style='', $size=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$fontinfo = $this->getFontBuffer($fontdata['fontkey']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $y (float) Ordinate of target position; -1 indicates the current position. The default value is 0 (top of page)
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $page (int) Number of target page; -1 indicates the current page. This is the default value
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// Add widgets annotation's icons
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$data = file_get_contents($filedata['file']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$stream = $this->_getrawstream($data, $filedata['n']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$out = $this->_getobj($filedata['n'])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->_out($this->getCellCode($w, $h, $txt, $border, $ln, $align, $fill, $link, $stretch, true, $calign, $valign));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCellCode($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$s .= $this->getCellBorder($x, $y, $w, $h, $border);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get current text width (considering general font stretching and spacing)
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get string width without spaces
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get string width
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCellBorder($x, $y, $w, $h, $brd) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get current page number
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get current column
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get text height
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$text_height = $this->getStringHeight($w, $txt, $reseth, $autopadding, $mc_padding, $border);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$text_height = $this->getStringHeight($w, $txt, $reseth, $autopadding, $mc_padding, $border);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get latest page number
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get latest column
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get border modes
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_start = $this->getBorderMode($border, $position='start');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_end = $this->getBorderMode($border, $position='end');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_middle = $this->getBorderMode($border, $position='middle');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pagebuff = $this->getPageBuffer($this->page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getBorderMode($brd, $position='start') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getNumLines($txt, $w=0, $reseth=false, $autopadding=true, $cellpadding='', $border=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 *  $start_page = $pdf->getPage();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 *  // get the new Y
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 *  $end_page = $pdf->getPage();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getStringHeight($w, $txt, $reseth=false, $autopadding=true, $cellpadding='', $border=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$lines = $this->getNumLines($txt, $w, $reseth, $autopadding, $cellpadding, $border);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get a char width
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get array of unicode values
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get array of chars
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get the number of characters
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$w = $this->getRemainingWidth();
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$w = $this->getRemainingWidth();
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getRemainingWidth() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * Return the image type given the file name or array returned by getimagesize() function.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $iminfo (array) array of image information returned by getimagesize() function.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getImageFileType($imgfile, $iminfo=array()) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$imsize = @getimagesize($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get image dimensions
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$imsize = @getimagesize($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// try to get remote file data using cURL
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$imsize = @getimagesize($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get measures from specified data
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pw = $this->getHTMLUnitToUnits($w, 0, $this->pdfunit, true) * $this->imgscale * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ph = $this->getHTMLUnitToUnits($h, 0, $this->pdfunit, true) * $this->imgscale * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get measures from specified data
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$pw = $this->getHTMLUnitToUnits($w, 0, $this->pdfunit, true) * $this->imgscale * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$ph = $this->getHTMLUnitToUnits($h, 0, $this->pdfunit, true) * $this->imgscale * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->Error('[Image] Unable to get image: '.$file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get original image width and height in pixels
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get existing image data
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$info = $this->getImageBuffer($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get existing image data
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$info = $this->getImageBuffer($tempfile_plain);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			//First use of image, get info
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$type = $this->getImageFileType($file, $imsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$mqr = $this->get_mqr();
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// get SVG file content
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$svgimg = file_get_contents($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// get width and height
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$ow = $this->getHTMLUnitToUnits($tmp[1], 1, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$oh = $this->getHTMLUnitToUnits($tmp[1], 1, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * Gets the current active configuration setting of magic_quotes_runtime (if the get_magic_quotes_runtime function exist)
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @return Returns 0 if magic quotes runtime is off or get_magic_quotes_runtime doesn't exist, 1 otherwise.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function get_mqr() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			return @get_magic_quotes_runtime();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get PNG image data
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get the colors for the transparency index
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$a = getimagesize($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get file content
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$data = file_get_contents($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get ICC sequence length
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$length = ($this->_getUSHORT($data, ($pos - 2)) - 16);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get sequence segment
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get compression method
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$alpha = $this->getGDgamma($alpha); // correct gamma
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getGDgamma($v) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get the document content
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$pdfdoc = $this->getBuffer();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get digital signature via openssl library
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$signature = file_get_contents($tempsign);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				if (ob_get_contents()) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->sendOutputData($this->getBuffer(), $this->bufferlen);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					echo $this->getBuffer();
./phpmyadmin/libraries/tcpdf/tcpdf.php:				if (ob_get_contents()) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->sendOutputData($this->getBuffer(), $this->bufferlen);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					fwrite($f, $this->getBuffer(), $this->bufferlen);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->sendOutputData(file_get_contents($name), filesize($name));
./phpmyadmin/libraries/tcpdf/tcpdf.php:					if (ob_get_contents()) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->sendOutputData(file_get_contents($name), filesize($name));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$retval .= chunk_split(base64_encode($this->getBuffer()), 76, "\r\n");
./phpmyadmin/libraries/tcpdf/tcpdf.php:				return $this->getBuffer();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		foreach (array_keys(get_object_vars($this)) as $val) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getfontpath() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getInternalPageNumberAliases($a= '') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getAllInternalPageNumberAliases() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$pnalias[$k] = $this->getInternalPageNumberAliases($a);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get compensation factor
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get internal aliases for page numbers
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$pnalias = $this->getAllInternalPageNumberAliases();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get current page
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$temppage = $this->getPageBuffer($n);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$out .= $this->_getannotsrefs($n);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$p = $this->_getrawstream($p);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out = $this->_getobj(1)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->_out($this->_getannotsrefs($n));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getannotsrefs($n) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$annots .= ' /Subtype /Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$this->_out($this->_getobj($radio_button_obj_id)."\n".$annots."\n".'endobj');
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$annots .= ' /C '.$this->getColorStringFromArray($pl['opt']['c']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						case 'widget': {
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$annots .= ' /BC '.$this->getColorStringFromArray($pl['opt']['mk']['bc']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$annots .= ' /BG '.$this->getColorStringFromArray($pl['opt']['mk']['bg']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$info = $this->getImageBuffer($pl['opt']['mk']['i']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$info = $this->getImageBuffer($pl['opt']['mk']['ri']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$info = $this->getImageBuffer($pl['opt']['mk']['ix']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->_out($this->_getobj($annot_obj_id)."\n".$annots."\n".'endobj');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out = $this->_getobj()."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$stream = $this->_getrawstream($stream);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getULONG($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getUSHORT($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getSHORT($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getFWORD($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$v = $this->_getUSHORT($str, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getUFWORD($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$v = $this->_getUSHORT($str, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getFIXED($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$m = $this->_getFWORD($str, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$f = $this->_getUSHORT($str, ($offset + 2));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getBYTE($str, $offset) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$outpath = $this->_getfontpath();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get font data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$font = file_get_contents($fontfile);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			if ($this->_getULONG($font, 0) == 0x10000) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$enc_target = $this->encmaps->encmap[$enc];
./phpmyadmin/libraries/tcpdf/tcpdf.php:					if ($enc_target != $enc_ref[$i]) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$fmetric['diff'] .= '/'.$enc_target[$i].' ';
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get font info
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get internal map
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get the number of random bytes at the beginning of charstrings
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get charstring data
./phpmyadmin/libraries/tcpdf/tcpdf.php:			if ($this->_getULONG($font, $offset) != 0x10000) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get number of tables
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$numTables = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get tables ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get table info
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$table[$tag]['checkSum'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$table[$tag]['offset'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$table[$tag]['length'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			if ($this->_getULONG($font, $offset) != 0x5F0F3CF5) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get FUnits
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['unitsPerEm'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$xMin = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$yMin = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$xMax = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$yMax = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$macStyle = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get offset mode (indexToLocFormat : 0 = short, 1 = long)
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$short_offset = ($this->_getSHORT($font, $offset) == 0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get the offsets to the locations of the glyphs in the font, relative to the beginning of the glyphData table
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$indexToLoc[$i] = $this->_getUSHORT($font, $offset) * 2;
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$indexToLoc[$i] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get glyphs indexes of chars from cmap table
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$numEncodingTables = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$encodingTables[$i]['platformID'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$encodingTables[$i]['encodingID'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$encodingTables[$i]['offset'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get os/2 metrics ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['AvgWidth'] = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$usWeightClass = round($this->_getUFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fsType = $this->_getSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get font name ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$numNameRecords = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$stringStorageOffset = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$nameID = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$stringLength = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$stringOffset = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get post data ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['italicAngle'] = $this->_getFIXED($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['underlinePosition'] = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['underlineThickness'] = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$isFixedPitch = ($this->_getULONG($font, $offset) == 0) ? false : true;
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get hhea data ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['Ascent'] = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['Descent'] = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['Leading'] = round($this->_getFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$fmetric['MaxWidth'] = round($this->_getUFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get the number of hMetric entries in hmtx table
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$numberOfHMetrics = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get maxp data ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get the the number of glyphs in the font.
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$numGlyphs = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// ---------- get CIDToGIDMap ----------
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$format = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$g = $this->_getBYTE($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$subHeaderKeys[$i] = ($this->_getUSHORT($font, $offset) / 8);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$subHeaders[$k]['firstCode'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$subHeaders[$k]['entryCount'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$subHeaders[$k]['idDelta'] = $this->_getSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$subHeaders[$k]['idRangeOffset'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$glyphIndexArray[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$length = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$segCount = ($this->_getUSHORT($font, $offset) / 2);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$endCount[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$startCount[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$idDelta[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$idRangeOffset[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$glyphIdArray[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$firstCode = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$entryCount = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$g = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$is32[$k] = $this->_getBYTE($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$nGroups = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$startCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$endCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$startGlyphID = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$startCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$numChars = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$g = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$nGroups = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$startCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$endCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$startGlyphCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get xHeight (height of x)
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$yMin = $this->_getFWORD($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$yMax = $this->_getFWORD($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get CapHeight (height of H)
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$yMin = $this->_getFWORD($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$yMax = $this->_getFWORD($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$cw[$i] = round($this->_getUFWORD($font, $offset) * $urk);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getTrueTypeFontSubset($font, $subsetchars) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		if ($this->_getULONG($font, $offset) != 0x10000) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get number of tables
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$numTables = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get table info
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$table[$tag]['checkSum'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$table[$tag]['offset'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$table[$tag]['length'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		if ($this->_getULONG($font, $offset) != 0x5F0F3CF5) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get offset mode (indexToLocFormat : 0 = short, 1 = long)
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$short_offset = ($this->_getSHORT($font, $offset) == 0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get the offsets to the locations of the glyphs in the font, relative to the beginning of the glyphData table
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$indexToLoc[$i] = $this->_getUSHORT($font, $offset) * 2;
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$indexToLoc[$i] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get glyphs indexes of chars from cmap table
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$numEncodingTables = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$encodingTables[$i]['platformID'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$encodingTables[$i]['encodingID'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$encodingTables[$i]['offset'] = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$format = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$g = $this->_getBYTE($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$subHeaderKeys[$i] = ($this->_getUSHORT($font, $offset) / 8);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$subHeaders[$k]['firstCode'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$subHeaders[$k]['entryCount'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$subHeaders[$k]['idDelta'] = $this->_getSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$subHeaders[$k]['idRangeOffset'] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$glyphIndexArray[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$length = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$segCount = ($this->_getUSHORT($font, $offset) / 2);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$endCount[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$startCount[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$idDelta[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$idRangeOffset[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$glyphIdArray[$k] = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$firstCode = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$entryCount = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$g = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$is32[$k] = $this->_getBYTE($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$nGroups = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$startCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$endCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$startGlyphID = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$startCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$numChars = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$g = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$nGroups = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$startCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$endCharCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$startGlyphCode = $this->_getULONG($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$numberOfContours = $this->_getSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$flags = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$glyphIndex = $this->_getUSHORT($font, $offset);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get the tables to preserve
./phpmyadmin/libraries/tcpdf/tcpdf.php:				//$table[$tag]['checkSum'] = $this->_getTTFtableChecksum($table[$tag]['data'], $table[$tag]['length']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$table['loca']['checkSum'] = $this->_getTTFtableChecksum($table['loca']['data'], $table['loca']['length']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$table['glyf']['checkSum'] = $this->_getTTFtableChecksum($table['glyf']['data'], $table['glyf']['length']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$checkSumAdjustment = 0xB1B0AFBA - $this->_getTTFtableChecksum($font, strlen($font));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getTTFtableChecksum($table, $length) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$mqr = $this->get_mqr();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// search and get font file to embedd
./phpmyadmin/libraries/tcpdf/tcpdf.php:			} elseif (file_exists($this->_getfontpath().$file)) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$fontfile = $this->_getfontpath().$file;
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$font = file_get_contents($fontfile);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$fontinfo = $this->getFontBuffer($fontkey);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$font = $this->_getTrueTypeFontSubset($font, $subsetchars);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$stream = $this->_getrawstream($font);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$font = $this->getFontBuffer($k);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$out = $this->_getobj($this->font_obj_ids[$k])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$out = $this->_getobj($this->font_obj_ids[$k])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out = $this->_getobj($this->font_obj_ids[$font['fontkey']])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$stream = $this->_getrawstream($stream);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// search and get CTG font file to embedd
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// search and get ctg font file to embedd
./phpmyadmin/libraries/tcpdf/tcpdf.php:			} elseif (file_exists($this->_getfontpath().$ctgfile)) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$fontfile = $this->_getfontpath().$ctgfile;
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$stream = $this->_getrawstream(file_get_contents($fontfile));
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out = $this->_getobj($this->font_obj_ids[$font['fontkey']])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$info = $this->getImageBuffer($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$stream = $this->_getrawstream($info['data']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$icc = $this->_getrawstream($icc);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$pal = $this->_getrawstream($pal);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$out = $this->_getobj($data['n'])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$stream = $this->_getrawstream($stream, $data['n']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getxobjectdict() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out = $this->_getobj(2)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$font = $this->getFontBuffer($fontkey);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out .= $this->_getxobjectdict();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$icc = file_get_contents(dirname(__FILE__).'/sRGB.icc');
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$icc = $this->_getrawstream($icc);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$font = $this->getFontBuffer('helvetica');
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// widget annotation for empty signature
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$out = $this->_getobj($esa['objid'])."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$out .= ' /Subtype /Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// widget annotation for signature
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$out = $this->_getobj($this->sig_obj_id)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$out .= ' /Subtype /Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see getPageSizeFromFormat(), setPageFormat()
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->_out($this->_getobj());
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $objid (int) Object ID (leave empty to get a new ID).
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getobj($objid='') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * get raw output stream.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getrawstream($s, $n=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function _getstream($s, $n=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		return 'stream'."\n".$this->_getrawstream($s, $n)."\n".'endstream';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->_out($this->_getstream($s, $n));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$pagebuff = $this->getPageBuffer($this->page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$char = ord($str[$i]); // get one string character at time
./phpmyadmin/libraries/tcpdf/tcpdf.php:			if (count($bytes) == 0) { // get starting octect
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getHeaderFont() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFooterFont() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPDFData() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$returncolor = $this->getSpotColor($color);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see setImageScale(), getImageScale()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getRandomSeed($seed='') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$seed .= getmypid();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC), MCRYPT_RAND);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$seed = $this->_md5_16($this->getRandomSeed());
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$iv = str_repeat("\x00", mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC));
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$seed = $this->_md5_16($this->getRandomSeed());
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$iv = str_repeat("\x00", mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->encryptdata['key'] = substr(hash('sha256', $this->getRandomSeed(), true), 0, $keybytelen);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$perms = $this->getEncPermissionsString($this->encryptdata['protection']); // bytes 0-3
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$iv = str_repeat("\x00", mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get default permissions (reverse byte order)
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$permissions = $this->getEncPermissionsString($this->encryptdata['protection']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$seed = sha1($this->getRandomSeed(), true);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pkprotection = $this->getUserPermissionCode($pubkey['p'], $this->encryptdata['mode']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get default permissions (reverse byte order)
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$pkpermissions = $this->getEncPermissionsString($pkprotection);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$signature = file_get_contents($tempencfile, false, null, $envelope_length);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getUserPermissionCode($permissions, $mode=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * If you don't set any password, the document will open as usual. If you set a user password, the PDF viewer will ask for it before displaying the document. The master password, if different from the user one, can be used to get full access.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->encryptdata['protection'] = $this->getUserPermissionCode($permissions, $mode);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			if (mcrypt_get_cipher_name(MCRYPT_RIJNDAEL_128) === false) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$owner_pass = md5($this->getRandomSeed());
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getEncPermissionsString($protection) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get bounding box coordinates
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get bounding box coordinates
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// getting arrow direction angle
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get number of chars
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// W1. Examine each nonspacing mark (NSM) in the level run, and change the type of the NSM to the type of the previous character. If the NSM is at the start of the level run, it will get the type of sor.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $page (int) Target page number (leave empty for current page).
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getDestination() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $page (int) Target page number (leave empty for current page).
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $page (int) Target page number (leave empty for current page).
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get sorting columns
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$jsb = "getField('tcpdfdocsaved').value='saved';";
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$out = $this->_getobj($key)."\n".' << /S /JavaScript /JS '.$this->_textstring($val['js'], $key).' >>'."\n".'endobj';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->javascript .= "if (getField('tcpdfdocsaved').value != 'saved') {";
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getAnnotOptFromJSProp($prop) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// rotation: The rotation of a widget in counterclockwise increments.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFormDefaultProp() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default style
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$prop = array_merge($this->getFormDefaultProp(), $prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get annotation data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$popt = $this->getAnnotOptFromJSProp($prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$opt['Subtype'] = 'Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$tmpfont = $this->getFontBuffer($font);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default style
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$prop = array_merge($this->getFormDefaultProp(), $prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get annotation data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$popt = $this->getAnnotOptFromJSProp($prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$opt['Subtype'] = 'Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default style
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$prop = array_merge($this->getFormDefaultProp(), $prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get annotation data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$popt = $this->getAnnotOptFromJSProp($prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$opt['Subtype'] = 'Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default style
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$prop = array_merge($this->getFormDefaultProp(), $prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get annotation data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$popt = $this->getAnnotOptFromJSProp($prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$opt['Subtype'] = 'Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default style
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$prop = array_merge($this->getFormDefaultProp(), $prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get annotation data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$popt = $this->getAnnotOptFromJSProp($prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$tmpfont = $this->getFontBuffer($font);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$opt['Subtype'] = 'Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get default style
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$prop = array_merge($this->getFormDefaultProp(), $prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get annotation data
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$popt = $this->getAnnotOptFromJSProp($prop);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$opt['Subtype'] = 'Widget';
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$out = $this->_getobj($sigobjid)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->sig_obj_id = $this->n; // signature widget
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * Set the digital signature appearance (a cliccable rectangle area to get signature properties)
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->signature_appearance = $this->getSignatureAppearanceArray($x, $y, $w, $h, $page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * Add an empty digital signature appearance (a cliccable rectangle area to get signature properties)
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->empty_signature_appearance[] = array('objid' => $this->n) + $this->getSignatureAppearanceArray($x, $y, $w, $h, $page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getSignatureAppearanceArray($x=0, $y=0, $w=0, $h=0, $page=-1) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getAliasRightShift() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getAliasNbPages() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getAliasNumPage() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageGroupAlias() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageNumGroupAlias() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getGroupPageNo() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getGroupPageNoFormatted() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		return $this->formatPageNumber($this->getGroupPageNo());
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getCellHeightRatio() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$stream = $this->_getrawstream($grad['stream']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$stream = $this->_getrawstream($stream);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$data = file_get_contents($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getBarcode() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$arrcode = $barcodeobj->getBarcodeArray();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$arrcode = $barcodeobj->getBarcodeArray();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get max dimensions
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getMargins() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getOriginalMargins() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontSize() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontSizePt() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontFamily() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontStyle() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get the CSS part
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$tidy_head = tidy_get_head($tidy);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get the body part
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$tidy_body = tidy_get_body($tidy);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$c += intval(preg_match_all('/[\:]link|visited|hover|active|focus|target|lang|enabled|disabled|checked|indeterminate|root|nth|first|last|only|empty|contains|not/i', $selector, $matches)); // number of pseudo-classes
./phpmyadmin/libraries/tcpdf/tcpdf.php:								// (:root, :nth-child(n), :nth-last-child(n), :nth-of-type(n), :nth-last-of-type(n), :first-child, :last-child, :first-of-type, :last-of-type, :only-child, :only-of-type, :empty, :link, :visited, :active, :hover, :focus, :target, :lang(fr), :enabled, :disabled, :checked)
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCSSdataArray($dom, $key, $css) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get parent CSS selectors
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get all styles that apply
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get specificity
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getTagStyleFromCSSarray($css) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCSSBorderWidth($width) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$width = $this->getHTMLUnitToUnits($width, 1, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCSSBorderDashStyle($style) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCSSBorderStyle($cssborder) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border['dash'] = $this->getCSSBorderDashStyle($style);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border['width'] = $this->getCSSBorderWidth($width);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getCSSPadding($csspadding, $width=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_padding['T'] = $this->getHTMLUnitToUnits($cell_padding['T'], $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_padding['R'] = $this->getHTMLUnitToUnits($cell_padding['R'], $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_padding['B'] = $this->getHTMLUnitToUnits($cell_padding['B'], $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_padding['L'] = $this->getHTMLUnitToUnits($cell_padding['L'], $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getCSSMargin($cssmargin, $width=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_margin['T'] = $this->getHTMLUnitToUnits(str_replace('auto', '0', $cell_margin['T']), $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_margin['R'] = $this->getHTMLUnitToUnits(str_replace('auto', '0', $cell_margin['R']), $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_margin['B'] = $this->getHTMLUnitToUnits(str_replace('auto', '0', $cell_margin['B']), $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$cell_margin['L'] = $this->getHTMLUnitToUnits(str_replace('auto', '0', $cell_margin['L']), $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getCSSBorderMargin($cssbspace, $width=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_spacing['H'] = $this->getHTMLUnitToUnits($border_spacing['H'], $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_spacing['V'] = $this->getHTMLUnitToUnits($border_spacing['V'], $width, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCSSFontSpacing($spacing, $parent=0) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$val = $this->getHTMLUnitToUnits($spacing, 0, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getCSSFontStretching($stretch, $parent=100) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$val = $this->getHTMLUnitToUnits($stretch, 100, '%', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getHtmlDomArray($html) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get CSS array defined at previous call
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get 'all' and 'print' media, other media types are discarded
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$cssdata = file_get_contents(trim($type[1]));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get 'all' and 'print' media, other media types are discarded
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get tag name
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get attributes
./phpmyadmin/libraries/tcpdf/tcpdf.php:						list($dom[$key]['csssel'], $dom[$key]['cssdata']) = $this->getCSSdataArray($dom, $key, $css);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$dom[$key]['attribute']['style'] = $this->getTagStyleFromCSSarray($dom[$key]['cssdata']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// get style attributes
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// --- get some style attributes ---
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['fontname'] = $this->getFontFamilyName($dom[$key]['style']['font-family']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['text-indent'] = $this->getHTMLUnitToUnits($dom[$key]['style']['text-indent']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$dom[$key]['fontsize'] = $this->getHTMLUnitToUnits($fsize, $dom[$parentkey]['fontsize'], 'pt', true);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['font-stretch'] = $this->getCSSFontStretching($dom[$key]['style']['font-stretch'], $dom[$parentkey]['font-stretch']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['letter-spacing'] = $this->getCSSFontSpacing($dom[$key]['style']['letter-spacing'], $dom[$parentkey]['letter-spacing']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$dom[$key]['line-height'] = $this->getHTMLUnitToUnits($lineheight, 1, '%', true);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$borderstyle = $this->getCSSBorderStyle($dom[$key]['style']['border']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['L']['width'] = $this->getCSSBorderWidth($brd_widths[3]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['R']['width'] = $this->getCSSBorderWidth($brd_widths[1]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['T']['width'] = $this->getCSSBorderWidth($brd_widths[0]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['B']['width'] = $this->getCSSBorderWidth($brd_widths[2]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['L']['dash'] = $this->getCSSBorderDashStyle($brd_styles[3]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['R']['dash'] = $this->getCSSBorderDashStyle($brd_styles[1]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['T']['dash'] = $this->getCSSBorderDashStyle($brd_styles[0]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border']['B']['dash'] = $this->getCSSBorderDashStyle($brd_styles[2]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$borderstyle = $this->getCSSBorderStyle($dom[$key]['style']['border-'.$bsv]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border'][$bsk]['width'] = $this->getCSSBorderWidth($dom[$key]['style']['border-'.$bsv.'-width']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['border'][$bsk]['dash'] = $this->getCSSBorderDashStyle($dom[$key]['style']['border-'.$bsv.'-style']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['padding'] = $this->getCSSPadding($dom[$key]['style']['padding']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['padding'][$psk] = $this->getHTMLUnitToUnits($dom[$key]['style']['padding-'.$psv], 0, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['margin'] = $this->getCSSMargin($dom[$key]['style']['margin']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dom[$key]['margin'][$psk] = $this->getHTMLUnitToUnits(str_replace('auto', '0', $dom[$key]['style']['margin-'.$psv]), 0, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['border-spacing'] = $this->getCSSBorderMargin($dom[$key]['style']['border-spacing']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$borderstyle = $this->getCSSBorderStyle($dom[$key]['attribute']['border'].' solid black');
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$dom[$key]['fontname'] = $this->getFontFamilyName($dom[$key]['attribute']['face']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$dom[$key]['stroke'] = $this->getHTMLUnitToUnits($dom[$key]['attribute']['stroke'], $dom[$key]['fontsize'], 'pt', true);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getSpaceString() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$curfontascent = $this->getFontAscent($curfontname, $curfontstyle, $curfontsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$curfontdescent = $this->getFontDescent($curfontname, $curfontstyle, $curfontsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$dom = $this->getHtmlDomArray($html);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$tmp_cellspacing = $this->getHTMLUnitToUnits($dom[$dom[$key]['parent']]['attribute']['cellspacing'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get image height
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$imgh = $this->getHTMLUnitToUnits($dom[$key]['height'], $this->lasth, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$imgw = $this->getHTMLUnitToUnits($dom[$key]['width'], 1, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$pagebuff = $this->getPageBuffer($startlinepage);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$tend = substr($this->getPageBuffer($startlinepage), $curpos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$pagebuff = $this->getPageBuffer($this->page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$fontascent = $this->getFontAscent($fontname, $fontstyle, $fontsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$fontdescent = $this->getFontDescent($fontname, $fontstyle, $fontsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$pagebuff = $this->getPageBuffer($startlinepage);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$tend = substr($this->getPageBuffer($startlinepage), $curpos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$pagebuff = $this->getPageBuffer($this->page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get current position on page buffer
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$pstart = substr($this->getPageBuffer($startlinepage), 0, $startlinepos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$pmid = substr($this->getPageBuffer($startlinepage), $startlinepos, ($midpos - $startlinepos));
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$pend = substr($this->getPageBuffer($startlinepage), $midpos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$pmid = substr($this->getPageBuffer($startlinepage), $startlinepos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$spacestr = $this->getSpaceString();
./phpmyadmin/libraries/tcpdf/tcpdf.php:											// get current X position
./phpmyadmin/libraries/tcpdf/tcpdf.php:											// get current X position
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get text indentation (if any)
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// get cell spacing
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$clsp = $this->getHTMLUnitToUnits($dom[$key]['attribute']['cellspacing'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$table_width = $this->getHTMLUnitToUnits($dom[$key]['width'], $wtmp, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$crclpd = $this->getHTMLUnitToUnits($dom[($dom[$trid]['parent'])]['attribute']['cellpadding'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$cellh = $this->getHTMLUnitToUnits($dom[$key]['height'], 0, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$cellw = $this->getHTMLUnitToUnits($dom[$parentid]['width'], $table_columns_width, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$pfontascent = $this->getFontAscent($pfontname, $pfontstyle, $pfontsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$pfontdescent = $this->getFontDescent($pfontname, $pfontstyle, $pfontsize);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// ****** write only until the end of the line and get the rest ******
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$pstart = substr($this->getPageBuffer($startlinepage), 0, $startlinepos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pmid = substr($this->getPageBuffer($startlinepage), $startlinepos, ($midpos - $startlinepos));
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pend = substr($this->getPageBuffer($startlinepage), $midpos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pmid = substr($this->getPageBuffer($startlinepage), $startlinepos);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pad = $this->getHTMLUnitToUnits($tag['attribute']['cellpadding'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$cs = $this->getHTMLUnitToUnits($tag['attribute']['cellspacing'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$hrHeight = $this->getHTMLUnitToUnits($tag['height'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$hrWidth = $this->getHTMLUnitToUnits($tag['width'], $wtmp, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$type = $this->getImageFileType($tag['attribute']['src']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$iw = $this->getHTMLUnitToUnits($tag['width'], 1, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$ih = $this->getHTMLUnitToUnits($tag['height'], 1, 'px', false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						if ($this->form_mode == 'get') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$jsaction = 'var f=this.getField(\''.$name.'\'); f.browseForFileToSubmit();';
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$dom[$key]['borderposition'] = $this->getBorderStartPosition();
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->y += $this->getHTMLUnitToUnits($dom[$table_el]['attribute']['cellspacing'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$border = array('LTRB' => array('width' => $this->getCSSBorderWidth($table_el['attribute']['border']), 'cap'=>'square', 'join'=>'miter', 'dash'=> 0, 'color'=>array(0,0,0)));
./phpmyadmin/libraries/tcpdf/tcpdf.php:						// get border modes
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$border_start = $this->getBorderMode($border, $position='start');
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$border_end = $this->getBorderMode($border, $position='end');
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$border_middle = $this->getBorderMode($border, $position='middle');
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:									$pagebuff = $this->getPageBuffer($this->page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$this->y += $this->getHTMLUnitToUnits($table_el['attribute']['cellspacing'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:							$pagediff = substr($this->getPageBuffer($this->numpages), $this->emptypagemrk[$this->numpages], $plendiff);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getBorderStartPosition() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get border style
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$border = $this->getBorderMode($border, $position='middle');
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get background color
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$clsp = $this->getHTMLUnitToUnits($tag['attribute']['cellspacing'], 1, 'px');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get latest column
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get border modes
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_start = $this->getBorderMode($border, $position='start');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_end = $this->getBorderMode($border, $position='end');
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$border_middle = $this->getBorderMode($border, $position='middle');
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$ccode .= $this->getCellCode($w, $h, '', $cborder, 1, '', $fill, '', 0, true)."\n";
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pagebuff = $this->getPageBuffer($this->page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getHTMLUnitToUnits($htmlval, $refsize=1, $defaultunit='px', $points=false) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getGraphicVars() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getObjFilename($name) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		return file_get_contents($filename);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->buffer = $this->getObjFilename('buffer');
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->buffer = $this->getObjFilename('buffer');
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getBuffer() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->pages[$page] = $this->getObjFilename('page'.$page);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getPageBuffer($page) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->images[$image] = $this->getObjFilename('image'.$image);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$tmpimg = $this->getImageBuffer($image);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getImageBuffer($image) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->fonts[$font] = $this->getObjFilename('font');
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$tmpfont = $this->getFontBuffer($font);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getFontBuffer($font) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$tmppage = $this->getPageBuffer($frompage);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$this->setPageBuffer($i, $this->getPageBuffer($j));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$this->setPageBuffer($i, $this->getPageBuffer($j));
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->setPageBuffer($this->page, $this->getPageBuffer($page));
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$page_first = $this->getPage();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$page_last = $this->getPage();
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get page data
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$temppage = $this->getPageBuffer($p);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get page number aliases
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pnalias = $this->getInternalPageNumberAliases($a);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$page_first = $this->getPage();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get the font type used for numbers in each template
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$dom = $this->getHtmlDomArray($html);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get HTML template
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$page_last = $this->getPage();
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get page data
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$temppage = $this->getPageBuffer($p);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					// get page number aliases
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$pnalias = $this->getInternalPageNumberAliases($a);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$objvars = get_object_vars($this->objcopy);
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @param $col (int) column number (from 0 to getNumberOfColumns()-1); empty string = current column.
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getColumn() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getNumberOfColumns() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getHyphenPatternsFromTEX($file) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$data = file_get_contents($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$patterns = $this->getHyphenPatternsFromTEX($patterns);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get array of characters
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getPathPaintOperator($style, $default='S') {
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$op = $this->getPathPaintOperator($default, '');
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontSubsetting() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontFamilyName($fontfamily) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$this->xobjects[$this->xobjid]['gvars'] = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$coordlt = $this->getTransformationMatrixProduct($tm, array(1, 0, 0, 1, ($annot['x'] * $this->k), (-$annot['y'] * $this->k)));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$coordrb = $this->getTransformationMatrixProduct($tm, array(1, 0, 0, 1, (($annot['x'] + $annot['w']) * $this->k), ((-$annot['y'] - $annot['h']) * $this->k)));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontStretching() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getFontSpacing() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	public function getPageRegions() {
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see addPageRegion(), getPageRegions()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see setPageRegions(), getPageRegions()
./phpmyadmin/libraries/tcpdf/tcpdf.php:	 * @see setPageRegions(), getPageRegions()
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$svgdata = file_get_contents($file);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get original image width and height
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$ox = $this->getHTMLUnitToUnits($tmp[1], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$oy = $this->getHTMLUnitToUnits($tmp[1], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$ow = $this->getHTMLUnitToUnits($tmp[1], 1, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$oh = $this->getHTMLUnitToUnits($tmp[1], 1, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:						$view_box[$key] = $this->getHTMLUnitToUnits($val, 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get aspect ratio
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$gvars = $this->getGraphicVars();
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$page_break_margin = $this->getBreakMargin();
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$error_message = sprintf('SVG Error: %s at line %d', xml_error_string(xml_get_error_code($this->parser)), xml_get_current_line_number($this->parser));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getSVGTransformMatrix($attribute) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$tm = $this->getTransformationMatrixProduct($tm, array($a, $b, $c, $d, $e, $f));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getTransformationMatrixProduct($ta, $tb) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$e = $this->getHTMLUnitToUnits($tm[4], 1, $this->svgunit, false) * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$f = -$this->getHTMLUnitToUnits($tm[5], 1, $this->svgunit, false) * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$top = (isset($regs[1])?$this->getHTMLUnitToUnits($regs[1], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$right = (isset($regs[2])?$this->getHTMLUnitToUnits($regs[2], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$bottom = (isset($regs[3])?$this->getHTMLUnitToUnits($regs[3], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$left = (isset($regs[4])?$this->getHTMLUnitToUnits($regs[4], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$gradient['coords'][0] = $this->getHTMLUnitToUnits($gradient['coords'][0], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$gradient['coords'][1] = $this->getHTMLUnitToUnits($gradient['coords'][1], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$gradient['coords'][2] = $this->getHTMLUnitToUnits($gradient['coords'][2], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$gradient['coords'][3] = $this->getHTMLUnitToUnits($gradient['coords'][3], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$gradient['coords'][4] = $this->getHTMLUnitToUnits($gradient['coords'][4], 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				'width' => $this->getHTMLUnitToUnits($svgstyle['stroke-width'], 0, $this->svgunit, false),
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$font_family = $this->getFontFamilyName($regs[1]);
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$font_family = $this->getFontFamilyName($svgstyle['font-family']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$font_size = $this->getHTMLUnitToUnits($font_size, $prevsvgstyle['font-size'], $this->svgunit, false) * $this->k;
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$font_stretch = $this->getCSSFontStretching($font_stretch, $svgstyle['font-stretch']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$font_spacing = $this->getCSSFontSpacing($font_spacing, $svgstyle['letter-spacing']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:		$op = $this->getPathPaintOperator($style, '');
./phpmyadmin/libraries/tcpdf/tcpdf.php:			// get curve type
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// get curve parameters
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$params[$ck] = $this->getHTMLUnitToUnits($cp, 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:								// get angles
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$angs = $this->getVectorsAngle(1, 0, (($xa - $cax) / $rx), (($cay - $ya) / $ry));
./phpmyadmin/libraries/tcpdf/tcpdf.php:								$dang = $this->getVectorsAngle((($xa - $cax) / $rx), (($ya - $cay) / $ry), ((-$xa - $cax) / $rx), ((-$ya - $cay) / $ry));
./phpmyadmin/libraries/tcpdf/tcpdf.php:	protected function getVectorsAngle($x1, $y1, $x2, $y2) {
./phpmyadmin/libraries/tcpdf/tcpdf.php:		// get styling properties
./phpmyadmin/libraries/tcpdf/tcpdf.php:			$tm = $this->getTransformationMatrixProduct($tm, $this->getSVGTransformMatrix($attribs['transform']));
./phpmyadmin/libraries/tcpdf/tcpdf.php:				// group together related graphics elements
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->svggradients[$this->svggradientid]['gradientTransform'] = $this->getSVGTransformMatrix($attribs['gradientTransform']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->svggradients[$this->svggradientid]['gradientTransform'] = $this->getSVGTransformMatrix($attribs['gradientTransform']);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$x = (isset($attribs['x'])?$this->getHTMLUnitToUnits($attribs['x'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$y = (isset($attribs['y'])?$this->getHTMLUnitToUnits($attribs['y'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$w = (isset($attribs['width'])?$this->getHTMLUnitToUnits($attribs['width'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$h = (isset($attribs['height'])?$this->getHTMLUnitToUnits($attribs['height'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$rx = (isset($attribs['rx'])?$this->getHTMLUnitToUnits($attribs['rx'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$ry = (isset($attribs['ry'])?$this->getHTMLUnitToUnits($attribs['ry'], 0, $this->svgunit, false):$rx);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$cx = (isset($attribs['cx'])?$this->getHTMLUnitToUnits($attribs['cx'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$cy = (isset($attribs['cy'])?$this->getHTMLUnitToUnits($attribs['cy'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$r = (isset($attribs['r'])?$this->getHTMLUnitToUnits($attribs['r'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$cx = (isset($attribs['cx'])?$this->getHTMLUnitToUnits($attribs['cx'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$cy = (isset($attribs['cy'])?$this->getHTMLUnitToUnits($attribs['cy'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$rx = (isset($attribs['rx'])?$this->getHTMLUnitToUnits($attribs['rx'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$ry = (isset($attribs['ry'])?$this->getHTMLUnitToUnits($attribs['ry'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$x1 = (isset($attribs['x1'])?$this->getHTMLUnitToUnits($attribs['x1'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$y1 = (isset($attribs['y1'])?$this->getHTMLUnitToUnits($attribs['y1'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$x2 = (isset($attribs['x2'])?$this->getHTMLUnitToUnits($attribs['x2'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$y2 = (isset($attribs['y2'])?$this->getHTMLUnitToUnits($attribs['y2'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$p[$key] = $this->getHTMLUnitToUnits($val, 0, $this->svgunit, false);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$x = (isset($attribs['x'])?$this->getHTMLUnitToUnits($attribs['x'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$y = (isset($attribs['y'])?$this->getHTMLUnitToUnits($attribs['y'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$w = (isset($attribs['width'])?$this->getHTMLUnitToUnits($attribs['width'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$h = (isset($attribs['height'])?$this->getHTMLUnitToUnits($attribs['height'], 0, $this->svgunit, false):0);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$x = (isset($attribs['x'])?$this->getHTMLUnitToUnits($attribs['x'], 0, $this->svgunit, false):$this->x);
./phpmyadmin/libraries/tcpdf/tcpdf.php:				$y = (isset($attribs['y'])?$this->getHTMLUnitToUnits($attribs['y'], 0, $this->svgunit, false):$this->y);
./phpmyadmin/libraries/tcpdf/tcpdf.php:					$this->svgtextmode['stroke'] = $this->getHTMLUnitToUnits($svgstyle['stroke-width'], 0, $this->svgunit, false);
./phpmyadmin/libraries/Theme.class.php: * @todo make all components optional - get missing components from 'parent' theme
./phpmyadmin/libraries/Theme.class.php:        if (! file_exists($this->getPath() . '/info.inc.php')) {
./phpmyadmin/libraries/Theme.class.php:        if ($this->mtime_info === filemtime($this->getPath() . '/info.inc.php')) {
./phpmyadmin/libraries/Theme.class.php:        @include $this->getPath() . '/info.inc.php';
./phpmyadmin/libraries/Theme.class.php:        $this->mtime_info = filemtime($this->getPath() . '/info.inc.php');
./phpmyadmin/libraries/Theme.class.php:        $this->filesize_info = filesize($this->getPath() . '/info.inc.php');
./phpmyadmin/libraries/Theme.class.php:        if (is_dir($this->getPath() . '/img/')) {
./phpmyadmin/libraries/Theme.class.php:            $this->setImgPath($this->getPath() . '/img/');
./phpmyadmin/libraries/Theme.class.php:                sprintf(__('No valid image path for theme %s found!'), $this->getName()),
./phpmyadmin/libraries/Theme.class.php:    function getPath()
./phpmyadmin/libraries/Theme.class.php:    function getLayoutFile()
./phpmyadmin/libraries/Theme.class.php:        return $this->getPath() . '/layout.inc.php';
./phpmyadmin/libraries/Theme.class.php:    function getVersion()
./phpmyadmin/libraries/Theme.class.php:        return version_compare($this->getVersion(), $version, 'lt');
./phpmyadmin/libraries/Theme.class.php:    function getName()
./phpmyadmin/libraries/Theme.class.php:    function getId()
./phpmyadmin/libraries/Theme.class.php:    function getImgPath()
./phpmyadmin/libraries/Theme.class.php:        $_css_file = $this->getPath()
./phpmyadmin/libraries/Theme.class.php:            $_sprites_data_file = $this->getPath() . '/sprites.lib.php';
./phpmyadmin/libraries/Theme.class.php:        echo '<h2>' . htmlspecialchars($this->getName())
./phpmyadmin/libraries/Theme.class.php:            .' (' . htmlspecialchars($this->getVersion()) . ')</h2>';
./phpmyadmin/libraries/Theme.class.php:        echo '<a target="_top" class="take_theme" '
./phpmyadmin/libraries/Theme.class.php:            .'name="' . htmlspecialchars($this->getId()) . '" '
./phpmyadmin/libraries/Theme.class.php:                'set_theme' => $this->getId()
./phpmyadmin/libraries/Theme.class.php:        if (@file_exists($this->getPath() . '/screen.png')) {
./phpmyadmin/libraries/Theme.class.php:            echo '<img src="' . $this->getPath() . '/screen.png" border="1"'
./phpmyadmin/libraries/Theme.class.php:                .' alt="' . htmlspecialchars($this->getName()) . '"'
./phpmyadmin/libraries/Theme.class.php:                .' title="' . htmlspecialchars($this->getName()) . '" /><br />';
./phpmyadmin/libraries/Theme.class.php:    function getCssIEClearFilter() {
./phpmyadmin/libraries/Theme.class.php:    function getCssGradient($start_color, $end_color)
./phpmyadmin/libraries/Theme.class.php:    function getCssCodeMirror()
./phpmyadmin/libraries/export/texytext.php:        // If required, get fields name at the first line
./phpmyadmin/libraries/export/texytext.php:        $keys        = PMA_DBI_get_table_indexes($db, $table);
./phpmyadmin/libraries/export/texytext.php:            $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/libraries/export/texytext.php:            $comments = PMA_getComments($db, $table);
./phpmyadmin/libraries/export/texytext.php:            $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/libraries/export/texytext.php:        $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/export/mediawiki.php:        $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/export/xml.php:                    $triggers = PMA_DBI_get_triggers($db, $table);
./phpmyadmin/libraries/export/xml.php:                $functions = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');
./phpmyadmin/libraries/export/xml.php:                        $sql = PMA_DBI_get_definition($db, 'FUNCTION', $function);
./phpmyadmin/libraries/export/xml.php:                $procedures = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');
./phpmyadmin/libraries/export/xml.php:                        $sql = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure);
./phpmyadmin/libraries/export/xml.php:    } // end of the 'PMA_getTableXML()' function
./phpmyadmin/libraries/export/csv.php:        // If required, get fields name at the first line
./phpmyadmin/libraries/export/csv.php:    } // end of the 'PMA_getTableCsv()' function
./phpmyadmin/libraries/export/odt.php:        $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/libraries/export/odt.php:        // If required, get fields name at the first line
./phpmyadmin/libraries/export/odt.php:        $keys        = PMA_DBI_get_table_indexes($db, $table);
./phpmyadmin/libraries/export/odt.php:            $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/libraries/export/odt.php:            $comments = PMA_getComments($db, $table);
./phpmyadmin/libraries/export/odt.php:            $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/libraries/export/odt.php:        $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/export/latex.php:    } // end getTableLaTeX
./phpmyadmin/libraries/export/latex.php:        $keys        = PMA_DBI_get_table_indexes($db, $table);
./phpmyadmin/libraries/export/latex.php:            $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/libraries/export/latex.php:            $comments = PMA_getComments($db, $table);
./phpmyadmin/libraries/export/latex.php:            $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/libraries/export/latex.php:        $fields = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/export/pdf.php:                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;
./phpmyadmin/libraries/export/pdf.php:                // get the height we were in the last used page
./phpmyadmin/libraries/export/pdf.php:            $this->fields = PMA_DBI_get_fields_meta($this->results);
./phpmyadmin/libraries/export/pdf.php:                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;
./phpmyadmin/libraries/export/pdf.php:                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;
./phpmyadmin/libraries/export/pdf.php:        if (!PMA_exportOutputHandler($pdf->getPDFData())) {
./phpmyadmin/libraries/export/codegen.php: * This gets executed twice so avoid a notice
./phpmyadmin/libraries/export/codegen.php:        function getPureType()
./phpmyadmin/libraries/export/codegen.php:        function getDotNetPrimitiveType()
./phpmyadmin/libraries/export/codegen.php:        function getDotNetObjectType()
./phpmyadmin/libraries/export/codegen.php:        function getIndexName()
./phpmyadmin/libraries/export/codegen.php:            $text=str_replace("#indexName#", $this->getIndexName(), $text);
./phpmyadmin/libraries/export/codegen.php:            $text=str_replace("#dotNetPrimitiveType#", $this->getDotNetPrimitiveType(), $text);
./phpmyadmin/libraries/export/codegen.php:            $text=str_replace("#dotNetObjectType#", $this->getDotNetObjectType(), $text);
./phpmyadmin/libraries/export/codegen.php:            $text=str_replace("#type#", $this->getPureType(), $text);
./phpmyadmin/libraries/export/codegen.php:                    . '            get {return _#name#;}' . "\n"
./phpmyadmin/libraries/export/sql.php:        $compats = PMA_DBI_getCompatibilities();
./phpmyadmin/libraries/export/sql.php:        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');
./phpmyadmin/libraries/export/sql.php:        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');
./phpmyadmin/libraries/export/sql.php:                $text .= PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name)
./phpmyadmin/libraries/export/sql.php:                $text .= PMA_DBI_get_definition($db, 'FUNCTION', $function_name)
./phpmyadmin/libraries/export/sql.php:        $collation = PMA_getDbCollation($db);
./phpmyadmin/libraries/export/sql.php:                    $text .= PMA_DBI_get_definition($db, 'EVENT', $event_name) . $delimiter . $crlf . $crlf;
./phpmyadmin/libraries/export/sql.php:    function PMA_getTableDefStandIn($db, $view, $crlf) {
./phpmyadmin/libraries/export/sql.php:        $columns = PMA_DBI_get_columns_full($db, $view);
./phpmyadmin/libraries/export/sql.php:    function PMA_getTableDef($db, $table, $crlf, $error_url, $show_dates = false, $add_semicolon = true, $view = false)
./phpmyadmin/libraries/export/sql.php:        $tmp_error = PMA_DBI_getError();
./phpmyadmin/libraries/export/sql.php:    } // end of the 'PMA_getTableDef()' function
./phpmyadmin/libraries/export/sql.php:    function PMA_getTableComments($db, $table, $crlf, $do_relation = false, $do_mime = false)
./phpmyadmin/libraries/export/sql.php:            $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/libraries/export/sql.php:            if (!($mime_map = PMA_getMIME($db, $table, true))) {
./phpmyadmin/libraries/export/sql.php:    } // end of the 'PMA_getTableComments()' function
./phpmyadmin/libraries/export/sql.php:                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates);
./phpmyadmin/libraries/export/sql.php:                $dump .= PMA_getTableComments($db, $table, $crlf, $relation, $mime);
./phpmyadmin/libraries/export/sql.php:                $triggers = PMA_DBI_get_triggers($db, $table);
./phpmyadmin/libraries/export/sql.php:                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates, true, true);
./phpmyadmin/libraries/export/sql.php:                $dump .= PMA_getTableDefStandIn($db, $table, $crlf);
./phpmyadmin/libraries/export/sql.php:        // this one is built by PMA_getTableDef() to use in table copy/move
./phpmyadmin/libraries/export/sql.php:        // analyze the query to get the true column names, not the aliases
./phpmyadmin/libraries/export/sql.php:        //  are used, we did not get the true column name in case of aliases)
./phpmyadmin/libraries/export/sql.php:        $tmp_error = PMA_DBI_getError();
./phpmyadmin/libraries/export/sql.php:            $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/libraries/export/sql.php:                    list($tmp_unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $row);
./phpmyadmin/libraries/export/ods.php:        $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/libraries/export/ods.php:        // If required, get fields name at the first line
./phpmyadmin/libraries/export/htmlword.php:        // If required, get fields name at the first line
./phpmyadmin/libraries/export/htmlword.php:        $keys        = PMA_DBI_get_table_indexes($db, $table);
./phpmyadmin/libraries/export/htmlword.php:            $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/libraries/export/htmlword.php:            $comments = PMA_getComments($db, $table);
./phpmyadmin/libraries/export/htmlword.php:            $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/libraries/export/htmlword.php:        $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/libraries/gis/pma_gis_multipoint.php:        $result = $this->getBoundsForOl($srid, $scale_data);
./phpmyadmin/libraries/gis/pma_gis_multipoint.php:                    . '"), map.getProjectionObject()), ';
./phpmyadmin/libraries/gis/pma_gis_multipoint.php:    public function getShape($row_data)
./phpmyadmin/libraries/gis/pma_gis_multilinestring.php:        $row = $this->getBoundsForOl($srid, $scale_data);
./phpmyadmin/libraries/gis/pma_gis_multilinestring.php:                    . $srid . '"), map.getProjectionObject()), ';
./phpmyadmin/libraries/gis/pma_gis_multilinestring.php:    public function getShape($row_data)
./phpmyadmin/libraries/gis/pma_gis_linestring.php:        $result = $this->getBoundsForOl($srid, $scale_data);
./phpmyadmin/libraries/gis/pma_gis_linestring.php:                . $srid . '"), map.getProjectionObject()), ';
./phpmyadmin/libraries/gis/pma_gis_point.php:        $result = $this->getBoundsForOl($srid, $scale_data);
./phpmyadmin/libraries/gis/pma_gis_point.php:                . $srid . '"), map.getProjectionObject())), null, '
./phpmyadmin/libraries/gis/pma_gis_point.php:    public function getShape($row_data)
./phpmyadmin/libraries/gis/pma_gis_visualization.php:    public function getSettings()
./phpmyadmin/libraries/gis/pma_gis_visualization.php:        // get the substring where the extension would be if it was included
./phpmyadmin/libraries/gis/pma_gis_visualization.php:        $output = ob_get_contents();
./phpmyadmin/libraries/gis/pma_gis_visualization.php:            . 'if (map.getZoom() < 2) {'
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:        // Split the geometry collection object to get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:        // Split the geometry collection object to get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:        // Split the geometry collection object to get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:        // Split the geometry collection object to get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:        // Split the geometry collection object to get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:     * Split the GEOMETRYCOLLECTION object and get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometrycollection.php:        // Split the geometry collection object to get its constituents.
./phpmyadmin/libraries/gis/pma_gis_geometry.php:    protected function getBoundsForOl($srid, $scale_data)
./phpmyadmin/libraries/gis/pma_gis_geometry.php:            . $srid . '"), map.getProjectionObject())); bound.extend(new OpenLayers.LonLat('
./phpmyadmin/libraries/gis/pma_gis_geometry.php:            . $srid . '"), map.getProjectionObject()));';
./phpmyadmin/libraries/gis/pma_gis_geometry.php:                    . $srid . '"), map.getProjectionObject()), ';
./phpmyadmin/libraries/gis/pma_gis_geometry.php:                        . $srid . '"), map.getProjectionObject()), ';
./phpmyadmin/libraries/gis/pma_gis_polygon.php:        $row = $this->getBoundsForOl($srid, $scale_data);
./phpmyadmin/libraries/gis/pma_gis_polygon.php:    public static function getPointOnSurface($ring)
./phpmyadmin/libraries/gis/pma_gis_multipolygon.php:        $row = $this->getBoundsForOl($srid, $scale_data);
./phpmyadmin/libraries/gis/pma_gis_multipolygon.php:    public function getShape($row_data)
./phpmyadmin/libraries/gis/pma_gis_multipolygon.php:        // If it's an inner ring get a point on the surface which can be used to
./phpmyadmin/libraries/gis/pma_gis_multipolygon.php:                    = PMA_GIS_Polygon::getPointOnSurface($ring['points']);
./phpmyadmin/libraries/display_export.lib.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/display_export.lib.php:$export_list = PMA_getPlugins('./libraries/export/', array('export_type' => $export_type, 'single_table' => isset($single_table)));
./phpmyadmin/libraries/display_export.lib.php:        <?php echo PMA_getImage('b_export.png', __('Export')); ?>
./phpmyadmin/libraries/display_export.lib.php:                    $message->addParam('<a href="' . PMA_linkURL(PMA_getPHPDocLink('function.strftime.php')). '" target="documentation" title="'
./phpmyadmin/libraries/display_export.lib.php:                    $message->addParam('<a href="Documentation.html#faq6_27" target="documentation">', false);
./phpmyadmin/libraries/display_export.lib.php:                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(
./phpmyadmin/libraries/display_export.lib.php:                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(
./phpmyadmin/libraries/display_export.lib.php:                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(
./phpmyadmin/libraries/Partition.class.php:    static public function getPartitionNames($db, $table)
./phpmyadmin/libraries/ip_allow_deny.lib.php:function PMA_getIp()
./phpmyadmin/libraries/ip_allow_deny.lib.php:        $trusted_header_value = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
./phpmyadmin/libraries/ip_allow_deny.lib.php:} // end of the 'PMA_getIp()' function
./phpmyadmin/libraries/ip_allow_deny.lib.php: * @see     PMA_getIp()
./phpmyadmin/libraries/ip_allow_deny.lib.php:    $remote_ip = PMA_getIp();
./phpmyadmin/libraries/ip_allow_deny.lib.php:    if (PMA_getenv('SERVER_ADDR')) {
./phpmyadmin/libraries/ip_allow_deny.lib.php:        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
./phpmyadmin/libraries/ip_allow_deny.lib.php:        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
./phpmyadmin/libraries/ip_allow_deny.lib.php:        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
./phpmyadmin/libraries/plugin_interface.lib.php: * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param)
./phpmyadmin/libraries/plugin_interface.lib.php:function PMA_getPlugins($plugins_dir, $plugin_param)
./phpmyadmin/libraries/plugin_interface.lib.php: * string PMA_getString(string $name)
./phpmyadmin/libraries/plugin_interface.lib.php:function PMA_getString($name)
./phpmyadmin/libraries/plugin_interface.lib.php:         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";
./phpmyadmin/libraries/plugin_interface.lib.php:                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '
./phpmyadmin/libraries/plugin_interface.lib.php:                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '
./phpmyadmin/libraries/plugin_interface.lib.php:            . PMA_getString($opt['text']) . '</label>';
./phpmyadmin/libraries/plugin_interface.lib.php:            . PMA_getString($opt['text']) . '</label>';
./phpmyadmin/libraries/plugin_interface.lib.php:        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';
./phpmyadmin/libraries/plugin_interface.lib.php:            . PMA_getString($opt['text']) . '</label>';
./phpmyadmin/libraries/plugin_interface.lib.php:            $ret .= '>' . PMA_getString($val) . '</option>';
./phpmyadmin/libraries/plugin_interface.lib.php:            . PMA_getString($val) . '</label></li>';
./phpmyadmin/libraries/plugin_interface.lib.php:            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';
./phpmyadmin/libraries/plugin_interface.lib.php:            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';
./phpmyadmin/libraries/Index.class.php:                PMA_Index::$_registry[$schema][$table][$index->getName()] = $index;
./phpmyadmin/libraries/Index.class.php:    static public function getFromTable($table, $schema)
./phpmyadmin/libraries/Index.class.php:    static public function getPrimary($table, $schema)
./phpmyadmin/libraries/Index.class.php:        $_raw_indexes = PMA_DBI_get_table_indexes($schema, $table);
./phpmyadmin/libraries/Index.class.php:    public function getColumnCount()
./phpmyadmin/libraries/Index.class.php:    public function getComment()
./phpmyadmin/libraries/Index.class.php:    public function getRemarks()
./phpmyadmin/libraries/Index.class.php:    public function getComments()
./phpmyadmin/libraries/Index.class.php:        $comments = $this->getRemarks();
./phpmyadmin/libraries/Index.class.php:        $comments .= $this->getComment();
./phpmyadmin/libraries/Index.class.php:    public function getType()
./phpmyadmin/libraries/Index.class.php:    public function getChoice()
./phpmyadmin/libraries/Index.class.php:    static public function getIndexChoices()
./phpmyadmin/libraries/Index.class.php:        foreach (PMA_Index::getIndexChoices() as $each_index_choice) {
./phpmyadmin/libraries/Index.class.php:             && PMA_Index::getPrimary($this->_table, $this->_schema)) {
./phpmyadmin/libraries/Index.class.php:    public function getPacked()
./phpmyadmin/libraries/Index.class.php:    public function getNonUnique()
./phpmyadmin/libraries/Index.class.php:    public function getName()
./phpmyadmin/libraries/Index.class.php:    public function getColumns()
./phpmyadmin/libraries/Index.class.php:    static public function getView($table, $schema, $print_mode = false)
./phpmyadmin/libraries/Index.class.php:        $indexes = PMA_Index::getFromTable($table, $schema);
./phpmyadmin/libraries/Index.class.php:        $no_indexes .= PMA_Message::notice(__('No index defined!'))->getDisplay();
./phpmyadmin/libraries/Index.class.php:            $row_span = ' rowspan="' . $index->getColumnCount() . '" ';
./phpmyadmin/libraries/Index.class.php:                $this_params['index'] = $index->getName();
./phpmyadmin/libraries/Index.class.php:                   . '">' . PMA_getIcon('b_edit.png', __('Edit')) . '</a>'
./phpmyadmin/libraries/Index.class.php:                if ($index->getName() == 'PRIMARY') {
./phpmyadmin/libraries/Index.class.php:                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP INDEX ' . PMA_backquote($index->getName());
./phpmyadmin/libraries/Index.class.php:                    $this_params['message_to_show'] = sprintf(__('Index %s has been dropped'), $index->getName());
./phpmyadmin/libraries/Index.class.php:                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP INDEX ' . $index->getName());
./phpmyadmin/libraries/Index.class.php:                   . PMA_getIcon('b_drop.png', __('Drop'))  . '</a>'
./phpmyadmin/libraries/Index.class.php:            $r .= '<th ' . $row_span . '>' . htmlspecialchars($index->getName()) . '</th>';
./phpmyadmin/libraries/Index.class.php:            $r .= '<td ' . $row_span . '>' . htmlspecialchars($index->getType()) . '</td>';
./phpmyadmin/libraries/Index.class.php:            foreach ($index->getColumns() as $column) {
./phpmyadmin/libraries/Index.class.php:                if ($column->getSeqInIndex() > 1) {
./phpmyadmin/libraries/Index.class.php:                $r .= '<td>' . htmlspecialchars($column->getName());
./phpmyadmin/libraries/Index.class.php:                if ($column->getSubPart()) {
./phpmyadmin/libraries/Index.class.php:                    $r .= ' (' . $column->getSubPart() . ')';
./phpmyadmin/libraries/Index.class.php:                $r .= '<td>' . htmlspecialchars($column->getCardinality()) . '</td>';
./phpmyadmin/libraries/Index.class.php:                $r .= '<td>' . htmlspecialchars($column->getCollation()) . '</td>';
./phpmyadmin/libraries/Index.class.php:                $r .= '<td>' . htmlspecialchars($column->getNull(true)) . '</td>';
./phpmyadmin/libraries/Index.class.php:                if ($column->getSeqInIndex() == 1) {
./phpmyadmin/libraries/Index.class.php:                        . htmlspecialchars($index->getComments()) . '</td>';
./phpmyadmin/libraries/Index.class.php:    public function getCompareData()
./phpmyadmin/libraries/Index.class.php:            $data['columns'][] = $column->getCompareData();
./phpmyadmin/libraries/Index.class.php:        $indexes = PMA_Index::getFromTable($table, $schema);
./phpmyadmin/libraries/Index.class.php:                if ($each_index->getCompareData() !== $while_index->getCompareData()) {
./phpmyadmin/libraries/Index.class.php:                $message->addParam($each_index->getName());
./phpmyadmin/libraries/Index.class.php:                $message->addParam($while_index->getName());
./phpmyadmin/libraries/Index.class.php:                $output .= $message->getDisplay();
./phpmyadmin/libraries/Index.class.php:    public function getName()
./phpmyadmin/libraries/Index.class.php:    public function getCollation()
./phpmyadmin/libraries/Index.class.php:    public function getCardinality()
./phpmyadmin/libraries/Index.class.php:    public function getNull($as_text = false)
./phpmyadmin/libraries/Index.class.php:    public function getSeqInIndex()
./phpmyadmin/libraries/Index.class.php:    public function getSubPart()
./phpmyadmin/libraries/Index.class.php:    public function getCompareData()
./phpmyadmin/libraries/display_create_database.lib.php:                 . ($cfg['ErrorIconic'] ? PMA_getImage('s_error2.png', '', array('hspace' => 2, 'border' => 0, 'align' => 'middle')) : '')
./phpmyadmin/libraries/footer.inc.php:if (PMA_getenv('SCRIPT_NAME') && empty($_POST) && !$GLOBALS['checked_special'] && ! $GLOBALS['is_ajax_request']) {
./phpmyadmin/libraries/footer.inc.php:    $url_params['target'] = basename(PMA_getenv('SCRIPT_NAME'));
./phpmyadmin/libraries/footer.inc.php:        . ' title="' . __('Open new phpMyAdmin window') . '" target="_blank">';
./phpmyadmin/libraries/footer.inc.php:        echo PMA_getImage('window-new.png', __('Open new phpMyAdmin window'));
./phpmyadmin/libraries/display_import.lib.php:$import_list = PMA_getPlugins('./libraries/import/', $import_type);
./phpmyadmin/libraries/display_import.lib.php:                    new $.getJSON(
./phpmyadmin/libraries/display_import.lib.php:                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');
./phpmyadmin/libraries/display_import.lib.php:            <?php echo PMA_getImage('b_import.png', __('Import')); ?>
./phpmyadmin/libraries/zip_extension.lib.php:function PMA_getZipContents($file, $specific_entry = null)
./phpmyadmin/libraries/zip_extension.lib.php:                            $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);
./phpmyadmin/libraries/zip_extension.lib.php:        $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);
./phpmyadmin/libraries/zip_extension.lib.php:function PMA_getNoOfFilesInZip($file)
./phpmyadmin/libraries/zip_extension.lib.php:function PMA_getZipError($code)
./phpmyadmin/libraries/select_server.lib.php:        echo '<form method="post" action="index.php" target="_parent">';
./phpmyadmin/libraries/select_server.lib.php:                    . '" target="_top">' . htmlspecialchars($label) . '</a>';
./phpmyadmin/libraries/PMA.php:    public function __get($param)
./phpmyadmin/libraries/PMA.php:                return $this->getDatabaseList();
./phpmyadmin/libraries/PMA.php:    public function getDatabaseList()
./phpmyadmin/libraries/sqlparser.data.php:   'GET_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_get_format'),
./phpmyadmin/libraries/sqlparser.data.php:   'GET_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_get_lock'),
./phpmyadmin/libraries/gis_visualization.lib.php:            foreach ($visualization->getSettings() as $setting => $val) {
./phpmyadmin/libraries/ob.lib.php:        if (ini_get('output_handler') == 'ob_gzhandler') {
./phpmyadmin/libraries/ob.lib.php:        } elseif (function_exists('ob_get_level') && ob_get_level() > 0) {
./phpmyadmin/libraries/ob.lib.php:    if (ob_get_status() && PMA_outBufferModeGet()) {
./phpmyadmin/libraries/sqlparser.lib.php:    function PMA_SQP_getErrorString()
./phpmyadmin/libraries/sqlparser.lib.php:         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get
./phpmyadmin/libraries/sqlparser.lib.php:        // These reserved words do NOT get a newline placed near them.
./phpmyadmin/libraries/sqlparser.lib.php:                // the original query (otherwise we get problems with
./phpmyadmin/libraries/sqlparser.lib.php:                        // (else, we get mydb.mytableTO)
./phpmyadmin/libraries/sqlparser.lib.php:                // in the parser, and here, the '%' gets a blank before,
./phpmyadmin/libraries/url_generating.lib.php:    return PMA_getHiddenFields($params);
./phpmyadmin/libraries/url_generating.lib.php: * echo PMA_getHiddenFields($values);
./phpmyadmin/libraries/url_generating.lib.php:function PMA_getHiddenFields($values, $pre = '')
./phpmyadmin/libraries/url_generating.lib.php:            $fields .= PMA_getHiddenFields($value, $name);
./phpmyadmin/libraries/url_generating.lib.php:    $args = func_get_args();
./phpmyadmin/libraries/url_generating.lib.php:    $separator = PMA_get_arg_separator();
./phpmyadmin/libraries/url_generating.lib.php:function PMA_get_arg_separator($encode = 'none')
./phpmyadmin/libraries/url_generating.lib.php:        $php_arg_separator_input = ini_get('arg_separator.input');
./phpmyadmin/libraries/Table.class.php:     * @see PMA_Table::getName()
./phpmyadmin/libraries/Table.class.php:        return $this->getName();
./phpmyadmin/libraries/Table.class.php:    function getLastError()
./phpmyadmin/libraries/Table.class.php:    function getLastMessage()
./phpmyadmin/libraries/Table.class.php:    function getName($backquoted = false)
./phpmyadmin/libraries/Table.class.php:    function getDbName($backquoted = false)
./phpmyadmin/libraries/Table.class.php:    function getFullName($backquoted = false)
./phpmyadmin/libraries/Table.class.php:        return $this->getDbName($backquoted) . '.' . $this->getName($backquoted);
./phpmyadmin/libraries/Table.class.php:    function get($param)
./phpmyadmin/libraries/Table.class.php:        $table_info = PMA_DBI_get_tables_full($this->getDbName(), $this->getName());
./phpmyadmin/libraries/Table.class.php:        if ($this->get('TABLE_ROWS') === null) {
./phpmyadmin/libraries/Table.class.php:                PMA_Table::countRecords($this->getDbName(), $this->getName(), true)
./phpmyadmin/libraries/Table.class.php:        $create_options = explode(' ', $this->get('TABLE_ROWS'));
./phpmyadmin/libraries/Table.class.php:     * @todo PMA_DBI_get_tables_full needs to be merged somehow into this class
./phpmyadmin/libraries/Table.class.php:            PMA_DBI_get_tables_full($db, $table);
./phpmyadmin/libraries/Table.class.php:            // or when we really did not get any status info, for example
./phpmyadmin/libraries/Table.class.php:                    $tmp_tables = PMA_DBI_get_tables_full($db, $table);
./phpmyadmin/libraries/Table.class.php:                    // For complex views, even trying to get a partial record
./phpmyadmin/libraries/Table.class.php:                        if (!PMA_DBI_getError()) {
./phpmyadmin/libraries/Table.class.php:     * @param array  $get_fields   Which fields will be SELECT'ed from the old entry
./phpmyadmin/libraries/Table.class.php:    static public function duplicateInfo($work, $pma_table, $get_fields, $where_fields, $new_fields)
./phpmyadmin/libraries/Table.class.php:            foreach ($get_fields as $get_field) {
./phpmyadmin/libraries/Table.class.php:                $select_parts[] = PMA_backquote($get_field);
./phpmyadmin/libraries/Table.class.php:                $row_fields[$get_field] = 'cc';
./phpmyadmin/libraries/Table.class.php:     * @param string $target_db    target database
./phpmyadmin/libraries/Table.class.php:     * @param string $target_table target table
./phpmyadmin/libraries/Table.class.php:    static public function moveCopy($source_db, $source_table, $target_db, $target_table, $what, $move, $mode)
./phpmyadmin/libraries/Table.class.php:                $target_table, $target_db,
./phpmyadmin/libraries/Table.class.php:                $GLOBALS['message'] = $tbl->getLastMessage();
./phpmyadmin/libraries/Table.class.php:        // Ensure the target is valid
./phpmyadmin/libraries/Table.class.php:        if (! $GLOBALS['pma']->databases->exists($source_db, $target_db)) {
./phpmyadmin/libraries/Table.class.php:            if (! $GLOBALS['pma']->databases->exists($target_db)) {
./phpmyadmin/libraries/Table.class.php:                    'target database `' . htmlspecialchars($target_db) . '` not found'
./phpmyadmin/libraries/Table.class.php:        if (! isset($target_db) || ! strlen($target_db)) {
./phpmyadmin/libraries/Table.class.php:            $target_db = $source_db;
./phpmyadmin/libraries/Table.class.php:        PMA_DBI_select_db($target_db);
./phpmyadmin/libraries/Table.class.php:        $target = PMA_backquote($target_db) . '.' . PMA_backquote($target_table);
./phpmyadmin/libraries/Table.class.php:            $sql_structure = PMA_getTableDef(
./phpmyadmin/libraries/Table.class.php:                $target_for_view = PMA_backquote($target_db);
./phpmyadmin/libraries/Table.class.php:            if (isset($target_for_view)) {
./phpmyadmin/libraries/Table.class.php:                        $parsed_sql[$i]['data'] = $target_for_view;
./phpmyadmin/libraries/Table.class.php:                // and change them to the target db, ensuring we stay into
./phpmyadmin/libraries/Table.class.php:                        $parsed_sql[$i]['data'] = $target_for_view;
./phpmyadmin/libraries/Table.class.php:                $parsed_sql[$i]['data'] = $target;
./phpmyadmin/libraries/Table.class.php:                if (PMA_Table::isView($target_db, $target_table)) {
./phpmyadmin/libraries/Table.class.php:                    . PMA_backquote($target_db) . '.'
./phpmyadmin/libraries/Table.class.php:                    . PMA_backquote($target_table);
./phpmyadmin/libraries/Table.class.php:                // If an existing table gets deleted, maintain any
./phpmyadmin/libraries/Table.class.php:                // replace it by the target table name, no need to PMA_backquote()
./phpmyadmin/libraries/Table.class.php:                $parsed_sql[$i]['data'] = $target;
./phpmyadmin/libraries/Table.class.php:            && ! PMA_Table::isView($target_db, $target_table)
./phpmyadmin/libraries/Table.class.php:            $sql_insert_data = 'INSERT INTO ' . $target . ' SELECT * FROM ' . $source;
./phpmyadmin/libraries/Table.class.php:        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();
./phpmyadmin/libraries/Table.class.php:                              . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\', '
./phpmyadmin/libraries/Table.class.php:                              . '        db_name    = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:                                . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\', '
./phpmyadmin/libraries/Table.class.php:                                . '         table_name = \'' . PMA_sqlAddSlashes($target_table) . '\''
./phpmyadmin/libraries/Table.class.php:                                . ' SET     foreign_table = \'' . PMA_sqlAddSlashes($target_table) . '\','
./phpmyadmin/libraries/Table.class.php:                                . '         foreign_db = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:                                . ' SET     master_table = \'' . PMA_sqlAddSlashes($target_table) . '\','
./phpmyadmin/libraries/Table.class.php:                                . '         master_db = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:             * @todo Can't get moving PDFs the right way. The page numbers
./phpmyadmin/libraries/Table.class.php:             * always get screwed up independently from duplication because the
./phpmyadmin/libraries/Table.class.php:                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','
./phpmyadmin/libraries/Table.class.php:                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:                           . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:                           . ' AND table_name = \'' . PMA_sqlAddSlashes($target_table) . '\'';
./phpmyadmin/libraries/Table.class.php:                                    . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','
./phpmyadmin/libraries/Table.class.php:                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''
./phpmyadmin/libraries/Table.class.php:                                    . '\'' . PMA_sqlAddSlashes($target_db) . '\','
./phpmyadmin/libraries/Table.class.php:                                    . '\'' . PMA_sqlAddSlashes($target_table) . '\','
./phpmyadmin/libraries/Table.class.php:                $get_fields = array('display_field');
./phpmyadmin/libraries/Table.class.php:                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);
./phpmyadmin/libraries/Table.class.php:                PMA_Table::duplicateInfo('displaywork', 'table_info', $get_fields, $where_fields, $new_fields);
./phpmyadmin/libraries/Table.class.php:                $get_fields = array('master_field', 'foreign_table', 'foreign_field');
./phpmyadmin/libraries/Table.class.php:                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'master_table' => $target_table);
./phpmyadmin/libraries/Table.class.php:                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);
./phpmyadmin/libraries/Table.class.php:                $get_fields = array('foreign_field', 'master_table', 'master_field');
./phpmyadmin/libraries/Table.class.php:                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'foreign_table' => $target_table);
./phpmyadmin/libraries/Table.class.php:                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);
./phpmyadmin/libraries/Table.class.php:                $get_fields = array('x', 'y', 'v', 'h');
./phpmyadmin/libraries/Table.class.php:                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);
./phpmyadmin/libraries/Table.class.php:                PMA_Table::duplicateInfo('designerwork', 'designer_coords', $get_fields, $where_fields, $new_fields);
./phpmyadmin/libraries/Table.class.php:                 * @todo Can't get duplicating PDFs the right way. The
./phpmyadmin/libraries/Table.class.php:                 * page numbers always get screwed up independently from
./phpmyadmin/libraries/Table.class.php:                $get_fields = array('page_descr');
./phpmyadmin/libraries/Table.class.php:                $new_fields = array('db_name' => $target_db);
./phpmyadmin/libraries/Table.class.php:                $last_id = PMA_Table::duplicateInfo('pdfwork', 'pdf_pages', $get_fields, $where_fields, $new_fields);
./phpmyadmin/libraries/Table.class.php:                    $get_fields = array('x', 'y');
./phpmyadmin/libraries/Table.class.php:                    $new_fields = array('db_name' => $target_db, 'table_name' => $target_table, 'pdf_page_number' => $last_id);
./phpmyadmin/libraries/Table.class.php:                    PMA_Table::duplicateInfo('pdfwork', 'table_coords', $get_fields, $where_fields, $new_fields);
./phpmyadmin/libraries/Table.class.php:        if (null !== $new_db && $new_db !== $this->getDbName()) {
./phpmyadmin/libraries/Table.class.php:            // Ensure the target is valid
./phpmyadmin/libraries/Table.class.php:            $new_db = $this->getDbName();
./phpmyadmin/libraries/Table.class.php:        if ($this->getFullName() === $new_table->getFullName()) {
./phpmyadmin/libraries/Table.class.php:            $this->errors[] = __('Invalid table name') . ': ' . $new_table->getFullName();
./phpmyadmin/libraries/Table.class.php:        $triggers = PMA_DBI_get_triggers($this->getDbName(), $this->getName(), '');
./phpmyadmin/libraries/Table.class.php:        $handle_triggers = $this->getDbName() != $new_db && $triggers;
./phpmyadmin/libraries/Table.class.php:                $sql = 'DROP TRIGGER IF EXISTS ' . PMA_backquote($this->getDbName()) . '.'
./phpmyadmin/libraries/Table.class.php:            RENAME TABLE ' . $this->getFullName(true) . '
./phpmyadmin/libraries/Table.class.php:                  TO ' . $new_table->getFullName(true) . ';';
./phpmyadmin/libraries/Table.class.php:                PMA_DBI_select_db($this->getDbName());
./phpmyadmin/libraries/Table.class.php:                $this->getFullName(),
./phpmyadmin/libraries/Table.class.php:                $new_table->getFullName()
./phpmyadmin/libraries/Table.class.php:        $old_name = $this->getName();
./phpmyadmin/libraries/Table.class.php:        $old_db = $this->getDbName();
./phpmyadmin/libraries/Table.class.php:        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();
./phpmyadmin/libraries/Table.class.php:    public function getUniqueColumns($backquoted = true)
./phpmyadmin/libraries/Table.class.php:        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Non_unique = 0');
./phpmyadmin/libraries/Table.class.php:            $return[] = $this->getFullName($backquoted) . '.'
./phpmyadmin/libraries/Table.class.php:    public function getIndexedColumns($backquoted = true)
./phpmyadmin/libraries/Table.class.php:        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Seq_in_index = 1');
./phpmyadmin/libraries/Table.class.php:            $return[] = $this->getFullName($backquoted) . '.'
./phpmyadmin/libraries/Table.class.php:    public function getColumns($backquoted = true)
./phpmyadmin/libraries/Table.class.php:        $sql = 'SHOW COLUMNS FROM ' . $this->getFullName(true);
./phpmyadmin/libraries/Table.class.php:            $return[] = $this->getFullName($backquoted) . '.'
./phpmyadmin/libraries/Table.class.php:    protected function getUiPrefsFromDb()
./phpmyadmin/libraries/Table.class.php:                PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink']))
./phpmyadmin/libraries/Table.class.php:                $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));
./phpmyadmin/libraries/Table.class.php:                // check whether we can get from pmadb
./phpmyadmin/libraries/Table.class.php:                    ?  $this->getUiPrefsFromDb()
./phpmyadmin/libraries/Table.class.php:    public function getUiProp($property)
./phpmyadmin/libraries/Table.class.php:                $avail_columns = $this->getColumns();
./phpmyadmin/libraries/bookmark.lib.php:function PMA_Bookmark_getParams()
./phpmyadmin/libraries/bookmark.lib.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/bookmark.lib.php:} // end of the 'PMA_Bookmark_getParams()' function
./phpmyadmin/libraries/bookmark.lib.php:function PMA_Bookmark_getList($db)
./phpmyadmin/libraries/bookmark.lib.php:    $cfgBookmark = PMA_Bookmark_getParams();
./phpmyadmin/libraries/bookmark.lib.php:} // end of the 'PMA_Bookmark_getList()' function
./phpmyadmin/libraries/bookmark.lib.php: * @param mixed     the id of the bookmark to get
./phpmyadmin/libraries/bookmark.lib.php: * @param boolean  true: get all bookmarks regardless of the owning user
./phpmyadmin/libraries/bookmark.lib.php:function PMA_Bookmark_get($db, $id, $id_field = 'id', $action_bookmark_all = false, $exact_user_match = false)
./phpmyadmin/libraries/bookmark.lib.php:    $cfgBookmark = PMA_Bookmark_getParams();
./phpmyadmin/libraries/bookmark.lib.php:} // end of the 'PMA_Bookmark_get()' function
./phpmyadmin/libraries/bookmark.lib.php:    $cfgBookmark = PMA_Bookmark_getParams();
./phpmyadmin/libraries/bookmark.lib.php: * @param integer  the id of the bookmark to get
./phpmyadmin/libraries/bookmark.lib.php:    $cfgBookmark = PMA_Bookmark_getParams();
./phpmyadmin/libraries/bookmark.lib.php:$GLOBALS['cfg']['Bookmark'] = PMA_Bookmark_getParams();
./phpmyadmin/libraries/js_escape.lib.php:function PMA_getJsValue($key, $value, $escape = true)
./phpmyadmin/libraries/js_escape.lib.php:    echo PMA_getJsValue($key, $value);
./phpmyadmin/libraries/tbl_properties.inc.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/libraries/tbl_properties.inc.php:$comments_map = PMA_getComments($db, $table);
./phpmyadmin/libraries/tbl_properties.inc.php:    $mime_map = PMA_getMIME($db, $table);
./phpmyadmin/libraries/tbl_properties.inc.php:    $available_mime = PMA_getAvailableMIMEtypes();
./phpmyadmin/libraries/tbl_properties.inc.php:            . PMA_generate_common_url($db, $table) . '" target="_blank">',
./phpmyadmin/libraries/tbl_properties.inc.php:    // Cell index: If certain fields get left out, the counter shouldn't change.
./phpmyadmin/libraries/tbl_properties.inc.php:    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);
./phpmyadmin/libraries/tbl_properties.inc.php:        . '" class="open_enum_editor" target="_blank"> '
./phpmyadmin/libraries/tbl_properties.inc.php:    // users would have problems if they forget to enter the default
./phpmyadmin/libraries/tbl_properties.inc.php:        'NONE'              =>  _pgettext('for default', 'None'),
./phpmyadmin/libraries/tbl_properties.inc.php:                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);
./phpmyadmin/libraries/tbl_properties.inc.php:    var new_fields = document.getElementById('added_fields').value;
./phpmyadmin/libraries/tbl_properties.inc.php:    var new_field_container = document.getElementById('table_columns');
./phpmyadmin/libraries/tbl_properties.inc.php:    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,
./phpmyadmin/main.php:        $server_info .= PMA_DBI_get_host_info();
./phpmyadmin/main.php:        echo '        <form method="post" action="index.php" target="_parent">' . "\n"
./phpmyadmin/main.php:    echo $_SESSION['PMA_Theme_Manager']->getHtmlSelectBox();
./phpmyadmin/main.php:echo PMA_Config::getFontsizeForm();
./phpmyadmin/main.php:    PMA_printListItem(__('Software') . ': ' . PMA_getServerType(), 'li_server_type');
./phpmyadmin/main.php:        __('Protocol version') . ': ' . PMA_DBI_get_proto_info(),
./phpmyadmin/main.php:            $client_version_str = PMA_DBI_get_client_info();
./phpmyadmin/main.php:if ($GLOBALS['cfg']['VersionCheck'] && (! $GLOBALS['PMA_Config']->get('is_https') || PMA_USR_BROWSER_AGENT != 'IE')) {
./phpmyadmin/main.php:// does not work if no target specified, don't know why
./phpmyadmin/main.php:if (@extension_loaded('mbstring') && @ini_get('mbstring.func_overload') > 1) {
./phpmyadmin/main.php:$gc_time = (int)@ini_get('session.gc_maxlifetime');
./phpmyadmin/main.php:    $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/main.php: * If no default server is set, PMA_DBI_get_client_info() is not defined yet.
./phpmyadmin/main.php:if (function_exists('PMA_DBI_get_client_info') && !PMA_DRIZZLE) {
./phpmyadmin/main.php:    $_client_info = PMA_DBI_get_client_info();
./phpmyadmin/main.php:    && @ini_get('suhosin.request.max_value_length')
./phpmyadmin/main.php:        trigger_error('You are using an incomplete translation, please help to make it better by <a href="http://www.phpmyadmin.net/home_page/improve.php#translate" target="_blank">contributing</a>.', E_USER_NOTICE);
./phpmyadmin/main.php: * @param string  $url    make item as link with $url as target
./phpmyadmin/main.php: * @param string  $target special target for $url
./phpmyadmin/main.php:function PMA_printListItem($name, $id = null, $url = null, $mysql_help_page = null, $target = null, $a_id = null, $class = null, $a_class = null)
./phpmyadmin/main.php:        if (null !== $target) {
./phpmyadmin/main.php:           echo ' target="' . $target . '"';
./phpmyadmin/db_qbe.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/db_qbe.php://$columns = PMA_DBI_get_columns_full($GLOBALS['db']);
./phpmyadmin/db_qbe.php://$tables  = PMA_DBI_get_columns_full($GLOBALS['db']);
./phpmyadmin/db_qbe.php:// The tables list gets from MySQL
./phpmyadmin/db_qbe.php:    $fld_results = PMA_DBI_get_columns($db, $tbl);
./phpmyadmin/db_qbe.php:                $tab_designer['link'] .= PMA_get_arg_separator('html') . urlencode($param) . '='
./phpmyadmin/db_qbe.php:<?php printf(__('Switch to %svisual builder%s'), ' <a href="' . $tab_designer['link'] . PMA_get_arg_separator('html') . 'query=1">', '</a>'); ?>
./phpmyadmin/db_qbe.php:            <legend><?php echo sprintf(__('SQL query on database <b>%s</b>:'), PMA_getDbLink($db)); ?>
./phpmyadmin/db_qbe.php:                $indexes = PMA_DBI_get_table_indexes($db, $tab);
./phpmyadmin/db_qbe.php:                PMA_getRelatives('master');
./phpmyadmin/db_qbe.php:                PMA_getRelatives('foreign');
./phpmyadmin/js/get_image.js.php:if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {
./phpmyadmin/js/get_image.js.php:    include $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';
./phpmyadmin/js/get_image.js.php: * @param string image      The name of the file to get
./phpmyadmin/js/get_image.js.php:function PMA_getImage(image, alternate, attributes) {
./phpmyadmin/js/get_image.js.php:        retval.attr('src', "<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>" + image);
./phpmyadmin/js/messages.php:$js_messages['strCountColumnExplanation'] = __('This column shows the amount of identical queries that are grouped together. However only the SQL query itself has been used as a grouping criteria, so the other attributes of queries, such as start time, may differ.');
./phpmyadmin/js/messages.php:$js_messages['strMoreCountColumnExplanation'] = __('Since grouping of INSERTs queries has been selected, INSERT queries into the same table are also being grouped together, disregarding of the inserted data.');
./phpmyadmin/js/messages.php:$js_messages['strTable'] = _pgettext('Display format', 'Table');
./phpmyadmin/js/messages.php:    _pgettext('Previous month', 'Prev')
./phpmyadmin/js/messages.php:    _pgettext('Next month', 'Next')
./phpmyadmin/js/messages.php:        _pgettext('Short month name', 'May'),
./phpmyadmin/js/messages.php:$year_suffix = _pgettext('Year suffix', 'none');
./phpmyadmin/db_operations.php:        $sql_query = ''; // in case target db exists
./phpmyadmin/db_operations.php:            // checks in this list if the target db exists
./phpmyadmin/db_operations.php:        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');
./phpmyadmin/db_operations.php:                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);
./phpmyadmin/db_operations.php:        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');
./phpmyadmin/db_operations.php:                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);
./phpmyadmin/db_operations.php:        $tables_full = PMA_DBI_get_tables_full($db);
./phpmyadmin/db_operations.php:        // remove all foreign key constraints, otherwise we can get errors
./phpmyadmin/db_operations.php:            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);
./phpmyadmin/db_operations.php:                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");
./phpmyadmin/db_operations.php:                $triggers = PMA_DBI_get_triggers($db, $each_table, '');
./phpmyadmin/db_operations.php:                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);
./phpmyadmin/db_operations.php:            $get_fields = array('user', 'label', 'query');
./phpmyadmin/db_operations.php:            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,
./phpmyadmin/db_operations.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/db_operations.php:$db_collation = PMA_getDbCollation($db);
./phpmyadmin/db_operations.php:            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />
./phpmyadmin/db_operations.php:        echo PMA_getImage('b_edit.png');
./phpmyadmin/db_operations.php:    echo PMA_getImage('b_deltbl.png');
./phpmyadmin/db_operations.php:        echo PMA_getImage('b_edit.png');
./phpmyadmin/db_operations.php:        echo PMA_getImage('s_asci.png');
./phpmyadmin/db_operations.php:        echo PMA_getImage('b_edit.png');
./phpmyadmin/prefs_manage.php:    $filename = 'phpMyAdmin-config-' . urlencode(PMA_getenv('HTTP_HOST')) . '.json';
./phpmyadmin/prefs_manage.php:} else if (isset($_POST['submit_get_json'])) {
./phpmyadmin/prefs_manage.php:        $open_basedir = @ini_get('open_basedir');
./phpmyadmin/prefs_manage.php:        $json = file_get_contents($import_file);
./phpmyadmin/prefs_manage.php:        $cf = ConfigFile::getInstance();
./phpmyadmin/prefs_manage.php:        $new_config = $cf->getFlatDefaultConfig();
./phpmyadmin/prefs_manage.php:            $new_config = array_merge($new_config, $cf->getConfigArray());
./phpmyadmin/prefs_manage.php:                && $_SESSION['PMA_Theme_Manager']->theme->getId() != $config['ThemeDefault']
./phpmyadmin/prefs_manage.php:                && $config['fontsize'] != $GLOBALS['PMA_Config']->get('fontsize')) {
./phpmyadmin/prefs_manage.php:        $result = PMA_save_userprefs($cf->getConfigArray());
./phpmyadmin/prefs_manage.php:        if ($_SESSION['PMA_Theme_Manager']->theme->getId() != 'original') {
./phpmyadmin/prefs_manage.php:            $GLOBALS['PMA_Config']->removeCookie($_SESSION['PMA_Theme_Manager']->getThemeCookieName());
./phpmyadmin/prefs_manage.php:        if ($GLOBALS['PMA_Config']->get('fontsize') != '82%') {
./phpmyadmin/tbl_tracking.php:    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);
./phpmyadmin/tbl_tracking.php:    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);
./phpmyadmin/tbl_tracking.php:                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';
./phpmyadmin/tbl_tracking.php:        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));
./phpmyadmin/tbl_printview.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/tbl_printview.php:    $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/tbl_printview.php:    $res_rel  = PMA_getForeigners($db, $table);
./phpmyadmin/tbl_printview.php:         * or move it in a function similar to PMA_DBI_get_columns_full()
./phpmyadmin/tbl_printview.php:        $comments = PMA_getComments($db, $table);
./phpmyadmin/tbl_printview.php:            $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/tbl_printview.php:        echo PMA_Index::getView($table, $db, true);
./phpmyadmin/tbl_printview.php:                $mergetable = PMA_Table::isMerge($db, $table);
./phpmyadmin/tbl_printview.php:                if ($mergetable == false) {
./phpmyadmin/tbl_printview.php:                if (isset($tot_size) && $mergetable == false) {
./phpmyadmin/tbl_printview.php:                if (isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {
./phpmyadmin/tbl_relation.php:// Note: in libraries/tbl_links.inc.php we get and display the table comment.
./phpmyadmin/tbl_relation.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/tbl_relation.php:    $existrel = PMA_getForeigners($db, $table, '', 'internal');
./phpmyadmin/tbl_relation.php:    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');
./phpmyadmin/tbl_relation.php:    $disp     = PMA_getDisplayField($db, $table);
./phpmyadmin/tbl_relation.php:            $tmp_error = PMA_DBI_getError();
./phpmyadmin/tbl_relation.php:    $existrel = PMA_getForeigners($db, $table, '', 'internal');
./phpmyadmin/tbl_relation.php:    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');
./phpmyadmin/tbl_relation.php:    $disp     = PMA_getDisplayField($db, $table);
./phpmyadmin/tbl_relation.php:        $selectboxall = array_merge($selectboxall, $current_table->getUniqueColumns($backquoted = false));
./phpmyadmin/tbl_relation.php:             $selectboxall_foreign = array_merge($selectboxall_foreign, $current_table->getIndexedColumns($backquoted = true));
./phpmyadmin/tbl_relation.php:$columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/tbl_relation.php:        $disp = PMA_getDisplayField($db, $table);
./phpmyadmin/user_password.php:            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);
./phpmyadmin/user_password.php:        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">
./phpmyadmin/tbl_zoom_select.php:if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {
./phpmyadmin/tbl_zoom_select.php:    $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/tbl_zoom_select.php:$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));
./phpmyadmin/tbl_zoom_select.php:list($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);
./phpmyadmin/tbl_zoom_select.php:// check also foreigners even if relwork is FALSE (to get
./phpmyadmin/tbl_zoom_select.php:$foreigners = PMA_getForeigners($db, $table);
./phpmyadmin/tbl_zoom_select.php:    $dataLabel = PMA_getDisplayField($db, $table);
./phpmyadmin/tbl_zoom_select.php:echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');
./phpmyadmin/tbl_zoom_select.php:        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');
./phpmyadmin/tbl_zoom_select.php:            echo PMA_getForeignFields_Values(
./phpmyadmin/tbl_zoom_select.php:            echo PMA_getForeignFields_Values(
./phpmyadmin/tbl_zoom_select.php:        $dataLabel = PMA_getDisplayField($db, $table);
./phpmyadmin/tbl_zoom_select.php:        $whereClause = PMA_tbl_search_getWhereClause(
./phpmyadmin/tbl_zoom_select.php:    $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/tbl_zoom_select.php:        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array
./phpmyadmin/tbl_zoom_select.php:        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);
./phpmyadmin/tbl_zoom_select.php:        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');
./phpmyadmin/tbl_zoom_select.php:              echo PMA_getForeignFields_Values(
./phpmyadmin/querywindow.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/querywindow.php:$titles['Change'] = PMA_getIcon('b_edit.png', __('Change'));
./phpmyadmin/querywindow.php:$_sql_history = PMA_getHistory($GLOBALS['cfg']['Server']['user']);
./phpmyadmin/querywindow.php:            . ' target="frame_content">';
./phpmyadmin/schema_edit.php: * get all variables needed for exporting relational schema
./phpmyadmin/schema_edit.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/db_datadict.php:$cfgRelation  = PMA_getRelationsParam();
./phpmyadmin/db_datadict.php:    $comment = PMA_getDbComment($db);
./phpmyadmin/db_datadict.php: * Selects the database and gets tables names
./phpmyadmin/db_datadict.php:$tables = PMA_DBI_get_tables($db);
./phpmyadmin/db_datadict.php:    $comments = PMA_getComments($db, $table);
./phpmyadmin/db_datadict.php:    $indexes      = PMA_DBI_get_table_indexes($db, $table);
./phpmyadmin/db_datadict.php:    $columns = PMA_DBI_get_columns($db, $table);
./phpmyadmin/db_datadict.php:        $res_rel = PMA_getForeigners($db, $table);
./phpmyadmin/db_datadict.php:             * or move it in a function similar to PMA_DBI_get_columns_full()
./phpmyadmin/db_datadict.php:            $mime_map = PMA_getMIME($db, $table, true);
./phpmyadmin/db_search.php:$tables_names_only = PMA_DBI_get_tables($GLOBALS['db']);
./phpmyadmin/db_search.php:    function PMA_getSearchSqls($table, $field, $search_str, $search_option)
./phpmyadmin/db_search.php:        $tblfields = PMA_DBI_get_columns($GLOBALS['db'], $table);
./phpmyadmin/db_search.php:    } // end of the "PMA_getSearchSqls()" function
./phpmyadmin/db_search.php:        $newsearchsqls = PMA_getSearchSqls($each_table, (! empty($field_str) ? $field_str : ''), $search_str, $search_option);
./phpmyadmin/db_search.php:            .'<td>' . sprintf(_ngettext('%s match inside table <i>%s</i>', '%s matches inside table <i>%s</i>', $res_cnt), $res_cnt,
./phpmyadmin/db_search.php:        echo '<p>' . sprintf(_ngettext('<b>Total:</b> <i>%s</i> match', '<b>Total:</b> <i>%s</i> matches', $num_search_result_total),
./phpmyadmin/server_binlog.php:   . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('s_tbl.png') : '')
./phpmyadmin/server_binlog.php:    echo '<form action="server_binlog.php" method="get">';
./phpmyadmin/server_binlog.php:        echo ' title="' . _pgettext('Previous page', 'Previous') . '">';
./phpmyadmin/server_binlog.php:        echo '>' . _pgettext('Previous page', 'Previous');
./phpmyadmin/server_binlog.php:        echo ' title="' . _pgettext('Next page', 'Next') . '">';
./phpmyadmin/server_binlog.php:        echo '>' . _pgettext('Next page', 'Next');
./phpmyadmin/pmd_relation_new.php:$tables = PMA_DBI_get_tables_full($db, $T1);
./phpmyadmin/pmd_relation_new.php:$tables = PMA_DBI_get_tables_full($db, $T2);
./phpmyadmin/pmd_relation_new.php:    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');
./phpmyadmin/import.php:// If we didn't get any parameters, either user called this directly, or
./phpmyadmin/import.php:    $_SESSION['Import_message']['message'] = $message->getDisplay();
./phpmyadmin/import.php:    $maximum_time = ini_get('max_execution_time');
./phpmyadmin/import.php:// Bookmark Support: get a query back from bookmark if required
./phpmyadmin/import.php:            $import_text = PMA_Bookmark_get($db, $id_bookmark, 'id', isset($action_bookmark_all));
./phpmyadmin/import.php:            $import_text = PMA_Bookmark_get($db, $id_bookmark);
./phpmyadmin/import.php:            $import_text = PMA_Bookmark_get($db, $id_bookmark);
./phpmyadmin/import.php:        $bookmarks = PMA_Bookmark_getList($db);
./phpmyadmin/import.php:$memory_limit = trim(@ini_get('memory_limit'));
./phpmyadmin/import.php:    $open_basedir = @ini_get('open_basedir');
./phpmyadmin/import.php:                    $result = PMA_getZipContents($import_file);
./phpmyadmin/import.php://$_SESSION['Import_message'] = $message->getDisplay();
./phpmyadmin/import.php:    $_SESSION['Import_message']['message'] = $message->getDisplay();
./phpmyadmin/index.php:    if (PMA_getenv('HTTP_HOST')) {
./phpmyadmin/index.php:        $HTTP_HOST = PMA_getenv('HTTP_HOST');
./phpmyadmin/index.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/index.php:    $main_target = $GLOBALS['cfg']['DefaultTabServer'];
./phpmyadmin/index.php:    $main_target = $GLOBALS['cfg']['DefaultTabDatabase'];
./phpmyadmin/index.php:    $main_target = ! empty($GLOBALS['goto']) ? $GLOBALS['goto'] : $GLOBALS['cfg']['DefaultTabTable'];
./phpmyadmin/index.php:if (isset($GLOBALS['target']) && is_string($GLOBALS['target']) && !empty($GLOBALS['target']) && in_array($GLOBALS['target'], $goto_whitelist)) {
./phpmyadmin/index.php:    $main_target = $GLOBALS['target'];
./phpmyadmin/index.php:$main_target .= $url_query;
./phpmyadmin/index.php:    var pma_text_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])); ?>';
./phpmyadmin/index.php:    var pma_text_left_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable'])); ?>';
./phpmyadmin/index.php:    function getFrames() {
./phpmyadmin/index.php:            if (typeof(getFrames) != 'undefined' && typeof(getFrames) == 'function') {
./phpmyadmin/index.php:                getFrames();
./phpmyadmin/index.php:        src="<?php echo $main_target; ?>"
./phpmyadmin/transformation_overview.php:$types = PMA_getAvailableMIMEtypes();
./phpmyadmin/transformation_overview.php:    <th><?php echo _pgettext('for MIME transformation', 'Description'); ?></th>
./phpmyadmin/transformation_overview.php:    $desc = PMA_getTransformationDescription($types['transformation_file'][$key]);
./phpmyadmin/bs_disp_as_mime_type.php:$filename = PMA_BS_getURL($reference);
./phpmyadmin/bs_disp_as_mime_type.php:$hdrs = get_headers($filename, 1);
./phpmyadmin/tbl_gis_visualization.php:$meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/tbl_gis_visualization.php:// get the chart and settings after chart generation
./phpmyadmin/server_status.php:                                $sysinfo = getSysInfo();
./phpmyadmin/server_status.php:                                $sysinfo = getSysInfo();
./phpmyadmin/server_status.php:        $return['error'] = PMA_DBI_getError();
./phpmyadmin/server_status.php: * get status from server
./phpmyadmin/server_status.php:    'new Date().getTime() - ' . (microtime(true) * 1000),
./phpmyadmin/server_status.php:    echo PMA_getImage('s_status.png');
./phpmyadmin/server_status.php:                <?php echo PMA_getImage('play.png'); ?> <a href="#startAnalyzer"><?php echo __('Run analyzer'); ?></a>
./phpmyadmin/server_status.php:                <?php echo PMA_getImage('b_help.png'); ?> <a href="#openAdvisorInstructions"><?php echo __('Instructions'); ?></a>
./phpmyadmin/server_status.php:        // Group together values that make out less than 2% into "Other", but only if we have more than 6 fractions already
./phpmyadmin/server_status.php:        'Delayed_insert_threads' => __('The number of INSERT DELAYED handler threads in use. Every different table on which one uses INSERT DELAYED gets its own thread.'),
./phpmyadmin/server_status.php:            <?php echo PMA_getImage('play.png'); ?>
./phpmyadmin/server_status.php:            <?php echo PMA_getImage('s_cog.png'); ?>
./phpmyadmin/server_status.php:            <?php echo PMA_getImage('b_help.png'); ?>
./phpmyadmin/server_status.php:            <?php echo PMA_getImage('s_okay.png'); ?>
./phpmyadmin/server_status.php:            <?php echo PMA_getImage('b_chart.png'); ?>
./phpmyadmin/server_status.php:        <a href="#rearrangeCharts"><?php echo PMA_getImage('b_tblops.png'); ?><?php echo __('Rearrange/edit charts'); ?></a>
./phpmyadmin/server_status.php:        <?php echo PMA_getImage('s_attention.png'); ?>
./phpmyadmin/server_status.php:            <?php echo PMA_getImage('s_attention.png'); ?>
./phpmyadmin/server_status.php:                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d second', '%d seconds', $rate), $rate) . '</option>';
./phpmyadmin/server_status.php:                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d minute', '%d minutes', $rate/60), $rate/60) . '</option>';
./phpmyadmin/tbl_indexes.php:foreach (PMA_DBI_get_columns_full($db, $table) as $row) {
./phpmyadmin/tbl_indexes.php:    switch ($index->getType()) {
./phpmyadmin/tbl_indexes.php:            if ($index->getName() == '') {
./phpmyadmin/tbl_indexes.php:            } elseif ($index->getName() != 'PRIMARY') {
./phpmyadmin/tbl_indexes.php:            if ($index->getName() == 'PRIMARY') {
./phpmyadmin/tbl_indexes.php:            $sql_query .= ' ADD ' . $index->getType() . ' '
./phpmyadmin/tbl_indexes.php:                . ($index->getName() ? PMA_backquote($index->getName()) : '');
./phpmyadmin/tbl_indexes.php:    foreach ($index->getColumns() as $key => $column) {
./phpmyadmin/tbl_indexes.php:        $index_fields[$key] = PMA_backquote($column->getName());
./phpmyadmin/tbl_indexes.php:        if ($column->getSubPart()) {
./phpmyadmin/tbl_indexes.php:            $index_fields[$key] .= '(' . $column->getSubPart() . ')';
./phpmyadmin/tbl_indexes.php:            $extra_data['index_table'] = PMA_Index::getView($table, $db);
./phpmyadmin/tbl_indexes.php:        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();
./phpmyadmin/tbl_indexes.php:            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />
./phpmyadmin/tbl_indexes.php:foreach ($index->getColumns() as $column) {
./phpmyadmin/tbl_indexes.php:        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))
./phpmyadmin/tbl_indexes.php:            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))
./phpmyadmin/tbl_indexes.php:                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'
./phpmyadmin/tbl_indexes.php:            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />
./phpmyadmin/server_engines.php:       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')
./phpmyadmin/server_engines.php:    foreach (PMA_StorageEngine::getStorageEngines() as $engine => $details) {
./phpmyadmin/server_engines.php:    if ($PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {
./phpmyadmin/server_engines.php:    $engine_plugin = PMA_StorageEngine::getEngine($_REQUEST['engine']);
./phpmyadmin/server_engines.php:       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')
./phpmyadmin/server_engines.php:       . '    ' . htmlspecialchars($engine_plugin->getTitle()) . "\n"
./phpmyadmin/server_engines.php:       . '    ' . PMA_showMySQLDocu('', $engine_plugin->getMysqlHelpPage()) . "\n"
./phpmyadmin/server_engines.php:       . '        ' . htmlspecialchars($engine_plugin->getComment()) . "\n"
./phpmyadmin/server_engines.php:    $infoPages = $engine_plugin->getInfoPages();
./phpmyadmin/server_engines.php:        $page_output = $engine_plugin->getPage($_REQUEST['page']);
./phpmyadmin/server_engines.php:        echo '<p> ' . $engine_plugin->getSupportInformationMessage() . "\n"
./phpmyadmin/server_engines.php:           . $engine_plugin->getHtmlVariables();
./phpmyadmin/sql.php:if (isset($_REQUEST['get_relational_values']) && $_REQUEST['get_relational_values'] == true) {
./phpmyadmin/sql.php:    $foreigners = PMA_getForeigners($db, $table, $column);
./phpmyadmin/sql.php:    $display_field = PMA_getDisplayField($foreigners[$column]['foreign_db'], $foreigners[$column]['foreign_table']);
./phpmyadmin/sql.php:    $foreignData = PMA_getForeignData($foreigners, $column, false, '', '');
./phpmyadmin/sql.php:                    . ' target="_blank" class="browse_foreign" '
./phpmyadmin/sql.php:if (isset($_REQUEST['get_enum_values']) && $_REQUEST['get_enum_values'] == true) {
./phpmyadmin/sql.php:    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);
./phpmyadmin/sql.php:if (isset($_REQUEST['get_set_values']) && $_REQUEST['get_set_values'] == true) {
./phpmyadmin/sql.php:    $field_info_query = PMA_DBI_get_columns_sql($db, $table, $_REQUEST['column']);
./phpmyadmin/sql.php:        if (gettype($retval) != 'boolean') {
./phpmyadmin/sql.php:            PMA_ajaxResponse($retval->getString(), false);
./phpmyadmin/sql.php:        if (gettype($retval) != 'boolean') {
./phpmyadmin/sql.php:            PMA_ajaxResponse($retval->getString(), false);
./phpmyadmin/sql.php:    $book_sql_query = PMA_Bookmark_get(
./phpmyadmin/sql.php:        $sorted_col = $pmatable->getUiProp(PMA_Table::PROP_SORTED_COLUMN);
./phpmyadmin/sql.php:    if ($error        = PMA_DBI_getError()) {
./phpmyadmin/sql.php:             * Go to target path.
./phpmyadmin/sql.php:        // if we did not append a limit, set this to get a correct
./phpmyadmin/sql.php:            // the SELECT FOUND_ROWS() work! (maybe it gets the
./phpmyadmin/sql.php:    // if a table or database gets dropped, check column comments.
./phpmyadmin/sql.php:            // VOID. No DB/Table gets deleted.
./phpmyadmin/sql.php:    // If a column gets dropped, do relation magic.
./phpmyadmin/sql.php:        $extra_data['indexes_list'] = PMA_Index::getView($table, $db);
./phpmyadmin/sql.php:            /* For replace we get DELETED + INSERTED row count, so we have to call it affected */
./phpmyadmin/sql.php:        // Checks for a valid target script
./phpmyadmin/sql.php:        // Loads to target script
./phpmyadmin/sql.php:            $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/sql.php:        $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/sql.php:        $fields_meta = PMA_DBI_get_fields_meta($result);
./phpmyadmin/sql.php:    echo PMA_getIcon('b_bookmark.png', __('Bookmark this SQL query'), true);
./phpmyadmin/tbl_move_copy.php: * $_REQUEST['target_db'] could be empty in case we came from an input field
./phpmyadmin/tbl_move_copy.php:if (empty($_REQUEST['target_db'])) {
./phpmyadmin/tbl_move_copy.php:    $_REQUEST['target_db'] = $db;
./phpmyadmin/tbl_move_copy.php: * A target table name has been sent to this script -> do the work
./phpmyadmin/tbl_move_copy.php:    if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {
./phpmyadmin/tbl_move_copy.php:        $result = PMA_Table::moveCopy($db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],
./phpmyadmin/tbl_move_copy.php:        $new = PMA_backquote($_REQUEST['target_db']) . '.' . PMA_backquote($_REQUEST['new_name']);
./phpmyadmin/tbl_move_copy.php:            $db        = $_REQUEST['target_db'];
./phpmyadmin/tbl_addfield.php:    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);
./phpmyadmin/server_privileges.php:       . PMA_getIcon('b_usrlist.png')
./phpmyadmin/server_privileges.php:        . $name_for_select . '_none" title="' . _pgettext('None privileges', 'None') . '" />'
./phpmyadmin/server_privileges.php:        . _pgettext('None privileges', 'None') . '</label>' . "\n"
./phpmyadmin/server_privileges.php:        // note: in MySQL 5.0.3 we get "Create View', 'Show view';
./phpmyadmin/server_privileges.php:        // get collumns
./phpmyadmin/server_privileges.php:            // also we must substitute the grant we get, because we can't generate
./phpmyadmin/server_privileges.php:            // a form variable containing blanks (those would get changed to
./phpmyadmin/server_privileges.php:    $fields_info = PMA_DBI_get_columns('mysql', 'user', null, true);
./phpmyadmin/server_privileges.php:                $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/server_privileges.php:                    $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/server_privileges.php:                    $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/server_privileges.php:                    $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/server_privileges.php:                    $message = PMA_Message::rawError(PMA_DBI_getError());
./phpmyadmin/server_privileges.php:            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);
./phpmyadmin/server_privileges.php:                        $drop_user_error .= PMA_DBI_getError() . "\n";
./phpmyadmin/server_privileges.php:    . PMA_getIcon('b_usredit.png', __('Edit Privileges'))
./phpmyadmin/server_privileges.php:    . PMA_getIcon('b_usrdrop.png', __('Revoke'))
./phpmyadmin/server_privileges.php:    . PMA_getIcon('b_tblexport.png', __('Export'))
./phpmyadmin/server_privileges.php:           . PMA_getIcon('b_usrlist.png')
./phpmyadmin/server_privileges.php:                   . PMA_getIcon('b_usradd.png')
./phpmyadmin/server_privileges.php:                   . PMA_getIcon('b_usrdrop.png')
./phpmyadmin/server_privileges.php:                   . PMA_getIcon('b_usradd.png')
./phpmyadmin/server_privileges.php:            $flushnote = new PMA_Message(__('Note: phpMyAdmin gets the users\' privileges directly from MySQL\'s privilege tables. The content of these tables may differ from the privileges the server uses, if they have been changed manually. In this case, you should %sreload the privileges%s before you continue.'), PMA_Message::NOTICE);
./phpmyadmin/server_privileges.php:           . PMA_getIcon('b_usredit.png')
./phpmyadmin/server_privileges.php:            // get data
./phpmyadmin/server_privileges.php:                . htmlspecialchars($dbname) . ': ' . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabDatabase']) . "</a> ]\n";
./phpmyadmin/server_privileges.php:                    . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])
./phpmyadmin/server_privileges.php:       . PMA_getIcon('b_usradd.png') . __('Add user') . "\n"
./phpmyadmin/server_privileges.php:        '0' => _pgettext('Create none database for user', 'None'),
./phpmyadmin/server_privileges.php:       . PMA_getIcon('b_usrcheck.png')
./phpmyadmin/server_privileges.php:           . PMA_getIcon('b_usradd.png')
./phpmyadmin/view_operations.php:            $_message .= $pma_table->getLastMessage();
./phpmyadmin/view_operations.php:            $GLOBALS['table'] = $pma_table->getName();
./phpmyadmin/view_operations.php:            $_message .= $pma_table->getLastError();
./phpmyadmin/enum_editor.php:    <form action="enum_editor.php" method="get">
./phpmyadmin/enum_editor.php:            <p><?php echo PMA_getImage('s_info.png') . __('Enter each value in a separate field'); ?></p>
./phpmyadmin/enum_editor.php:                // new list so we add a few for him/her to get started with.
./phpmyadmin/enum_editor.php:        <p><?php echo PMA_getImage('s_info.png') . __('Copy and paste the joined values into the "Length/Values" field'); ?></p>
./phpmyadmin/tbl_select.php:$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));
./phpmyadmin/tbl_select.php:$geom_types = PMA_getGISDatatypes();
./phpmyadmin/tbl_select.php:    list($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present) = PMA_tbl_getFields($db, $table);
./phpmyadmin/tbl_select.php:    // check also foreigners even if relwork is FALSE (to get
./phpmyadmin/tbl_select.php:    $foreigners = PMA_getForeigners($db, $table);
./phpmyadmin/tbl_select.php:echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');
./phpmyadmin/tbl_select.php:                        // get the relevant list of functions
./phpmyadmin/tbl_select.php:                        $funcs = PMA_getGISFunctions($fields_type[$i], true, true);
./phpmyadmin/tbl_select.php:        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');
./phpmyadmin/tbl_select.php:        echo PMA_getForeignFields_Values($foreigners, $foreignData, $field, $fields_type, $i, $db, $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', true);
./phpmyadmin/tbl_select.php:            $whereClause = PMA_tbl_search_getWhereClause($fields[$i], $names[$i], $types[$i], $collations[$i], $func_type, $unaryFlag, $tmp_geom_func);
./phpmyadmin/export.php:$export_list = PMA_getPlugins(
./phpmyadmin/export.php:    $memory_limit = trim(@ini_get('memory_limit'));
./phpmyadmin/export.php:    // Nijel: During export I had allocated (see memory_get_usage function)
./phpmyadmin/export.php:    // Check if the user already added extension; get the substring where the extension would be if it was included
./phpmyadmin/export.php:        $cfgRelation = PMA_getRelationsParam();
./phpmyadmin/export.php:                $tables = PMA_DBI_get_tables($current_db);
./phpmyadmin/export.php:        if (@function_exists('gzencode') && !@ini_get('zlib.output_compression')) {
./phpmyadmin/export.php:    if (document.getElementById('textSQLDUMP')) {
./phpmyadmin/export.php:        document.getElementById('textSQLDUMP').style.width=(bodyWidth-50) + 'px';
./phpmyadmin/export.php:        document.getElementById('textSQLDUMP').style.height=(bodyHeight-100) + 'px';
./phpmyadmin/db_printview.php:$cfgRelation = PMA_getRelationsParam();
./phpmyadmin/db_printview.php: * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full()
./phpmyadmin/db_printview.php:$tables = PMA_DBI_get_tables_full($db);
./phpmyadmin/db_printview.php:        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>
./pay/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:        $page = $this->_getPage(array($ids[0]));
./pay/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:        $this->_getNextPage();
./pay/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:            $this->_getNextPage();
./pay/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:    private function _getNextPage()
./pay/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:            $this->_items = $this->_getPage(array_slice($this->_ids, $this->_batchIndex, $this->_pageSize));
./pay/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:    private function _getPage($ids)
./pay/braintree-php-2.17.0/lib/Braintree/Test/CreditCardNumbers.php:    public static function getAll()
./pay/braintree-php-2.17.0/lib/Braintree/Collection.php:    public function get($index)
./pay/braintree-php-2.17.0/lib/Braintree/Collection.php:    public function getIterator()
./pay/braintree-php-2.17.0/lib/Braintree/Collection.php:     * get an offset's value
./pay/braintree-php-2.17.0/lib/Braintree/Collection.php:     * @see get
./pay/braintree-php-2.17.0/lib/Braintree/Collection.php:        return $this->get($offset);
./pay/braintree-php-2.17.0/lib/Braintree/Result/CreditCardVerification.php:    public function  __get($name)
./pay/braintree-php-2.17.0/lib/Braintree/Result/Successful.php:            // get a lowercase direct name for the property
./pay/braintree-php-2.17.0/lib/Braintree/Result/Successful.php:                    get_class($objToReturn)
./pay/braintree-php-2.17.0/lib/Braintree/Plan.php:        $response = Braintree_Http::get('/plans');
./pay/braintree-php-2.17.0/lib/Braintree/Discount.php:        $response = Braintree_Http::get('/discounts');
./pay/braintree-php-2.17.0/lib/Braintree/Transaction.php:            $response = Braintree_Http::get('/transactions/'.$id);
./pay/braintree-php-2.17.0/lib/Braintree/AddOn.php:        $response = Braintree_Http::get('/add_ons');
./pay/braintree-php-2.17.0/lib/Braintree/CreditCard.php:            $response = Braintree_Http::get('/payment_methods/'.$token);
./pay/braintree-php-2.17.0/lib/Braintree/Customer.php:            $response = Braintree_Http::get('/customers/'.$id);
./pay/braintree-php-2.17.0/lib/Braintree/Version.php:    public static function get()
./pay/braintree-php-2.17.0/lib/Braintree/WebhookTesting.php:        $originalZone = date_default_timezone_get();
./pay/braintree-php-2.17.0/lib/Braintree/Xml/Generator.php:        // get the root element name
./pay/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:        $xmlRoot = Braintree_Util::delimiterToCamelCase($iterator->getName());
./pay/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:        self::$_xmlRoot = $iterator->getName();
./pay/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:            // get the attribute type string for use in conditions below
./pay/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:                $parentKey = Braintree_Util::delimiterToCamelCase($parentElement->getName());
./pay/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:        // get the element attributes
./pay/braintree-php-2.17.0/lib/Braintree/Address.php:            $response = Braintree_Http::get(
./pay/braintree-php-2.17.0/lib/Braintree/Error/ValidationErrorCollection.php:    public function  __get($name)
./pay/braintree-php-2.17.0/lib/Braintree/Error/ErrorCollection.php:    public function  __get($name)
./pay/braintree-php-2.17.0/lib/Braintree/Error/Validation.php:    public function  __get($name)
./pay/braintree-php-2.17.0/lib/Braintree/Http.php:    public static function get($path)
./pay/braintree-php-2.17.0/lib/Braintree/Http.php:            'User-Agent: Braintree PHP Library ' . Braintree_Version::get(),
./pay/braintree-php-2.17.0/lib/Braintree/Http.php:        $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./pay/braintree-php-2.17.0/lib/Braintree/Subscription.php:            $response = Braintree_Http::get('/subscriptions/' . $id);
./pay/braintree-php-2.17.0/lib/Braintree/Util.php:        // get what should be an array from the passed array
./pay/braintree-php-2.17.0/lib/Braintree/Configuration.php:    private static function get($key)
./pay/braintree-php-2.17.0/lib/Braintree/Configuration.php:            return self::get($name);
./pay/braintree-php-2.17.0/lib/Braintree/Configuration.php:     * @param string $value pass a string to set, empty to get
./pay/braintree-php-2.17.0/lib/Braintree/Configuration.php:        return getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./pay/braintree-php-2.17.0/lib/Braintree/Instance.php:    public function __get($name)
./pay/braintree-php-2.17.0/lib/Braintree/Instance.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./pay/braintree-php-2.17.0/lib/Braintree/Instance.php:        return get_class($this) .'['.$objOutput.']';
./pay/braintree-php-2.17.0/lib/Braintree.php:set_include_path(get_include_path() . PATH_SEPARATOR . realpath(dirname(__FILE__)));
./pay/braintree-php-2.17.0/lib/Braintree.php:    public function __get($name)
./pay/braintree-php-2.17.0/lib/Braintree.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./pay/braintree-php-2.17.0/tests/unit/TransparentRedirectTest.php:        $originalSeparator = ini_get("arg_separator.output");
./pay/braintree-php-2.17.0/tests/unit/TransparentRedirectTest.php:        $originalZone = date_default_timezone_get();
./pay/braintree-php-2.17.0/tests/unit/TransparentRedirectTest.php:        $zoneAfterCall = date_default_timezone_get();
./pay/braintree-php-2.17.0/tests/unit/Xml_ParserTest.php:    <company>Widgets Inc</company>
./pay/braintree-php-2.17.0/tests/unit/SanityTest.php:            $code = file_get_contents($codeFile);
./pay/braintree-php-2.17.0/tests/unit/ConfigurationTest.php:        // try to get environment without setting it first
./pay/braintree-php-2.17.0/tests/unit/ConfigurationTest.php:        $this->assertEquals(getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000, $pn);
./pay/braintree-php-2.17.0/tests/TestHelper.php:  get_include_path() . PATH_SEPARATOR .
./pay/braintree-php-2.17.0/tests/TestHelper.php:    public static function includes($collection, $targetItem)
./pay/braintree-php-2.17.0/tests/TestHelper.php:            if ($item->id == $targetItem->id) {
./pay/braintree-php-2.17.0/tests/integration/TransparentRedirectTest.php:        $developmentPort = getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./pay/braintree-php-2.17.0/tests/integration/CustomerTest.php:    function testUpdate_forBillingAddressAndExistingCreditCardAndCustomerDetailsTogether()
./pay/braintree-php-2.17.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./pay/braintree-php-2.17.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./pay/braintree-php-2.17.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./pay/braintree-php-2.17.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./pay/braintree-php-2.17.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./pay/braintree-php-2.17.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./pay/braintree-php-2.17.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./pay/braintree-php-2.17.0/tests/integration/TransactionTest.php:            $this->assertEquals("Invalid params: transaction[bad_key]", $e->getMessage());
./pay/paymentform.php://this gets the params from the parent iframe (if sent, otherwise use defaults)
./pay/paymentform.php://this gets the tr value from braintree
./pay/paymentform.php:		   var a = document.getElementById("expmonth");
./pay/paymentform.php:		   var b = document.getElementById("expyear");
./pay/paymentform.php:		   document.getElementById("braintree_credit_card_exp").value=expmonthval+"/"+expyearval;
./d.php:   FB.getLoginStatus(function(response) {
./d.php:     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
./d.php:     if (d.getElementById(id)) {return;}
./d.php:	document.getElementById("fbstate").innerHTML=fbstate;
./d.php:	if(localStorage.fbid){document.getElementById("fbid").innerHTML=fbid+" <a href='#' onclick=\"remove()\";>Remove</a>";}
./d.php:	if(localStorage.seckey){document.getElementById("seckey").innerHTML=seckey+" <a href='#' onclick=\"remove()\";>Remove</a>";}
./d.php:	if(localStorage.seckey && localStorage.fbid){document.getElementById("deleteuser").innerHTML="<a href=\"d.php?fbid="+fbid+"&seckey="+seckey+"\">Delete User</a>";}
./twillio/Services/Twilio.php:            if (!in_array('curl', get_loaded_extensions())) {
./twillio/Services/Twilio.php:        $this->account = $this->accounts->get($sid);
./twillio/Services/Twilio.php:    public function getVersion() {
./twillio/Services/Twilio.php:    public function getRetryAttempts() {
./twillio/Services/Twilio.php:    public static function getRequestUri($path, $params, $full_uri = false) {
./twillio/Services/Twilio.php:        $uri = self::getRequestUri($path, $params, $full_uri);
./twillio/Services/Twilio.php:        return $this->_makeIdempotentRequest(array($this->http, 'get'), 
./twillio/Services/Twilio.php:        $uri = self::getRequestUri($path, $params);
./twillio/Services/Twilio/AutoPagingIterator.php:            if ($e->getCode() != 20006) {
./twillio/Services/Twilio/AutoPagingIterator.php:     * Restore everything to the way it was before we began paging. This gets 
./twillio/Services/Twilio/AutoPagingIterator.php:            if ($e->getCode() != 20006) {
./twillio/Services/Twilio/AutoPagingIterator.php:            $this->items = $page->getItems();
./twillio/Services/Twilio/InstanceResource.php:    public function __get($key)
./twillio/Services/Twilio/InstanceResource.php:        if ($subresource = $this->getSubresources($key)) {
./twillio/Services/Twilio/Resource.php:    public function getSubresources($name = null)
./twillio/Services/Twilio/Resource.php:        foreach (func_get_args() as $name) {
./twillio/Services/Twilio/Resource.php:    public function getResourceName($camelized = false) 
./twillio/Services/Twilio/Resource.php:        $name = get_class($this);
./twillio/Services/Twilio/TinyHttp.php:    case 'get':
./twillio/Services/Twilio/TinyHttp.php:            $status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./twillio/Services/Twilio/TinyHttp.php:                curl_getinfo($curl, CURLINFO_HEADER_OUT) .
./twillio/Services/Twilio/ListResource.php:        $name = $this->getResourceName(true);
./twillio/Services/Twilio/ListResource.php:         * By default trim the 's' from the end of the list name to get the
./twillio/Services/Twilio/ListResource.php:    public function get($sid)
./twillio/Services/Twilio/ListResource.php:    public function getObjectFromJson($params, $idParam = "sid")
./twillio/Services/Twilio/ListResource.php:    public function getPage(
./twillio/Services/Twilio/ListResource.php:        $list_name = $this->getResourceName();
./twillio/Services/Twilio/ListResource.php:            array($this, 'getObjectFromJson'),
./twillio/Services/Twilio/ListResource.php:    public function getIterator(
./twillio/Services/Twilio/ListResource.php:            array($this, 'getPageGenerator'), $page, $size, $filters
./twillio/Services/Twilio/ListResource.php:    public function getPageGenerator(
./twillio/Services/Twilio/ListResource.php:        return $this->getPage($page, $size, $filters, $deep_paging_uri);
./twillio/Services/Twilio/Rest/Members.php:    public function getObjectFromJson($params, $idParam = 'sid') {
./twillio/Services/Twilio/Rest/Members.php:        return parent::getObjectFromJson($params, 'call_sid');
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getLocal($country)
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:            'getList',
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:            array($this, 'getList'),
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getTollFree($country)
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:            'getList',
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:            array($this, 'getList'),
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getList($country, $type, array $params = array())
./twillio/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getResourceName($camelized = false)
./twillio/Services/Twilio/Rest/Participants.php:    public function getObjectFromJson($params, $idParam = "sid") {
./twillio/Services/Twilio/Rest/Participants.php:        return parent::getObjectFromJson($params, "call_sid");
./twillio/Services/Twilio/RestException.php:    public function getStatus()
./twillio/Services/Twilio/RestException.php:    public function getInfo()
./twillio/Services/Twilio/Page.php:    public function getItems()
./twillio/Services/Twilio/Page.php:    public function __get($prop)
./twillio/Services/Twilio/Page.php:     * Implementation of IteratorAggregate::getIterator().
./twillio/Services/Twilio/Page.php:    public function getIterator()
./twillio/Services/Twilio/Page.php:        return $this->getItems();
./twillio/tests/TwimlTest.php:        $this->assertEquals('Response', $doc->getName());
./twillio/tests/Bootstrap.php:$path = array($library, $tests, get_include_path());
./twillio/tests/TwilioTest.php:        $this->assertSame($end_string, Services_Twilio::getRequestUri(
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->never();
./twillio/tests/TwilioTest.php:        $this->assertEquals('2010-04-01', $client->getVersion());
./twillio/tests/TwilioTest.php:        $this->assertEquals('2010-04-01', $client->getVersion());
./twillio/tests/TwilioTest.php:        $this->assertEquals('2010-04-01', $client->getVersion());
./twillio/tests/TwilioTest.php:        $this->assertEquals('2008-08-01', $client->getVersion());
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:            $client->account->calls->get('CA123')->status
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $notifs = $client->account->calls->get('CA123')->notifications;
./twillio/tests/TwilioTest.php:        $this->assertEquals('Foo', $notifs->get('NO123')->message_text);
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $iterator = $client->account->calls->getIterator(
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $page = $client->account->calls->getPage(0, 10);
./twillio/tests/TwilioTest.php:        $call = current($page->getItems());
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $page = $client->account->calls->getPage(0, 10);
./twillio/tests/TwilioTest.php:        $call = current($page->getItems());
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $number = $client->account->incoming_phone_numbers->get('PN123');
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $page = $client->account->calls->getPage(0, 10);
./twillio/tests/TwilioTest.php:        foreach ($page->getIterator() as $pageitems) {
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $sms = current($client->account->sms_messages->getPage(0, 10)->getItems());
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')
./twillio/tests/TwilioTest.php:        $client->accounts->getPage(0, 10, array(
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $conf = $client->account->conferences->get('CF123');
./twillio/tests/TwilioTest.php:        $page = $conf->participants->getPage(0, 10);
./twillio/tests/TwilioTest.php:        foreach ($page->getItems() as $participant) {
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        foreach ($client->account->calls->getIterator(0, 1) as $call) {
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        foreach ($client->account->recordings->getIterator(0, 1, array('DateCreated>' => '2011-01-01')) as $recording) {
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $message = $client->account->sms_messages->get('SM123');
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $message = $client->account->sms_messages->get('SM123');
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/TwilioTest.php:        $http->shouldReceive('get')->never()
./twillio/tests/TwilioTest.php:        $message = $client->account->sms_messages->get('SM123');
./twillio/tests/ResourcesTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/ResourcesTest.php:        $nums = $client->account->available_phone_numbers->getLocal('US');
./twillio/tests/ResourcesTest.php:        $numsList = $nums->getList(array('AreaCode' => '510'));
./twillio/tests/ResourcesTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/ResourcesTest.php:        $page = $client->account->available_phone_numbers->getPage('0');
./twillio/tests/ResourcesTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/ResourcesTest.php:        $cn = $client->account->connect_apps->get('CN123');
./twillio/tests/ResourcesTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/ResourcesTest.php:        $cn = $client->account->connect_apps->get('CN123');
./twillio/tests/ResourcesTest.php:        $http->shouldReceive('get')->once()
./twillio/tests/ResourcesTest.php:        $queue = $client->account->queues->get('QQ123');
./twillio/tests/ResourcesTest.php:        $queue = $client->account->queues->get('QQ123');
./twillio/tests/ResourcesTest.php:        $queue = $client->account->queues->get('QQ123');
./twillio/tests/ResourcesTest.php:        $firstMember = $queue->members->get('CA123');
./index-old.php:    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
./about.php:					<p>Since we're all going the same direction, why not get together?</p>
./about.php:					<p>Ridezu is a mobile-social platform to help us all get together and massively change the way we get to work. Our mission is to get 30 million cars off the road, reduce costs for both driving and riding, and help improve the environment.</p>
./about.php:							<p>Mark has been driving up, down and across Silicon Valley for the past 20 years, sometimes carpooling, other times wishing he was carpooling.  The entire time, he's had this idea in the back of his head that the way we get to work is fundamentally very inefficient and wrong.  Why do 9 out of 10 cars have a single passenger?  Why doesn't Bart get to my neighborhood?  Do we really have to send this much pollution into the air?  Couldn't we do this better?</p>
./about.php:							<p>As CEO of Ridezu, Mark works tirelessly towards delighting users and making carpooling a truly preferred way to get to work.  </p>
./about.php:							<p>John is an avid biker who bikes or walks to work whenever possible. Of course weather, distance, time pr<essure all get in the way so the commute comes into play. At one point Mark and John carpooled to work. Now Mark and John work together at a carpooling company.</p>
./about.php:							<p>At Ridezu, John is now matching people so they can ride together, "Tame the commute jungle with Ridezu".</p>
./about.php:							<p>As a San Francisco Bay Area native, Jeff has witnessed first hand the amazing growth of Silicon Valley and the gnarled traffic congestion that growth has caused.  He has spent the last 22 years commuting all across the SF bay area always hoping for a better, stress free way to get to work.  As a San Francisco resident working in Palo Alto, he was appalled by the exorbitant cost and inefficient mass transit options and wondered “Why does it take 2 to 3 transit systems to get from SF to Palo Alto?”.  As an environmental advocate, he couldn’t stand the guilt of contributing to our planet’s pollution problem.  There has to be a better solution.</p>
./awssdk/services/cloudformation.class.php: * CloudFormation creates and deletes all member resources of the stack together and manages all
./awssdk/services/cloudformation.class.php:	 * Returns the template body for a specified stack name. You can get the template for running or
./awssdk/services/cloudformation.class.php:	public function get_template($stack_name, $opt = null)
./awssdk/services/cloudformation.class.php:	 * To get a copy of the template for an existing stack, you can use the <code>GetTemplate</code>
./awssdk/services/swf.class.php: * "PollForActivityTask">PollForActivityTask</a> to get new activity tasks. After a worker
./awssdk/services/swf.class.php: * "PollForDecisionTask">PollForDecisionTask</a> to get decision tasks. After a decider receives a
./awssdk/services/swf.class.php:		$this->operation_prefix = "x-amz-target:SimpleWorkflowService.";
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If a <code>NextPageToken</code> is returned, the result has more than one pages. To get the next page, repeat the call and specify the nextPageToken with all other arguments unchanged.</li>
./awssdk/services/swf.class.php:	public function get_workflow_execution_history($opt = null)
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If on a previous call to this method a <code>NextResultToken</code> was returned, the results have more than one page. To get the next page of results, repeat the call with the <code>nextPageToken</code> and keep all other arguments unchanged.</li>
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If on a previous call to this method a <code>NextPageToken</code> was returned, the results are being paginated. To get the next page of results, repeat the call with the returned token and all other arguments unchanged.</li>
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If on a previous call to this method a <code>NextPageToken</code> was returned, the result has more than one page. To get the next page of results, repeat the call with the returned token and all other arguments unchanged.</li>
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If on a previous call to this method a <code>NextPageToken</code> was returned, the results are being paginated. To get the next page of results, repeat the call with the returned token and all other arguments unchanged.</li>
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If on a previous call to this method a <code>NextPageToken</code> was returned, the results are being paginated. To get the next page of results, repeat the call with the returned token and all other arguments unchanged.</li>
./awssdk/services/swf.class.php:	 * Used by workers to get an <code>ActivityTask</code> from the specified activity
./awssdk/services/swf.class.php:	 * Used by deciders to get a <code>DecisionTask</code> from the specified decision
./awssdk/services/swf.class.php:	 * 	<li><code>nextPageToken</code> - <code>string</code> - Optional - If on a previous call to this method a <code>NextPageToken</code> was returned, the results are being paginated. To get the next page of results, repeat the call with the returned token and all other arguments unchanged. <p class="note">The <code>nextPageToken</code> returned by this action cannot be used with <code>GetWorkflowExecutionHistory</code> to get the next page. You must call <code>PollForDecisionTask</code> again (with the <code>nextPageToken</code>) to retrieve the next page of history records. Calling <code>PollForDecisionTask</code> with a <code>nextPageToken</code> will not return a new decision task.</p> .</li>
./awssdk/services/swf.class.php:	 * 	<li><code>version</code> - <code>string</code> - Required - The version of the workflow type. <p class="note">The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the <code>ListWorkflowTypes</code> action.</p> The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string "arn".</li>
./awssdk/services/swf.class.php:	 * 				<li><code>signalName</code> - <code>string</code> - Required - The name of the signal.The target workflow execution will use the signal name and input to process the signal. This field is required.</li>
./awssdk/services/swf.class.php:	 * 				<li><code>input</code> - <code>string</code> - Optional - Optional input to be provided with the signal.The target workflow execution will use the signal name and input to process the signal.</li>
./awssdk/services/swf.class.php:	 * 	<li><code>signalName</code> - <code>string</code> - Required - The name of the signal. This name must be meaningful to the target workflow.</li>
./awssdk/services/swf.class.php:	 * 	<li><code>input</code> - <code>string</code> - Optional - Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.</li>
./awssdk/services/as.class.php:	 * security groups. However, you can't use Amazon EC2 security groups together with Amazon VPC
./awssdk/services/as.class.php:	 * @param array $tags (Required) The tag to be created or updated. Each tag should be defined by its resource type, resource ID, key, value, and a propagate flag. The resource type and resource ID identify the type and name of resource for which the tag is created. Currently, <code>auto-scaling-group</code> is the only supported resource type. The valid value for the resource ID is <em>groupname</em>. The <code>PropagateAtLaunch</code> flag defines whether the new tag will be applied to instances launched by the Auto Scaling group. Valid values are <code>true</code> or <code>false</code>. However, instances that are already running will not get the new or updated tag. Likewise, when you modify a tag, the updated version will be applied only to new instances launched by the Auto Scaling group after the change. Running instances that had the previous version of the tag will continue to have the older tag. When you create a tag and a tag of the same name already exists, the operation overwrites the previous tag definition, but you will not get an error message. <ul>
./awssdk/services/as.class.php:	 * get the next page, call this action again with the returned token as the <code>NextToken</code>
./awssdk/services/as.class.php:	 * get the next page, call this action again with the returned token as the <code>NextToken</code>
./awssdk/services/as.class.php:	 * includes a token, there are more records available. To get the additional records, repeat the
./awssdk/services/as.class.php:	 * available. To get the additional records, repeat the request with the response token as the
./awssdk/services/as.class.php:	 * 	<li><code>MinAdjustmentStep</code> - <code>integer</code> - Optional - Used with <code>AdjustmentType</code> with the value <code>PercentChangeInCapacity</code>, the scaling policy changes the <code>DesiredCapacity</code> of the Auto Scaling group by at least the number of instances specified in the value. You will get a <code>ValidationError</code> if you use <code>MinAdjustmentStep</code> on a policy with an <code>AdjustmentType</code> other than <code>PercentChangeInCapacity</code>.</li>
./awssdk/services/dynamodb.class.php:		$this->operation_prefix = 'x-amz-target:DynamoDB_20111205.';
./awssdk/services/dynamodb.class.php:		$info = $this->get_attribute_value_info($value);
./awssdk/services/dynamodb.class.php:	protected function get_attribute_value_info($value, $depth = 0)
./awssdk/services/dynamodb.class.php:				// Recursively get the info for this sub-value. The depth param only allows one level of recursion
./awssdk/services/dynamodb.class.php:				$sub_info = $this->get_attribute_value_info($sub_value, $depth + 1);
./awssdk/services/dynamodb.class.php:	 * like strings but get base64 encoded automatically. The DynamoDB service decodes these
./awssdk/services/dynamodb.class.php:			$values = func_get_args();
./awssdk/services/dynamodb.class.php:	 * starting with the next item to get.
./awssdk/services/dynamodb.class.php:	 * can get the next page of results. If necessary, your application needs its own logic to
./awssdk/services/dynamodb.class.php:	 * 	<li><code>RequestItems</code> - <code>array</code> - Required - A map of the table name and corresponding items to get by primary key. While requesting items, each table name can be invoked only once per operation. <ul>
./awssdk/services/dynamodb.class.php:	public function batch_get_item($opt = null)
./awssdk/services/dynamodb.class.php:	 * 	<li><code>ReturnValues</code> - <code>string</code> - Optional - Use this parameter if you want to get the attribute name-value pairs before or after they are modified. For <code>PUT</code> operations, the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>. For update operations, the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code> or <code>UPDATED_NEW</code>.<ul><li> <code>NONE</code>: Nothing is returned.</li><li> <code>ALL_OLD</code>: Returns the attributes of the item as they were before the operation.</li><li> <code>UPDATED_OLD</code>: Returns the values of the updated attributes, only, as they were before the operation.</li><li> <code>ALL_NEW</code>: Returns all the attributes and their new values after the operation.</li><li> <code>UPDATED_NEW</code>: Returns the values of the updated attributes, only, as they are after the operation.</li></ul> [Allowed values: <code>NONE</code>, <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code>, <code>UPDATED_NEW</code>]</li>
./awssdk/services/dynamodb.class.php:	 * 	<li><code>TableName</code> - <code>string</code> - Required - The name of the table in which you want to get an item. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period). [Constraints: The value must be between 3 and 255 characters, and must match the following regular expression pattern: <code>[a-zA-Z0-9_.-]+</code>]</li>
./awssdk/services/dynamodb.class.php:	public function get_item($opt = null)
./awssdk/services/dynamodb.class.php:	 * 	<li><code>ReturnValues</code> - <code>string</code> - Optional - Use this parameter if you want to get the attribute name-value pairs before or after they are modified. For <code>PUT</code> operations, the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>. For update operations, the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code> or <code>UPDATED_NEW</code>.<ul><li> <code>NONE</code>: Nothing is returned.</li><li> <code>ALL_OLD</code>: Returns the attributes of the item as they were before the operation.</li><li> <code>UPDATED_OLD</code>: Returns the values of the updated attributes, only, as they were before the operation.</li><li> <code>ALL_NEW</code>: Returns all the attributes and their new values after the operation.</li><li> <code>UPDATED_NEW</code>: Returns the values of the updated attributes, only, as they are after the operation.</li></ul> [Allowed values: <code>NONE</code>, <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code>, <code>UPDATED_NEW</code>]</li>
./awssdk/services/dynamodb.class.php:	 * the composite key. Use the <code>ScanIndexForward</code> parameter to get results in forward or
./awssdk/services/dynamodb.class.php:	 * Provide a <code>ScanFilter</code> to get more specific results.
./awssdk/services/dynamodb.class.php:	 * 	<li><code>ReturnValues</code> - <code>string</code> - Optional - Use this parameter if you want to get the attribute name-value pairs before or after they are modified. For <code>PUT</code> operations, the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>. For update operations, the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code> or <code>UPDATED_NEW</code>.<ul><li> <code>NONE</code>: Nothing is returned.</li><li> <code>ALL_OLD</code>: Returns the attributes of the item as they were before the operation.</li><li> <code>UPDATED_OLD</code>: Returns the values of the updated attributes, only, as they were before the operation.</li><li> <code>ALL_NEW</code>: Returns all the attributes and their new values after the operation.</li><li> <code>UPDATED_NEW</code>: Returns the values of the updated attributes, only, as they are after the operation.</li></ul> [Allowed values: <code>NONE</code>, <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code>, <code>UPDATED_NEW</code>]</li>
./awssdk/services/cloudwatch.class.php: * Use the following links to get started using the <em>Amazon CloudWatch API Reference</em>:
./awssdk/services/cloudwatch.class.php:	public function get_metric_statistics($namespace, $metric_name, $start_time, $end_time, $period, $statistics, $unit, $opt = null)
./awssdk/services/sdb.class.php:	public function get_domain_list($pcre = null)
./awssdk/services/sdb.class.php:	public function get_attributes($domain_name, $item_name, $attribute_name = null, $opt = null)
./awssdk/services/cloudfront.class.php:		$method_arguments = func_get_args();
./awssdk/services/cloudfront.class.php:			$cache_id = $this->key . '_' . get_class($this) . '_' . $method . sha1($path) . '_' . sha1(serialize($method_arguments));
./awssdk/services/cloudfront.class.php:		$headers = $request->get_response_header();
./awssdk/services/cloudfront.class.php:		$data =  new $this->response_class($headers, $this->parse_callback($request->get_response_body()), $request->get_response_code());
./awssdk/services/cloudfront.class.php:		if ((integer) $request->get_response_code() === 500 || (integer) $request->get_response_code() === 503)
./awssdk/services/cloudfront.class.php:	 * @param CFSimpleXML|CFResponse|string $xml (Required) The source configuration XML to make updates to. Can be the <CFSimpleXML> body of a <get_distribution_config()> response, the entire <CFResponse> of a <get_distribution_config()> response, or a string of XML generated by <generate_config_xml()> or <update_config_xml()>.
./awssdk/services/cloudfront.class.php:	 * @param CFSimpleXML|CFResponse|string $xml (Required) The source DistributionConfig XML to make updates to. Can be the <CFSimpleXML> body of a <get_distribution_config()> response, the entire <CFResponse> of a <get_distribution_config()> response, or a string of XML generated by <generate_config_xml()> or <update_config_xml()>.
./awssdk/services/cloudfront.class.php:	 * @param CFSimpleXML|CFResponse|string $xml (Required) The source configuration XML to make updates to. Can be the <CFSimpleXML> body of a <get_oai_config()> response, the entire <CFResponse> of a <get_oai_config()> response, or a string of XML generated by <generate_oai_xml()> or <update_oai_xml()>.
./awssdk/services/cloudfront.class.php:	 * 	<li><code>Marker</code> - <code>string</code> - Optional - Use this setting when paginating results to indicate where in your list of distributions to begin. The results include distributions in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last distribution on that page).</li>
./awssdk/services/cloudfront.class.php:	public function get_distribution_info($distribution_id, $opt = null)
./awssdk/services/cloudfront.class.php:	 * @param string $etag (Required) The <code>ETag</code> header value retrieved from <get_distribution_config()>.
./awssdk/services/cloudfront.class.php:	public function get_distribution_config($distribution_id, $opt = null)
./awssdk/services/cloudfront.class.php:	 * @param string $etag (Required) The ETag header value retrieved from <get_distribution_config()>.
./awssdk/services/cloudfront.class.php:	 * 	<li><code>Marker</code> - <code>string</code> - Optional - Use this when paginating results to indicate where in your list of distributions to begin. The results include distributions in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last distribution on that page).</li>
./awssdk/services/cloudfront.class.php:	public function get_oai($identity_id, $opt = null)
./awssdk/services/cloudfront.class.php:	 * @param string $etag (Required) The <code>ETag</code> header value retrieved from a call to <get_oai()>.
./awssdk/services/cloudfront.class.php:	public function get_oai_config($identity_id, $opt = null)
./awssdk/services/cloudfront.class.php:	 * @param string $etag (Required) The ETag header value retrieved from a call to <get_distribution_config()>.
./awssdk/services/cloudfront.class.php:	 * 	<li><code>Marker</code> - <code>string</code> - Optional - Use this when paginating results to indicate where in the list of invalidations to begin. The results include invalidations in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> parameter to the value of the <code>NextMarker</code> parameter from the current page's response, which is also the ID of the last invalidation on that page.</li>
./awssdk/services/cloudfront.class.php:	public function get_invalidation($distribution_id, $invalidation_id, $opt = null)
./awssdk/services/cloudfront.class.php:	public function get_distribution_list($pcre = null)
./awssdk/services/cloudfront.class.php:	public function get_streaming_distribution_list($pcre = null)
./awssdk/services/cloudfront.class.php:	public function get_oai_list($pcre = null)
./awssdk/services/cloudfront.class.php:	 * @param string $distribution_hostname (Required) The hostname of the distribution. Obtained from <create_distribution()> or <get_distribution_info()>.
./awssdk/services/cloudfront.class.php:	public function get_private_object_url($distribution_hostname, $filename, $expires, $opt = null)
./awssdk/services/sns.class.php: * Use the following links to get started using the <em>Amazon Simple Notification Service API
./awssdk/services/sns.class.php:	public function get_topic_list($pcre = null)
./awssdk/services/sns.class.php:	 * @param string $subscription_arn (Required) The ARN of the subscription whose properties you want to get.
./awssdk/services/sns.class.php:	public function get_subscription_attributes($subscription_arn, $opt = null)
./awssdk/services/sns.class.php:	 * @param string $topic_arn (Required) The ARN of the topic whose properties you want to get.
./awssdk/services/sns.class.php:	public function get_topic_attributes($topic_arn, $opt = null)
./awssdk/services/sns.class.php:	 * also returned. Use the NextToken parameter in a new ListSubscriptions call to get further
./awssdk/services/sns.class.php:	 * call to get further results.
./awssdk/services/sns.class.php:	 * NextToken parameter in a new ListTopics call to get further results.
./awssdk/services/cloudsearch.class.php:	 * @param string $access_policies (Required) An IAM access policy as described in <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?AccessPolicyLanguage.html" target="_blank">The Access Policy Language</a> in <em>Using AWS Identity and Access Management</em>. The maximum size of an access policy document is 100 KB. Example: <code>{"Statement": [{"Effect":"Allow", "Action": "*", "Resource": "arn:aws:cs:us-east-1:1234567890:search/movies", "Condition": { "IpAddress": { aws:SourceIp": ["203.0.113.1/32"] } }}, {"Effect":"Allow", "Action": "*", "Resource": "arn:aws:cs:us-east-1:1234567890:documents/movies", "Condition": { "IpAddress": { aws:SourceIp": ["203.0.113.1/32"] } }} ]}</code>
./awssdk/services/ses.class.php:	public function get_identity_dkim_attributes($identities, $opt = null)
./awssdk/services/ses.class.php:	public function get_identity_notification_attributes($identities, $opt = null)
./awssdk/services/ses.class.php:	public function get_identity_verification_attributes($identities, $opt = null)
./awssdk/services/ses.class.php:	public function get_send_quota($opt = null)
./awssdk/services/ses.class.php:	public function get_send_statistics($opt = null)
./awssdk/services/iam.class.php: * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/" target="_blank">Using IAM</a>.
./awssdk/services/iam.class.php: * "http://aws.amazon.com/iam/" target="_blank">AWS Identity and Access Management (IAM)</a>. For
./awssdk/services/iam.class.php: * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/iam.class.php: * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/iam.class.php: * "http://aws.amazon.com/documentation/" target=
./awssdk/services/iam.class.php:	 * target="_blank">Managing Passwords</a>.
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * target="_blank">Using an Alias for Your AWS Account ID</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * 	<li><code>Path</code> - <code>string</code> - Optional - The path to the group. For more information about paths, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <em>Using AWS Identity and Access Management</em>. This parameter is optional. If it is not included, it defaults to a slash (/). [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>(\u002F)|(\u002F[\u0021-\u007F]+\u002F)</code>]</li>
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * 	<li><code>Path</code> - <code>string</code> - Optional - The path to the instance profile. For more information about paths, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <em>Using AWS Identity and Access Management</em>. This parameter is optional. If it is not included, it defaults to a slash (/). [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>(\u002F)|(\u002F[\u0021-\u007F]+\u002F)</code>]</li>
./awssdk/services/iam.class.php:	 * target="_blank">Managing Passwords</a> in <em>Using IAM</em>.
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * 	<li><code>Path</code> - <code>string</code> - Optional - The path to the role. For more information about paths, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <em>Using AWS Identity and Access Management</em>. This parameter is optional. If it is not included, it defaults to a slash (/). [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>(\u002F)|(\u002F[\u0021-\u007F]+\u002F)</code>]</li>
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * 	<li><code>Path</code> - <code>string</code> - Optional - The path for the user name. For more information about paths, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <em>Using AWS Identity and Access Management</em>. This parameter is optional. If it is not included, it defaults to a slash (/). [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>(\u002F)|(\u002F[\u0021-\u007F]+\u002F)</code>]</li>
./awssdk/services/iam.class.php:	 * target="_blank">EnableMFADevice</a> to attach the MFA device to an IAM user. For more
./awssdk/services/iam.class.php:	 * target="_blank">Using a Virtual MFA Device</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * 	<li><code>Path</code> - <code>string</code> - Optional - The path for the virtual MFA device. For more information about paths, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <em>Using AWS Identity and Access Management</em>. This parameter is optional. If it is not included, it defaults to a slash (/). [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>(\u002F)|(\u002F[\u0021-\u007F]+\u002F)</code>]</li>
./awssdk/services/iam.class.php:	 * 	<a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/AccountAlias.html" target=
./awssdk/services/iam.class.php:	 * target="blank">DeleteLoadBalancerListeners</a> in the <em>Elastic Load Balancing API
./awssdk/services/iam.class.php:	public function get_account_password_policy($opt = null)
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	public function get_account_summary($opt = null)
./awssdk/services/iam.class.php:	public function get_group($group_name, $opt = null)
./awssdk/services/iam.class.php:	 * @param string $policy_name (Required) Name of the policy document to get. [Constraints: The value must be between 1 and 128 characters, and must match the following regular expression pattern: <code>[\w+=,.@-]*</code>]
./awssdk/services/iam.class.php:	public function get_group_policy($group_name, $policy_name, $opt = null)
./awssdk/services/iam.class.php:	 * @param string $instance_profile_name (Required) Name of the instance profile to get information about. [Constraints: The value must be between 1 and 128 characters, and must match the following regular expression pattern: <code>[\w+=,.@-]*</code>]
./awssdk/services/iam.class.php:	public function get_instance_profile($instance_profile_name, $opt = null)
./awssdk/services/iam.class.php:	public function get_login_profile($user_name, $opt = null)
./awssdk/services/iam.class.php:	 * @param string $role_name (Required) Name of the role to get information about. [Constraints: The value must be between 1 and 64 characters, and must match the following regular expression pattern: <code>[\w+=,.@-]*</code>]
./awssdk/services/iam.class.php:	public function get_role($role_name, $opt = null)
./awssdk/services/iam.class.php:	 * @param string $policy_name (Required) Name of the policy document to get. [Constraints: The value must be between 1 and 128 characters, and must match the following regular expression pattern: <code>[\w+=,.@-]*</code>]
./awssdk/services/iam.class.php:	public function get_role_policy($role_name, $policy_name, $opt = null)
./awssdk/services/iam.class.php:	public function get_server_certificate($server_certificate_name, $opt = null)
./awssdk/services/iam.class.php:	 * 	<li><code>UserName</code> - <code>string</code> - Optional - Name of the user to get information about. This parameter is optional. If it is not included, it defaults to the user making the request. [Constraints: The value must be between 1 and 128 characters, and must match the following regular expression pattern: <code>[\w+=,.@-]*</code>]</li>
./awssdk/services/iam.class.php:	public function get_user($opt = null)
./awssdk/services/iam.class.php:	 * @param string $policy_name (Required) Name of the policy document to get. [Constraints: The value must be between 1 and 128 characters, and must match the following regular expression pattern: <code>[\w+=,.@-]*</code>]
./awssdk/services/iam.class.php:	public function get_user_policy($user_name, $policy_name, $opt = null)
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/AccountAlias.html" target=
./awssdk/services/iam.class.php:	 * 	<li><code>PathPrefix</code> - <code>string</code> - Optional - The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>. This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>\u002F[\u0021-\u007F]*</code>]</li>
./awssdk/services/iam.class.php:	 * 	<li><code>PathPrefix</code> - <code>string</code> - Optional - The path prefix for filtering the results. For example: <code>/application_abc/component_xyz/</code>, which would get all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>. This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>\u002F[\u0021-\u007F]*</code>]</li>
./awssdk/services/iam.class.php:	 * 	<li><code>PathPrefix</code> - <code>string</code> - Optional - The path prefix for filtering the results. For example: <code>/application_abc/component_xyz/</code>, which would get all roles whose path starts with <code>/application_abc/component_xyz/</code>. This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>\u002F[\u0021-\u007F]*</code>]</li>
./awssdk/services/iam.class.php:	 * 	<li><code>PathPrefix</code> - <code>string</code> - Optional - The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>. This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>\u002F[\u0021-\u007F]*</code>]</li>
./awssdk/services/iam.class.php:	 * 	<li><code>PathPrefix</code> - <code>string</code> - Optional - The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>. This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>\u002F[\u0021-\u007F]*</code>]</li>
./awssdk/services/iam.class.php:	 * target="_blank">Overview of Policies</a> in <em>Using AWS Identity and Access Management</em>.
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/iam.class.php:	 * target="_blank">Overview of Policies</a> in <em>Using AWS Identity and Access Management</em>.
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/iam.class.php:	 * target="_blank">Overview of Policies</a> in <em>Using AWS Identity and Access Management</em>.
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/iam.class.php:	 * target="_blank">Managing Keys and Certificates</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Renaming.html" target=
./awssdk/services/iam.class.php:	 * object and the target object. For example, to change Managers to MGRs, the entity making the
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/PermissionsAndPolicies.html" target=
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/ManagingServerCerts.html" target=
./awssdk/services/iam.class.php:	 * source object and the target object. For example, to change the name from ProductionCert to
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/PermissionsAndPolicies.html" target=
./awssdk/services/iam.class.php:	 * target="_blank">Managing Keys and Certificates</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Renaming.html" target=
./awssdk/services/iam.class.php:	 * and the target object. For example, to change Bob to Robert, the entity making the request must
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/PermissionsAndPolicies.html" target=
./awssdk/services/iam.class.php:	 * target="_blank">Limitations on IAM Entities</a> in <em>Using AWS Identity and Access
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/iam.class.php:	 * 	<li><code>Path</code> - <code>string</code> - Optional - The path for the server certificate. For more information about paths, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <em>Using AWS Identity and Access Management</em>. This parameter is optional. If it is not included, it defaults to a slash (/). [Constraints: The value must be between 1 and 512 characters, and must match the following regular expression pattern: <code>(\u002F)|(\u002F[\u0021-\u007F]+\u002F)</code>]</li>
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/iam.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/storagegateway.class.php: * Use the following links to get started using the <em>AWS Storage Gateway Service API
./awssdk/services/storagegateway.class.php:		$this->operation_prefix = 'x-amz-target:StorageGateway_20120430.';
./awssdk/services/storagegateway.class.php:		// Parse the query string from the URL in the location header to get the activation key
./awssdk/services/storagegateway.class.php:	 * such as the volume ARN, size and the iSCSI target ARN that initiators can use to connect to the
./awssdk/services/storagegateway.class.php:	 * volume target.
./awssdk/services/storagegateway.class.php:	 * 	<li><code>TargetName</code> - <code>string</code> - Required - The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. For example, specifying <code>TargetName</code> as <em>myvolume</em> results in the target ARN of arn:aws:storagegateway:us-east-1:111122223333:gateway/mygateway/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes of a gateway. Length: Minimum length of 1. Maximum length of 200. Constraints: The name can contain lower case letters, numbers, periods (.), and hyphens (-). [Constraints: The value must be between 1 and 200 characters, and must match the following regular expression pattern: <code>^[-\.;a-z0-9]+$</code>]</li>
./awssdk/services/storagegateway.class.php:	 * 	<li><code>NetworkInterfaceId</code> - <code>string</code> - Required - The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use <code>DescribeGatewayInformation</code> to get a list of the network interfaces available on a gateway. <em>Valid Values</em>: A valid IP address. [Constraints: The value must match the following regular expression pattern: <code>\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z</code>]</li>
./awssdk/services/storagegateway.class.php:	 * specified iSCSI target and initiator pair.
./awssdk/services/storagegateway.class.php:	 * 	<li><code>TargetARN</code> - <code>string</code> - Required - The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</li>
./awssdk/services/storagegateway.class.php:	 * 	<li><code>InitiatorName</code> - <code>string</code> - Required - The iSCSI initiator that connects to the target. Length: 1 to 255 characters. <em>Valid Values</em>: lowercase letters, numbers, periods (.), and hyphens (-). [Constraints: The value must be between 1 and 255 characters, and must match the following regular expression pattern: <code>[0-9a-z:.-]+</code>]</li>
./awssdk/services/storagegateway.class.php:	 * credentials information for a specified iSCSI target, one for each target-initiator pair.
./awssdk/services/storagegateway.class.php:	 * 	<li><code>TargetARN</code> - <code>string</code> - Required - The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</li>
./awssdk/services/storagegateway.class.php:	 * 	<li><code>VolumeARNs</code> - <code>string|array</code> - Required - An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must from the same gateway. Use <code>ListVolumes</code> to get volume ARNs for a gateway. Pass a string for a single value, or an indexed array for multiple values.</li>
./awssdk/services/storagegateway.class.php:	 * When you make a shutdown request, you will get a <code>200 OK</code> success response
./awssdk/services/storagegateway.class.php:	 * When you make a request, you will get a 200 OK success response immediately. However, it might
./awssdk/services/storagegateway.class.php:	 * specified iSCSI target. By default, a gateway does not have CHAP enabled; however, for added
./awssdk/services/storagegateway.class.php:	 * 	<li><code>TargetARN</code> - <code>string</code> - Required - The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</li>
./awssdk/services/storagegateway.class.php:	 * 	<li><code>SecretToAuthenticateInitiator</code> - <code>string</code> - Required - The secret key that the initiator (e.g. Windows client) must provide to participate in mutual CHAP with the target. Length: Minimum length of 12. Maximum length of 16.</li>
./awssdk/services/storagegateway.class.php:	 * 	<li><code>InitiatorName</code> - <code>string</code> - Required - The iSCSI initiator that connects to the target. Length: Minimum length of 1. Maximum length of 255. <em>Valid Values</em>: The initiator name can contain lowercase letters, numbers, periods (.), and hyphens (-). [Constraints: The value must be between 1 and 255 characters, and must match the following regular expression pattern: <code>[0-9a-z:.-]+</code>]</li>
./awssdk/services/storagegateway.class.php:	 * 	<li><code>SecretToAuthenticateTarget</code> - <code>string</code> - Optional - The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client). Length: Minimum length of 12. Maximum length of 16.</li>
./awssdk/services/storagegateway.class.php:	 * When you make this request, you get a <code>200 OK</code> success response immediately.
./awssdk/services/rds.class.php: * Amazon RDS Query APIs and data types. To get started with Amazon RDS, go to the <a href=
./awssdk/services/rds.class.php:	 * @param string $target_db_snapshot_identifier (Required) The identifier for the copied snapshot. Constraints:<ul><li>Cannot be null, empty, or blank</li><li>Must contain from 1 to 255 alphanumeric characters or hyphens</li><li>First character must be a letter</li><li>Cannot end with a hyphen or contain two consecutive hyphens</li></ul>Example: <code>my-db-snapshot</code>
./awssdk/services/rds.class.php:	public function copy_db_snapshot($source_db_snapshot_identifier, $target_db_snapshot_identifier, $opt = null)
./awssdk/services/rds.class.php:		$opt['TargetDBSnapshotIdentifier'] = $target_db_snapshot_identifier;
./awssdk/services/rds.class.php:	 * 	<li><code>OptionGroupName</code> - <code>string</code> - Optional - The name of the option group to describe. Cannot be supplied together with EngineName or MajorEngineVersion.</li>
./awssdk/services/rds.class.php:	 * Creates a new DB Instance from a DB snapshot. The target database is created from the source
./awssdk/services/rds.class.php:	 * before the latestRestorableTime for up to backupRetentionPeriod days. The target database is
./awssdk/services/rds.class.php:	 * @param string $target_db_instance_identifier (Required) The name of the new database instance to be created. Constraints:<ul><li>Must contain from 1 to 63 alphanumeric characters or hyphens</li><li>First character must be a letter</li><li>Cannot end with a hyphen or contain two consecutive hyphens</li></ul>
./awssdk/services/rds.class.php:	public function restore_db_instance_to_point_in_time($source_db_instance_identifier, $target_db_instance_identifier, $opt = null)
./awssdk/services/rds.class.php:		$opt['TargetDBInstanceIdentifier'] = $target_db_instance_identifier;
./awssdk/services/s3.class.php: * To get the most out of Amazon S3, you need to understand a few simple concepts. Amazon S3 stores data
./awssdk/services/s3.class.php:		 * 	These values get passed directly to the cURL methods in RequestCore.
./awssdk/services/s3.class.php:		$method_arguments = func_get_args();
./awssdk/services/s3.class.php:			$cache_id = $this->key . '_' . get_class($this) . '_' . $bucket . '_' . sha1(serialize($method_arguments));
./awssdk/services/s3.class.php:					$mime_type = CFMimeTypes::get_mimetype($extension);
./awssdk/services/s3.class.php:		$headers = $request->get_response_header();
./awssdk/services/s3.class.php:		$data = new $this->response_class($headers, $this->parse_callback($request->get_response_body()), $request->get_response_code());
./awssdk/services/s3.class.php:		if ((integer) $request->get_response_code() === 307) // Temporary redirect to new endpoint.
./awssdk/services/s3.class.php:		elseif ((integer) $request->get_response_code() === 500 || (integer) $request->get_response_code() === 503)
./awssdk/services/s3.class.php:	public function get_bucket_region($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_bucket_headers($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_bucket_acl($bucket, $opt = null)
./awssdk/services/s3.class.php:			$canonical = $this->get_canonical_user_id();
./awssdk/services/s3.class.php:	public function get_object($bucket, $filename, $opt = null)
./awssdk/services/s3.class.php:	public function get_object_headers($bucket, $filename, $opt = null)
./awssdk/services/s3.class.php:	 * NOTE: <strong>This method is paginated</strong>, and will not return more than <code>max-keys</code> keys. If you want to retrieve a list of all keys, you will need to make multiple calls to this function using the <code>marker</code> option to specify the pagination offset (the key of the last processed key--lexically ordered) and the <code>IsTruncated</code> response key to detect when all results have been processed. See: <a href="http://docs.amazonwebservices.com/AmazonS3/latest/API/index.html?RESTBucketGET.html">the S3 REST documentation for get_bucket</a> for more information.
./awssdk/services/s3.class.php:		if ($metadata = $this->get_object_metadata($bucket, $filename))
./awssdk/services/s3.class.php:	public function get_object_acl($bucket, $filename, $opt = null)
./awssdk/services/s3.class.php:		$metadata = $this->get_object_metadata($bucket, $filename);
./awssdk/services/s3.class.php:			$canonical = $this->get_canonical_user_id();
./awssdk/services/s3.class.php:	 * @param string $canonical_id (Required) The canonical ID for the bucket owner. This is provided as the `id` return value from <get_canonical_user_id()>.
./awssdk/services/s3.class.php:	 * @param string $canonical_name (Required) The canonical display name for the bucket owner. This is provided as the `display_name` value from <get_canonical_user_id()>.
./awssdk/services/s3.class.php:	public function get_logs($bucket, $opt = null)
./awssdk/services/s3.class.php:	 * @param string $target_bucket (Required) The name of the bucket to store the logs in.
./awssdk/services/s3.class.php:	 * @param string $target_prefix (Required) The prefix to give to the log file names.
./awssdk/services/s3.class.php:	public function enable_logging($bucket, $target_bucket, $target_prefix, $opt = null)
./awssdk/services/s3.class.php:		$LoggingEnabled->addChild('TargetBucket', $target_bucket);
./awssdk/services/s3.class.php:		$LoggingEnabled->addChild('TargetPrefix', $target_prefix);
./awssdk/services/s3.class.php:		$TargetGrants = $LoggingEnabled->addChild('TargetGrants');
./awssdk/services/s3.class.php:				$grant = $TargetGrants->addChild('Grant');
./awssdk/services/s3.class.php:		$header = $this->get_bucket_headers($bucket);
./awssdk/services/s3.class.php:		$header = $this->get_object_headers($bucket, $filename);
./awssdk/services/s3.class.php:		$response = $this->get_bucket_policy($bucket);
./awssdk/services/s3.class.php:	public function get_bucket_object_count($bucket)
./awssdk/services/s3.class.php:		return count($this->get_object_list($bucket));
./awssdk/services/s3.class.php:	public function get_bucket_filesize($bucket, $friendly_format = false)
./awssdk/services/s3.class.php:	public function get_object_filesize($bucket, $filename, $friendly_format = false)
./awssdk/services/s3.class.php:		$object = $this->get_object_headers($bucket, $filename);
./awssdk/services/s3.class.php:		$metadata = $this->get_object_metadata($bucket, $filename);
./awssdk/services/s3.class.php:		$metadata = $this->get_object_metadata($bucket, $filename);
./awssdk/services/s3.class.php:	public function get_bucket_list($pcre = null)
./awssdk/services/s3.class.php:	public function get_object_list($bucket, $opt = null)
./awssdk/services/s3.class.php:		$list = $this->get_object_list($bucket, array('pcre' => $pcre));
./awssdk/services/s3.class.php:		// Gather all nodes together into a single array
./awssdk/services/s3.class.php:			$markers = array_merge($versions->body->DeleteMarker()->getArrayCopy(), $versions->body->Version()->getArrayCopy());
./awssdk/services/s3.class.php:			$markers = $versions->body->DeleteMarker()->getArrayCopy();
./awssdk/services/s3.class.php:			$markers = $versions->body->Version()->getArrayCopy();
./awssdk/services/s3.class.php:			// Gather all nodes together into a single array
./awssdk/services/s3.class.php:				$markers = array_merge($markers, $versions->body->DeleteMarker()->getArrayCopy(), $versions->body->Version()->getArrayCopy());
./awssdk/services/s3.class.php:				$markers = array_merge($markers, $versions->body->DeleteMarker()->getArrayCopy());
./awssdk/services/s3.class.php:				$markers = array_merge($markers, $versions->body->Version()->getArrayCopy());
./awssdk/services/s3.class.php:	public function get_object_metadata($bucket, $filename, $opt = null)
./awssdk/services/s3.class.php:		$this->batch($batch)->get_object_acl($bucket, $filename); // Get ACL info
./awssdk/services/s3.class.php:		$this->batch($batch)->get_object_headers($bucket, $filename); // Get content-type
./awssdk/services/s3.class.php:	public function get_object_url($bucket, $filename, $preauth = 0, $opt = null)
./awssdk/services/s3.class.php:	public function get_torrent_url($bucket, $filename, $preauth = 0)
./awssdk/services/s3.class.php:		return $this->get_object_url($bucket, $filename, $preauth, array(
./awssdk/services/s3.class.php:	public function get_versioning_status($bucket, $opt = null)
./awssdk/services/s3.class.php:		$opt['body'] = $policy->get_json();
./awssdk/services/s3.class.php:	public function get_bucket_policy($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_bucket_notifications($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_multipart_counts($filesize, $part_size)
./awssdk/services/s3.class.php:		$pieces = $this->get_multipart_counts($upload_filesize, (integer) $opt['partSize']);
./awssdk/services/s3.class.php:	public function get_website_config($bucket, $opt = null)
./awssdk/services/s3.class.php:	 * 			<li><code>prefix</code> - <code>string</code> - Required - The Amazon S3 object prefix which targets the file(s) for expiration.</li>
./awssdk/services/s3.class.php:	 * 				<li><code>days</code> - <code>integer</code> - Required - The number of days until the targetted objects expire from the bucket.</li>
./awssdk/services/s3.class.php:	public function get_object_expiration_config($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_bucket_tags($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_cors_config($bucket, $opt = null)
./awssdk/services/s3.class.php:	public function get_canonical_user_id()
./awssdk/services/elasticbeanstalk.class.php:	 * When you launch an environment using a configuration template, the environment gets a copy of
./awssdk/services/elasticbeanstalk.class.php:	 * set. You can get the draft configuration using <code>DescribeConfigurationSettings</code> while
./awssdk/services/emr.class.php:	 * 		<li><code>InstanceCount</code> - <code>integer</code> - Required - Target number of instances for the instance group.</li>
./awssdk/services/emr.class.php:	 * group. The input parameters include the new target instance count for the group and the
./awssdk/services/emr.class.php:	 * 			<li><code>InstanceCount</code> - <code>integer</code> - Required - Target size for the instance group.</li>
./awssdk/services/emr.class.php:	 * 				<li><code>InstanceCount</code> - <code>integer</code> - Required - Target number of instances for the instance group.</li>
./awssdk/services/elasticache.class.php: * In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into
./awssdk/services/elb.class.php:	 * 		<li><code>Target</code> - <code>string</code> - Required - Specifies the instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535. <p class="note">TCP is the default, specified as a TCP: port pair, for example "TCP:5000". In this case a healthcheck simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy. SSL is also specified as SSL: port pair, for example, SSL:5000. For HTTP or HTTPS protocol, the situation is different. You have to include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example "HTTP:80/weather/us/wa/seattle". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than "200 OK" within the timeout period is considered unhealthy. The total length of the HTTP ping target needs to be 1024 16-bit Unicode characters or less.</p></li>
./awssdk/services/elb.class.php:	 * 		<li><code>SSLCertificateId</code> - <code>string</code> - Optional - The ARN string of the server certificate. To get the ARN of the server certificate, call the AWS Identity and Access Management <a href="http://docs.amazonwebservices.com/IAM/latest/APIReference/index.html?API_UploadServerCertificate.html">UploadServerCertificate</a> API.</li>
./awssdk/services/elb.class.php:	 * 		<li><code>SSLCertificateId</code> - <code>string</code> - Optional - The ARN string of the server certificate. To get the ARN of the server certificate, call the AWS Identity and Access Management <a href="http://docs.amazonwebservices.com/IAM/latest/APIReference/index.html?API_UploadServerCertificate.html">UploadServerCertificate</a> API.</li>
./awssdk/services/elb.class.php:	 * @param string $policy_type_name (Required) The name of the base policy type being used to create this policy. To get the list of policy types, use the <code>DescribeLoadBalancerPolicyTypes</code> action.
./awssdk/services/sts.class.php: * "http://docs.amazonwebservices.com/IAM/latest/UsingSTS/Welcome.html" target="_blank">Using
./awssdk/services/sts.class.php: * "http://docs.amazonwebservices.com/general/latest/gr/signing_aws_api_requests.html" target=
./awssdk/services/sts.class.php: * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html" target=
./awssdk/services/sts.class.php: * "http://aws.amazon.com/documentation/" target=
./awssdk/services/sts.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/TokenPermissions.html" target=
./awssdk/services/sts.class.php:	 * "http://docs.amazonwebservices.com/IAM/latest/UserGuide/CreatingFedTokens.html" target=
./awssdk/services/sts.class.php:	 * 	<li><code>Policy</code> - <code>string</code> - Optional - A policy specifying the permissions to associate with the credentials. The caller can delegate their own permissions by specifying a policy, and both policies will be checked when a service call is made. For more information about how permissions work in the context of temporary credentials, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/TokenPermissions.html" target="_blank">Controlling Permissions in Temporary Credentials</a> in <em>Using AWS Identity and Access Management</em>. [Constraints: The value must be between 1 and 2048 characters, and must match the following regular expression pattern: <code>[\u0009\u000A\u000D\u0020-\u00FF]+</code>]</li>
./awssdk/services/sts.class.php:	public function get_federation_token($name, $opt = null)
./awssdk/services/sts.class.php:	 * target="_blank">Creating Temporary Credentials to Enable Access for IAM Users</a> in <em>Using
./awssdk/services/sts.class.php:	 * 	<li><code>TokenCode</code> - <code>string</code> - Optional - The value provided by the MFA device. If the user has an access policy requiring an MFA code, provide the value here to get permission to resources as specified in the access policy. If MFA is required, and a code not provided while requesting a set of temporary security credentials, the user will receive an "access denied" response when requesting resources that require MFA. For more information, see <a href="http://docs.amazonwebservices.com/IAM/latest/UserGuide/Using_ManagingMFA.html" target="_blank">Using Multi-Factor Authentication (MFA) Devices with AWS</a> in <em>Using IAM</em>. [Constraints: The value must be between 6 and 6 characters, and must match the following regular expression pattern: <code>[\d]*</code>]</li>
./awssdk/services/sts.class.php:	public function get_session_token($opt = null)
./awssdk/services/sqs.class.php:	function get_queue_arn($queue_url)
./awssdk/services/sqs.class.php:	public function get_queue_size($queue_url)
./awssdk/services/sqs.class.php:		$response = $this->get_queue_attributes($queue_url, array(
./awssdk/services/sqs.class.php:	public function get_queue_list($pcre = null)
./awssdk/services/sqs.class.php:	public function get_queue_attributes($queue_url, $opt = null)
./awssdk/services/sqs.class.php:	public function get_queue_url($queue_name, $opt = null)
./awssdk/services/importexport.class.php:	public function get_status($job_id, $opt = null)
./awssdk/services/ec2.class.php:	 * Attaches a VPN gateway to a VPC. This is the last step required to get your VPC fully connected
./awssdk/services/ec2.class.php:	 * 	<li><code>AWSAccessKeyId</code> - <code>string</code> - Optional - The Access Key ID of the owner of the Amazon S3 bucket. Use the <CFPolicy::get_key()> method of a <CFPolicy> instance.</li>
./awssdk/services/ec2.class.php:	 * 	<li><code>UploadPolicy</code> - <code>string</code> - Optional - A Base64-encoded Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on the user's behalf. Use the <CFPolicy::get_policy()> method of a <CFPolicy> instance.</li>
./awssdk/services/ec2.class.php:	 * 	<li><code>UploadPolicySignature</code> - <code>string</code> - Optional - The signature of the Base64 encoded JSON document. Use the <CFPolicy::get_policy_signature()> method of a <CFPolicy> instance.</li></ul>
./awssdk/services/ec2.class.php:	 * 	<li><code>TargetEnvironment</code> - <code>string</code> - Optional -  [Allowed values: <code>citrix</code>, <code>vmware</code>]</li>
./awssdk/services/ec2.class.php:	 * Creates a new route in a route table within a VPC. The route's target can be either a gateway
./awssdk/services/ec2.class.php:	 * 	<li><code>192.0.2.0/24</code> (goes to some target A)</li>
./awssdk/services/ec2.class.php:	 * 	<li><code>192.0.2.0/28</code> (goes to some target B)</li>
./awssdk/services/ec2.class.php:	 * in the list is more specific, so we use that route to determine where to target the traffic.
./awssdk/services/ec2.class.php:	 * could ask to get information about a particular customer gateway (or all) only if the gateway's
./awssdk/services/ec2.class.php:	 * specify. For example, you could get information about instances in a specific Availability
./awssdk/services/ec2.class.php:	 * could get information only about gateways with particular tags. The Internet gateway must match
./awssdk/services/ec2.class.php:	 * information only about ACLs that match criteria you specify. For example, you could get
./awssdk/services/ec2.class.php:	 * Amazon EC2 instances for a period of time (without getting insufficient capacity errors) and
./awssdk/services/ec2.class.php:	 * only about tables that match criteria you specify. For example, you could get information only
./awssdk/services/ec2.class.php:	 * criteria you specify. For example, you could get information about requests where the Spot
./awssdk/services/ec2.class.php:	 * For example, you could ask to get information about a particular subnet (or all) only if the
./awssdk/services/ec2.class.php:	 * For example, you could ask to get information about a particular VPC or VPCs (or all your VPCs)
./awssdk/services/ec2.class.php:	 * you specify. For example, you could ask to get information about a particular VPN connection
./awssdk/services/ec2.class.php:	 * For example, you could ask to get information about a particular VPN gateway (or all) only if
./awssdk/services/ec2.class.php:	public function get_console_output($instance_id, $opt = null)
./awssdk/services/ec2.class.php:	public function get_password_data($instance_id, $opt = null)
./awssdk/services/ec2.class.php:			$private_key = openssl_pkey_get_private($opt['DecryptPasswordWithKey']);
./awssdk/services/ec2.class.php:	 * instances for a period of time (without getting insufficient capacity errors) and pay a lower
./awssdk/services/ec2.class.php:	 * 	<li><code>LaunchGroup</code> - <code>string</code> - Optional - Specifies the instance launch group. Launch groups are Spot Instances that launch and terminate together.</li>
./awssdk/_compatibility_test/sdk_compatibility_test_cli.php:	$ssl_result = !(curl_getinfo($ch, CURLINFO_SSL_VERIFYRESULT) === 0);
./awssdk/_compatibility_test/sdk_compatibility_test_cli.php:	if (!$file_ok) {      echo '* ' . failure('File System Read/Write:') . ' The file_get_contents() and/or file_put_contents()' . PHP_EOL . '  functions have been disabled. Without them, the SDK cannot read from,' . PHP_EOL . '  or write to, the file system.' . PHP_EOL . PHP_EOL; }
./awssdk/_compatibility_test/sdk_compatibility.inc.php:$file_ok = (function_exists('file_get_contents') && function_exists('file_put_contents'));
./awssdk/_compatibility_test/sdk_compatibility.inc.php:$ini_memory_limit = get_ini('memory_limit');
./awssdk/_compatibility_test/sdk_compatibility.inc.php:$ini_open_basedir = get_ini('open_basedir');
./awssdk/_compatibility_test/sdk_compatibility.inc.php:$ini_safe_mode = get_ini('safe_mode');
./awssdk/_compatibility_test/sdk_compatibility.inc.php:$ini_zend_enable_gc = get_ini('zend.enable_gc');
./awssdk/_compatibility_test/sdk_compatibility.inc.php:function get_ini($config)
./awssdk/_compatibility_test/sdk_compatibility.inc.php:	$cfg_value = ini_get($config);
./awssdk/_compatibility_test/sdk_compatibility_test.php:	echo (curl_getinfo($ch, CURLINFO_SSL_VERIFYRESULT) === 0) ? 'false' : 'true';
./awssdk/_compatibility_test/sdk_compatibility_test.php:!function(window){function serial(a){var b=a.name;if(a.disabled||!b)return"";b=enc(b);switch(a.tagName.toLowerCase()){case"input":switch(a.type){case"reset":case"button":case"image":case"file":return"";case"checkbox":case"radio":return a.checked?b+"="+(a.value?enc(a.value):!0)+"&":"";default:return b+"="+(a.value?enc(a.value):"")+"&"}break;case"textarea":return b+"="+enc(a.value)+"&";case"select":return b+"="+enc(a.options[a.selectedIndex].value)+"&"}return""}function enc(a){return encodeURIComponent(a)}function reqwest(a,b){return new Reqwest(a,b)}function init(o,fn){function error(a){o.error&&o.error(a),complete(a)}function success(resp){o.timeout&&clearTimeout(self.timeout)&&(self.timeout=null);var r=resp.responseText;if(r)switch(type){case"json":resp=window.JSON?window.JSON.parse(r):eval("("+r+")");break;case"js":resp=eval(r);break;case"html":resp=r}fn(resp),o.success&&o.success(resp),complete(resp)}function complete(a){o.complete&&o.complete(a)}this.url=typeof o=="string"?o:o.url,this.timeout=null;var type=o.type||setType(this.url),self=this;fn=fn||function(){},o.timeout&&(this.timeout=setTimeout(function(){self.abort(),error()},o.timeout)),this.request=getRequest(o,success,error)}function setType(a){return/\.json$/.test(a)?"json":/\.jsonp$/.test(a)?"jsonp":/\.js$/.test(a)?"js":/\.html?$/.test(a)?"html":/\.xml$/.test(a)?"xml":"js"}function Reqwest(a,b){this.o=a,this.fn=b,init.apply(this,arguments)}function getRequest(a,b,c){if(a.type!="jsonp"){var f=xhr();f.open(a.method||"GET",typeof a=="string"?a:a.url,!0),setHeaders(f,a),f.onreadystatechange=readyState(f,b,c),a.before&&a.before(f),f.send(a.data||null);return f}var d=doc.createElement("script");window[getCallbackName(a)]=generalCallback,d.type="text/javascript",d.src=a.url,d.async=!0;var e=function(){a.success&&a.success(lastValue),lastValue=undefined,head.removeChild(d)};d.onload=e,d.onreadystatechange=function(){/^loaded|complete$/.test(d.readyState)&&e()},head.appendChild(d)}function generalCallback(a){lastValue=a}function getCallbackName(a){var b=a.jsonpCallback||"callback";if(a.url.slice(-(b.length+2))==b+"=?"){var c="reqwest_"+uniqid++;a.url=a.url.substr(0,a.url.length-1)+c;return c}var d=new RegExp(b+"=([\\w]+)");return a.url.match(d)[1]}function setHeaders(a,b){var c=b.headers||{};c.Accept=c.Accept||"text/javascript, text/html, application/xml, text/xml, */*",b.crossOrigin||(c["X-Requested-With"]=c["X-Requested-With"]||"XMLHttpRequest");if(b.data){c["Content-type"]=c["Content-type"]||"application/x-www-form-urlencoded";for(var d in c)c.hasOwnProperty(d)&&a.setRequestHeader(d,c[d],!1)}}function readyState(a,b,c){return function(){a&&a.readyState==4&&(twoHundo.test(a.status)?b(a):c(a))}}var v=window.v;!v&&typeof require!="undefined"&&(v=require("valentine"));var twoHundo=/^20\d$/,doc=document,byTag="getElementsByTagName",head=doc[byTag]("head")[0],xhr="XMLHttpRequest"in window?function(){return new XMLHttpRequest}:function(){return new ActiveXObject("Microsoft.XMLHTTP")},uniqid=0,lastValue;Reqwest.prototype={abort:function(){this.request.abort()},retry:function(){init.call(this,this.o,this.fn)}},reqwest.serialize=function(a){var b=a[byTag]("input"),c=a[byTag]("select"),d=a[byTag]("textarea");return(v(b).chain().toArray().map(serial).value().join("")+v(c).chain().toArray().map(serial).value().join("")+v(d).chain().toArray().map(serial).value().join("")).replace(/&$/,"")},reqwest.serializeArray=function(a){for(var b=this.serialize(a).split("&"),c=0,d=b.length,e=[],f;c<d;c++)b[c]&&(f=b[c].split("="))&&e.push({name:f[0],value:f[1]});return e};var old=window.reqwest;reqwest.noConflict=function(){window.reqwest=old;return this},window.reqwest=reqwest}(this)
./awssdk/_compatibility_test/sdk_compatibility_test.php:						<td>File System <a href="http://php.net/file_get_contents">Read</a>/<a href="http://php.net/file_put_contents">Write</a></td>
./awssdk/_compatibility_test/sdk_compatibility_test.php:					<li><strong>File System Read/Write:</strong> The <a href="http://php.net/file_get_contents">file_get_contents()</a> and/or <a href="http://php.net/file_put_contents">file_put_contents()</a> functions have been disabled. Without them, the SDK cannot read from, or write to, the file system.</li>
./awssdk/_compatibility_test/sdk_compatibility_test.php:	$sslCheck = document.getElementById('ssl_check');
./awssdk/utilities/array.class.php:			throw new CFArray_Exception($e->getMessage());
./awssdk/utilities/array.class.php:		$self = get_called_class();
./awssdk/utilities/array.class.php:		return array_map('intval', $this->getArrayCopy());
./awssdk/utilities/array.class.php:		$list = array_map('strval', $this->getArrayCopy());
./awssdk/utilities/array.class.php:		$list = $this->getArrayCopy();
./awssdk/utilities/array.class.php:		$items = $this->getArrayCopy();
./awssdk/utilities/array.class.php:		$items = $this->getArrayCopy();
./awssdk/utilities/array.class.php:		$items = $this->getArrayCopy();
./awssdk/utilities/array.class.php:		$items = $this->getArrayCopy();
./awssdk/utilities/array.class.php:		$items = $this->getArrayCopy();
./awssdk/utilities/array.class.php:		return new CFArray(array_filter($this->getArrayCopy()));
./awssdk/utilities/array.class.php:		return new CFArray(array_values($this->getArrayCopy()));
./awssdk/utilities/array.class.php:		return json_encode($this->getArrayCopy());
./awssdk/utilities/array.class.php:		return sfYaml::dump($this->getArrayCopy(), 5);
./awssdk/utilities/policy.class.php:		$self = get_called_class();
./awssdk/utilities/policy.class.php:	public function get_key()
./awssdk/utilities/policy.class.php:	public function get_policy()
./awssdk/utilities/policy.class.php:	public function get_json()
./awssdk/utilities/policy.class.php:	public function get_policy_signature()
./awssdk/utilities/policy.class.php:		return base64_encode(hash_hmac('sha1', $this->get_policy(), $this->auth->secret_key));
./awssdk/utilities/simplexml.class.php:		$self = get_called_class();
./awssdk/utilities/complextype.class.php:					self::option_group($v->get_config(), $member, $key, $out);
./awssdk/utilities/credential.class.php:	* Default getter. Enables syntax such as $object->method->chained_method();. Also supports
./awssdk/utilities/credential.class.php:	public function __get($name)
./awssdk/utilities/credential.class.php:		return $this->collection->getArrayCopy();
./awssdk/utilities/stepconfig.class.php:		$self = get_called_class();
./awssdk/utilities/stepconfig.class.php:	public function get_config()
./awssdk/utilities/utilities.class.php:		return $ref->getConstant($const);
./awssdk/utilities/utilities.class.php:	 * @author Ryan Parman <ryan@getcloudfusion.com>
./awssdk/utilities/info.class.php:		$existing_classes = get_declared_classes();
./awssdk/utilities/info.class.php:		$with_sdk_classes = get_declared_classes();
./awssdk/utilities/info.class.php:			$collect[get_class($obj)] = $obj->api_version;
./awssdk/utilities/credentials.class.php:	public static function get($credential_name = self::DEFAULT_KEY)
./awssdk/utilities/mimetypes.class.php:	public static function get_mimetype($ext)
./awssdk/sdk.class.php:	$extensions = get_loaded_extensions();
./awssdk/sdk.class.php:		$cfg_value = ini_get($cfg);
./awssdk/sdk.class.php:		$this->service = get_class($this);
./awssdk/sdk.class.php:			$this->credentials = CFCredentials::get($options['credentials'])
./awssdk/sdk.class.php:				$this->credentials = CFCredentials::get(CFCredentials::DEFAULT_KEY)
./awssdk/sdk.class.php:		// If no credentials were provided, try to get them from the EC2 instance profile
./awssdk/sdk.class.php:		$self = get_called_class();
./awssdk/sdk.class.php:		$response = $token->get_session_token();
./awssdk/sdk.class.php:				// Make a call to the EC2 Metadata Service to get the instance profile credentials
./awssdk/sdk.class.php:		$method_arguments = func_get_args();
./awssdk/sdk.class.php:			$cache_id = $this->key . '_' . get_class($this) . '_' . $operation . '_' . sha1(serialize($method_arguments));
./awssdk/sdk.class.php:		$headers = $request->get_response_header();
./awssdk/sdk.class.php:		$data = new $this->response_class($headers, ($this->parse_the_response === true) ? $this->parse_callback($request->get_response_body()) : $request->get_response_body(), $request->get_response_code());
./awssdk/sdk.class.php:		    (integer) $request->get_response_code() === 500 || // Internal Error (presumably transient)
./awssdk/sdk.class.php:		    (integer) $request->get_response_code() === 503)   // Service Unavailable (presumably transient)
./awssdk/sdk.class.php:			(integer) $request->get_response_code() === 400 &&
./awssdk/sdk.class.php:			 stripos((string) $request->get_response_body(), 'com.amazonaws.dynamodb.') !== false && (
./awssdk/sdk.class.php:				stripos((string) $request->get_response_body(), 'ProvisionedThroughputExceededException') !== false
./awssdk/sdk.class.php:			$cache_id = $this->key . '_' . get_class($this) . '_' . sha1(serialize($this->batch_object));
./awssdk/sdk.class.php:				throw new Parser_Exception($e->getMessage());
./awssdk/sdk.class.php:					$_ENV['HOME'] = '/Users/' . get_current_user();
./awssdk/sdk.class.php:					$_ENV['HOME'] = 'c:' . DIRECTORY_SEPARATOR . 'Documents and Settings' . DIRECTORY_SEPARATOR . get_current_user();
./awssdk/sdk.class.php:					$_ENV['HOME'] = '/home/' . get_current_user();
./awssdk/lib/requestcore/requestcore.class.php:		if (strpos(ini_get('disable_functions'), 'set_time_limit') !== false)
./awssdk/lib/requestcore/requestcore.class.php:		if (!ini_get('safe_mode') && !ini_get('open_basedir'))
./awssdk/lib/requestcore/requestcore.class.php:			$header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);
./awssdk/lib/requestcore/requestcore.class.php:			$this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);
./awssdk/lib/requestcore/requestcore.class.php:			$this->response_info = curl_getinfo($this->curl_handle);
./awssdk/lib/requestcore/requestcore.class.php:				$response = $http->process_response($done['handle'], curl_multi_getcontent($done['handle']));
./awssdk/lib/requestcore/requestcore.class.php:	public function get_response_header($header = null)
./awssdk/lib/requestcore/requestcore.class.php:	public function get_response_body()
./awssdk/lib/requestcore/requestcore.class.php:	public function get_response_code()
./awssdk/lib/requestcore/requestcore.class.php:	 * @param array $header (Required) Associative array of HTTP headers (typically returned by <RequestCore::get_response_header()>).
./awssdk/lib/yaml/lib/sfYamlParser.php:    if (function_exists('mb_internal_encoding') && ((int) ini_get('mbstring.func_overload')) & 2)
./awssdk/lib/yaml/lib/sfYamlParser.php:        throw new InvalidArgumentException(sprintf('A YAML file cannot contain tabs as indentation at line %d (%s).', $this->getRealCurrentLineNb() + 1, $this->currentLine));
./awssdk/lib/yaml/lib/sfYamlParser.php:          $c = $this->getRealCurrentLineNb() + 1;
./awssdk/lib/yaml/lib/sfYamlParser.php:          $data[] = $parser->parse($this->getNextEmbedBlock());
./awssdk/lib/yaml/lib/sfYamlParser.php:            $c = $this->getRealCurrentLineNb();
./awssdk/lib/yaml/lib/sfYamlParser.php:              $block .= "\n".$this->getNextEmbedBlock($this->getCurrentLineIndentation() + 2);
./awssdk/lib/yaml/lib/sfYamlParser.php:              throw new InvalidArgumentException(sprintf('Reference "%s" does not exist at line %s (%s).', $isInPlace, $this->getRealCurrentLineNb() + 1, $this->currentLine));
./awssdk/lib/yaml/lib/sfYamlParser.php:              $value = $this->getNextEmbedBlock();
./awssdk/lib/yaml/lib/sfYamlParser.php:            $c = $this->getRealCurrentLineNb() + 1;
./awssdk/lib/yaml/lib/sfYamlParser.php:              throw new InvalidArgumentException(sprintf("YAML merge keys used with a scalar value instead of an array at line %s (%s)", $this->getRealCurrentLineNb() + 1, $this->currentLine));
./awssdk/lib/yaml/lib/sfYamlParser.php:                  throw new InvalidArgumentException(sprintf("Merge items must be arrays at line %s (%s).", $this->getRealCurrentLineNb() + 1, $parsedItem));
./awssdk/lib/yaml/lib/sfYamlParser.php:            $c = $this->getRealCurrentLineNb() + 1;
./awssdk/lib/yaml/lib/sfYamlParser.php:            $data[$key] = $parser->parse($this->getNextEmbedBlock());
./awssdk/lib/yaml/lib/sfYamlParser.php:        throw new InvalidArgumentException(sprintf('%s %d (%s).', $error, $this->getRealCurrentLineNb() + 1, $this->currentLine));
./awssdk/lib/yaml/lib/sfYamlParser.php:  protected function getRealCurrentLineNb()
./awssdk/lib/yaml/lib/sfYamlParser.php:  protected function getCurrentLineIndentation()
./awssdk/lib/yaml/lib/sfYamlParser.php:  protected function getNextEmbedBlock($indentation = null)
./awssdk/lib/yaml/lib/sfYamlParser.php:      $newIndent = $this->getCurrentLineIndentation();
./awssdk/lib/yaml/lib/sfYamlParser.php:        throw new InvalidArgumentException(sprintf('Indentation problem at line %d (%s)', $this->getRealCurrentLineNb() + 1, $this->currentLine));
./awssdk/lib/yaml/lib/sfYamlParser.php:      $indent = $this->getCurrentLineIndentation();
./awssdk/lib/yaml/lib/sfYamlParser.php:        throw new InvalidArgumentException(sprintf('Indentation problem at line %d (%s)', $this->getRealCurrentLineNb() + 1, $this->currentLine));
./awssdk/lib/yaml/lib/sfYamlParser.php:    $currentIndentation = $this->getCurrentLineIndentation();
./awssdk/lib/yaml/lib/sfYamlParser.php:    if ($this->getCurrentLineIndentation() <= $currentIndentation)
./awssdk/lib/yaml/lib/sfYamlInline.php:    if (function_exists('mb_internal_encoding') && ((int) ini_get('mbstring.func_overload')) & 2)
./awssdk/lib/yaml/lib/sfYamlInline.php:    if ('1.1' === sfYaml::getSpecVersion())
./awssdk/lib/yaml/lib/sfYamlInline.php:      case preg_match(self::getTimestampRegex(), $value):
./awssdk/lib/yaml/lib/sfYamlInline.php:    if ('1.1' === sfYaml::getSpecVersion())
./awssdk/lib/yaml/lib/sfYamlInline.php:      case preg_match(self::getTimestampRegex(), $scalar):
./awssdk/lib/yaml/lib/sfYamlInline.php:  static protected function getTimestampRegex()
./awssdk/lib/yaml/lib/sfYaml.php:  static public function getSpecVersion()
./awssdk/lib/yaml/lib/sfYaml.php:      $content = ob_get_clean();
./awssdk/lib/yaml/lib/sfYaml.php:      throw new InvalidArgumentException(sprintf('Unable to parse %s: %s', $file ? sprintf('file "%s"', $file) : 'string', $e->getMessage()));
./awssdk/lib/cachecore/cachepdo.class.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/lib/cachecore/cachepdo.class.php:	 * Returns a list of supported PDO database drivers. Identical to <PDO::getAvailableDrivers()>.
./awssdk/lib/cachecore/cachepdo.class.php:	 * @link http://php.net/pdo.getavailabledrivers PHP Method
./awssdk/lib/cachecore/cachepdo.class.php:	public function get_drivers()
./awssdk/lib/cachecore/cachepdo.class.php:		return PDO::getAvailableDrivers();
./awssdk/lib/cachecore/cachemc.class.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/lib/cachecore/cachemc.class.php:			return $this->memcache->get($this->id);
./awssdk/lib/cachecore/cachemc.class.php:		return $this->memcache->get($this->id, $this->gzip);
./awssdk/lib/cachecore/cachexcache.class.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/lib/cachecore/cachexcache.class.php:		if ($data = xcache_get($this->id))
./awssdk/lib/cachecore/cachefile.class.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/lib/cachecore/cachefile.class.php:			$data = file_get_contents($this->id);
./awssdk/lib/cachecore/icachecore.interface.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/lib/cachecore/cachecore.class.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/lib/cachecore/cachecore.class.php:		$self = get_called_class();
./awssdk/lib/cachecore/cacheapc.class.php: * @link http://getcloudfusion.com CloudFusion
./awssdk/_samples/cli-s3_get_urls_for_uploads.php:	* Run this file from the command line with `php cli-s3_get_urls_for_uploads.php`.
./awssdk/_samples/cli-s3_get_urls_for_uploads.php:	$bucket = 'php-sdk-getting-started-' . strtolower($s3->key) . '-' . time();
./awssdk/_samples/cli-s3_get_urls_for_uploads.php:				echo $s3->get_object_url($bucket, $filename, '5 minutes') . PHP_EOL . PHP_EOL;
./awssdk/_samples/AmazonSimpleWorkflow/cron/BasicActivityWorker.php: * them together here for simplicity.
./awssdk/_samples/AmazonSimpleWorkflow/cron/BasicWorkflowWorker.php: * them together here for simplicity.
./awssdk/_samples/AmazonSimpleWorkflow/cron/BasicWorkflowWorker.php:                        echo 'Failing workflow; exception in decider: ', $e->getMessage(), "\n", $e->getTraceAsString(), "\n";
./awssdk/_samples/AmazonSimpleWorkflow/cron/BasicWorkflowWorker.php:                                'reason' => substr('Exception in decider: ' . $e->getMessage(), 0, 256),
./awssdk/_samples/AmazonSimpleWorkflow/cron/BasicWorkflowWorker.php:                                'details' => substr($e->getTraceAsString(), 0, 32768)
./awssdk/_samples/AmazonSimpleWorkflow/cron/HistoryEventIterator.php:        $next_events = $response->body->events()->getArrayCopy();
./awssdk/_samples/AmazonSimpleWorkflow/cron/HistoryEventIterator.php:    protected function _get_next_event_page() {
./awssdk/_samples/AmazonSimpleWorkflow/cron/HistoryEventIterator.php:            $this->_get_next_event_page();
./awssdk/_samples/lib/ProgressBar.php:     * The bar gets filled with this
./awssdk/_samples/lib/ProgressBar.php:    var $_target_num;
./awssdk/_samples/lib/ProgressBar.php:     * @param float  The target number for the bar
./awssdk/_samples/lib/ProgressBar.php:                                  $target_num, $options = array()) 
./awssdk/_samples/lib/ProgressBar.php:        $this->reset($formatstring, $bar, $prefill, $width, $target_num, 
./awssdk/_samples/lib/ProgressBar.php:    // {{{ reset($formatstring, $bar, $prefill, $width, $target_num[, $options])
./awssdk/_samples/lib/ProgressBar.php:     *     %max%         The maximum malue (the "target" value)
./awssdk/_samples/lib/ProgressBar.php:     * - The fifth argument is the target number of the progress bar. For
./awssdk/_samples/lib/ProgressBar.php:     *                        |       |  displaying the current or target
./awssdk/_samples/lib/ProgressBar.php:     * @param float  The target number for the bar
./awssdk/_samples/lib/ProgressBar.php:    function reset($formatstring, $bar, $prefill, $width, $target_num, 
./awssdk/_samples/lib/ProgressBar.php:        if ($target_num == 0) {
./awssdk/_samples/lib/ProgressBar.php:            trigger_error("PEAR::Console_ProgressBar: Using a target number equal to 0 is invalid, setting to 1 instead");
./awssdk/_samples/lib/ProgressBar.php:            $this->_target_num = 1;
./awssdk/_samples/lib/ProgressBar.php:            $this->_target_num = $target_num;
./awssdk/_samples/lib/ProgressBar.php:                settype($options[$key], gettype($value));
./awssdk/_samples/lib/ProgressBar.php:        $cur = '%2$\''.$options['fraction_pad']{0}.strlen((int)$target_num).'.'
./awssdk/_samples/lib/ProgressBar.php:            $this->_options['min_draw_interval'] and $current != $this->_target_num) {
./awssdk/_samples/lib/ProgressBar.php:        $percent = $current / $this->_target_num;
./awssdk/_samples/lib/ProgressBar.php:            $visbar, $current, $this->_target_num, $percent * 100, $elapsed,
./awssdk/_samples/lib/ProgressBar.php:        return ($this->_target_num - $last['value'])/($last['value'] - $first['value']) * ($last['time'] - $first['time']);
./awssdk/_samples/html-sdb_create_domain_data.php:	$domain = 'php-sdk-getting-started';
./awssdk/_samples/cli-s3_progress_bar.php:				curl_getinfo($curl_handle, CURLINFO_CONTENT_LENGTH_DOWNLOAD));
./awssdk/_samples/cli-s3_progress_bar.php:		$progress_bar->update(curl_getinfo($curl_handle, CURLINFO_SIZE_DOWNLOAD));
./awssdk/_samples/cli-s3_progress_bar.php:	$response = $s3->get_object('aws-sdk-for-php', 'demo/big-buck-bunny.mp4', array(
./awssdk/_samples/cli-s3_progress_bar.php:			$_100_percent = $GLOBALS['_100_percent'] = curl_getinfo($curl_handle, CURLINFO_CONTENT_LENGTH_UPLOAD);
./awssdk/_samples/cli-s3_progress_bar.php:		$progress_bar->update(curl_getinfo($curl_handle, CURLINFO_SIZE_UPLOAD));
./awssdk/extensions/s3streamwrapper.class.php:		$this->file_list = $this->client($protocol)->get_object_list($bucket, array(
./awssdk/extensions/s3streamwrapper.class.php:	 * (e.g., by <php:fopen()> and <php:file_get_contents()>).
./awssdk/extensions/s3streamwrapper.class.php:	 * Read from stream. This method is called in response to <php:fread()> and <php:fgets()>.
./awssdk/extensions/s3streamwrapper.class.php:			$response = $this->client($protocol)->get_object($bucket, $object_name, array(
./awssdk/extensions/s3streamwrapper.class.php:			$response = $this->client($protocol)->get_object($bucket, $object_name);
./awssdk/extensions/dynamodbsessionhandler.class.php:			$this->_session_lifetime = (integer) ini_get('session.gc_maxlifetime');
./awssdk/extensions/dynamodbsessionhandler.class.php:	 * Destruct the session handler and make sure the session gets written.
./awssdk/extensions/dynamodbsessionhandler.class.php:			$response = $this->_dynamodb->get_item(array(
./awssdk/extensions/dynamodbsessionhandler.class.php:					$type = $value->children()->getName();
./awssdk/authentication/signature_v3json.class.php:		$x_amz_target = null;
./awssdk/authentication/signature_v3json.class.php:		if (stripos($this->operation, 'x-amz-target') !== false)
./awssdk/authentication/signature_v3json.class.php:			$x_amz_target = trim(str_ireplace('x-amz-target:', '', $this->operation));
./awssdk/authentication/signature_v3json.class.php:		// Signing using X-Amz-Target is handled differently.
./awssdk/authentication/signature_v3json.class.php:		$headers['X-Amz-Target'] = $x_amz_target;
./awssdk/authentication/signature_v4json.class.php:		$x_amz_target = null;
./awssdk/authentication/signature_v4json.class.php:		if (stripos($this->operation, 'x-amz-target') !== false)
./awssdk/authentication/signature_v4json.class.php:			$x_amz_target = trim(str_ireplace('x-amz-target:', '', $this->operation));
./awssdk/authentication/signature_v4json.class.php:		$this->headers['X-Amz-Target'] = $x_amz_target;
./awssdk/authentication/signature_v4query.class.php:		$x_amz_target = null;
./awssdk/authentication/signature_v4query.class.php:		if (stripos($this->operation, 'x-amz-target') !== false)
./awssdk/authentication/signature_v4query.class.php:			$x_amz_target = trim(str_ireplace('x-amz-target:', '', $this->operation));
./awssdk/authentication/signature_v4query.class.php:		$this->headers['X-Amz-Target'] = $x_amz_target;
./beta/photo.php:$image = file_get_contents("http://img.youtube.com/vi/Rz8KW4Tveps/1.jpg");
./beta/pay/gettingpaid/app.php:$app->get('/', function () {
./beta/pay/gettingpaid/app.php:$app->get("/braintree", function () {
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:        $page = $this->_getPage(array($ids[0]));
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:        $this->_getNextPage();
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:            $this->_getNextPage();
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:    private function _getNextPage()
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:            $this->_items = $this->_getPage(array_slice($this->_ids, $this->_batchIndex, $this->_pageSize));
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:    private function _getPage($ids)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Test/CreditCardNumbers.php:    public static function getAll()
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Collection.php:    public function get($index)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Collection.php:    public function getIterator()
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Collection.php:     * get an offset's value
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Collection.php:     * @see get
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Collection.php:        return $this->get($offset);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Result/CreditCardVerification.php:    public function  __get($name)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Result/Successful.php:            // get a lowercase direct name for the property
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Result/Successful.php:                    get_class($objToReturn)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Plan.php:        $response = Braintree_Http::get('/plans');
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Discount.php:        $response = Braintree_Http::get('/discounts');
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Transaction.php:            $response = Braintree_Http::get('/transactions/'.$id);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/AddOn.php:        $response = Braintree_Http::get('/add_ons');
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/CreditCard.php:            $response = Braintree_Http::get('/payment_methods/'.$token);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Customer.php:            $response = Braintree_Http::get('/customers/'.$id);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Version.php:    public static function get()
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/WebhookTesting.php:        $originalZone = date_default_timezone_get();
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Xml/Generator.php:        // get the root element name
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:        $xmlRoot = Braintree_Util::delimiterToCamelCase($iterator->getName());
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:        self::$_xmlRoot = $iterator->getName();
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:            // get the attribute type string for use in conditions below
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:                $parentKey = Braintree_Util::delimiterToCamelCase($parentElement->getName());
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:        // get the element attributes
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Address.php:            $response = Braintree_Http::get(
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Error/ValidationErrorCollection.php:    public function  __get($name)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Error/ErrorCollection.php:    public function  __get($name)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Error/Validation.php:    public function  __get($name)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Http.php:    public static function get($path)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Http.php:            'User-Agent: Braintree PHP Library ' . Braintree_Version::get(),
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Http.php:        $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Subscription.php:            $response = Braintree_Http::get('/subscriptions/' . $id);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Util.php:        // get what should be an array from the passed array
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Configuration.php:    private static function get($key)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Configuration.php:            return self::get($name);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Configuration.php:     * @param string $value pass a string to set, empty to get
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Configuration.php:        return getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Instance.php:    public function __get($name)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Instance.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree/Instance.php:        return get_class($this) .'['.$objOutput.']';
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree.php:set_include_path(get_include_path() . PATH_SEPARATOR . realpath(dirname(__FILE__)));
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree.php:    public function __get($name)
./beta/pay/gettingpaid/braintree-php-2.14.0/lib/Braintree.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/TransparentRedirectTest.php:        $originalSeparator = ini_get("arg_separator.output");
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/TransparentRedirectTest.php:        $originalZone = date_default_timezone_get();
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/TransparentRedirectTest.php:        $zoneAfterCall = date_default_timezone_get();
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/Xml_ParserTest.php:    <company>Widgets Inc</company>
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/SanityTest.php:            $code = file_get_contents($codeFile);
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/ConfigurationTest.php:        // try to get environment without setting it first
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/unit/ConfigurationTest.php:        $this->assertEquals(getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000, $pn);
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/TestHelper.php:  get_include_path() . PATH_SEPARATOR .
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/TestHelper.php:    public static function includes($collection, $targetItem)
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/TestHelper.php:            if ($item->id == $targetItem->id) {
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransparentRedirectTest.php:        $developmentPort = getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/CustomerTest.php:    function testUpdate_forBillingAddressAndExistingCreditCardAndCustomerDetailsTogether()
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./beta/pay/gettingpaid/braintree-php-2.14.0/tests/integration/TransactionTest.php:            $this->assertEquals("Invalid params: transaction[bad_key]", $e->getMessage());
./beta/pay/vault/app.php:$app->get('/', function () {
./beta/pay/vault/app.php:$app->get("/braintree", function () {
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:        $page = $this->_getPage(array($ids[0]));
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:        $this->_getNextPage();
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:            $this->_getNextPage();
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:    private function _getNextPage()
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:            $this->_items = $this->_getPage(array_slice($this->_ids, $this->_batchIndex, $this->_pageSize));
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/ResourceCollection.php:    private function _getPage($ids)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Test/CreditCardNumbers.php:    public static function getAll()
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Collection.php:    public function get($index)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Collection.php:    public function getIterator()
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Collection.php:     * get an offset's value
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Collection.php:     * @see get
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Collection.php:        return $this->get($offset);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Result/CreditCardVerification.php:    public function  __get($name)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Result/Successful.php:            // get a lowercase direct name for the property
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Result/Successful.php:                    get_class($objToReturn)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Plan.php:        $response = Braintree_Http::get('/plans');
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Discount.php:        $response = Braintree_Http::get('/discounts');
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Transaction.php:            $response = Braintree_Http::get('/transactions/'.$id);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/AddOn.php:        $response = Braintree_Http::get('/add_ons');
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/CreditCard.php:            $response = Braintree_Http::get('/payment_methods/'.$token);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Customer.php:            $response = Braintree_Http::get('/customers/'.$id);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Version.php:    public static function get()
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/WebhookTesting.php:        $originalZone = date_default_timezone_get();
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Xml/Generator.php:        // get the root element name
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:        $xmlRoot = Braintree_Util::delimiterToCamelCase($iterator->getName());
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:        self::$_xmlRoot = $iterator->getName();
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:            // get the attribute type string for use in conditions below
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:                $parentKey = Braintree_Util::delimiterToCamelCase($parentElement->getName());
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Xml/Parser.php:        // get the element attributes
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Address.php:            $response = Braintree_Http::get(
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Error/ValidationErrorCollection.php:    public function  __get($name)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Error/ErrorCollection.php:    public function  __get($name)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Error/Validation.php:    public function  __get($name)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Http.php:    public static function get($path)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Http.php:            'User-Agent: Braintree PHP Library ' . Braintree_Version::get(),
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Http.php:        $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Subscription.php:            $response = Braintree_Http::get('/subscriptions/' . $id);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Util.php:        // get what should be an array from the passed array
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Configuration.php:    private static function get($key)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Configuration.php:            return self::get($name);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Configuration.php:     * @param string $value pass a string to set, empty to get
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Configuration.php:        return getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Instance.php:    public function __get($name)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Instance.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree/Instance.php:        return get_class($this) .'['.$objOutput.']';
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree.php:set_include_path(get_include_path() . PATH_SEPARATOR . realpath(dirname(__FILE__)));
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree.php:    public function __get($name)
./beta/pay/vault/braintree-php-2.14.0/lib/Braintree.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./beta/pay/vault/braintree-php-2.14.0/tests/unit/TransparentRedirectTest.php:        $originalSeparator = ini_get("arg_separator.output");
./beta/pay/vault/braintree-php-2.14.0/tests/unit/TransparentRedirectTest.php:        $originalZone = date_default_timezone_get();
./beta/pay/vault/braintree-php-2.14.0/tests/unit/TransparentRedirectTest.php:        $zoneAfterCall = date_default_timezone_get();
./beta/pay/vault/braintree-php-2.14.0/tests/unit/Xml_ParserTest.php:    <company>Widgets Inc</company>
./beta/pay/vault/braintree-php-2.14.0/tests/unit/SanityTest.php:            $code = file_get_contents($codeFile);
./beta/pay/vault/braintree-php-2.14.0/tests/unit/ConfigurationTest.php:        // try to get environment without setting it first
./beta/pay/vault/braintree-php-2.14.0/tests/unit/ConfigurationTest.php:        $this->assertEquals(getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000, $pn);
./beta/pay/vault/braintree-php-2.14.0/tests/TestHelper.php:  get_include_path() . PATH_SEPARATOR .
./beta/pay/vault/braintree-php-2.14.0/tests/TestHelper.php:    public static function includes($collection, $targetItem)
./beta/pay/vault/braintree-php-2.14.0/tests/TestHelper.php:            if ($item->id == $targetItem->id) {
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransparentRedirectTest.php:        $developmentPort = getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./beta/pay/vault/braintree-php-2.14.0/tests/integration/CustomerTest.php:    function testUpdate_forBillingAddressAndExistingCreditCardAndCustomerDetailsTogether()
./beta/pay/vault/braintree-php-2.14.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./beta/pay/vault/braintree-php-2.14.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./beta/pay/vault/braintree-php-2.14.0/tests/integration/TransactionTest.php:            $this->assertEquals("Invalid params: transaction[bad_key]", $e->getMessage());
./beta/image.php:  if(!list($w, $h) = getimagesize($src)) return "Unsupported picture type!";
./beta/s3.php:        $buckets=$s3->get_bucket_list();
./beta/index.php:		document.getElementById('p1').style.backgroundColor="#ddd000";
./beta/index.php:		document.getElementById('p1').style.width=x;
./corphome.php:					 <h3>way we get to work</h3>
./corphome.php:							 <li class="first"><a href="#" class="navlink" onclick="document.getElementById('ridezuiframe').contentWindow.nav1('myridesp');">My Rides</a></li>
./corphome.php:							 <li><a href="#" class="navlink" onclick="document.getElementById('ridezuiframe').contentWindow.nav1('riderequestp');">Request a Ride</a></li>
./corphome.php:							 <li><a href="#" class="navlink" onclick="document.getElementById('ridezuiframe').contentWindow.nav1('ridepostp');">Post a Ride</a></li>
./corphome.php:							 <li><a href="#" class="navlink" onclick="document.getElementById('ridezuiframe').contentWindow.nav1('accountp');">My Account</a></li>
./corphome.php:							 <li><a href="#" class="navlink" onclick="document.getElementById('ridezuiframe').contentWindow.nav1('profilep');">My Profile</a></li>
./corphome.php:							 <li class="last"><a href="#" class="navlink" onclick="document.getElementById('ridezuiframe').contentWindow.nav1('calcp');">Ridezunomics</a></li>
./corphome.php:					 <p class="arvo"><img src="images/quoteup.png" alt="Quote" />A group of us at the office use Ridezu now.  It actually brings the office closer together.<img src="images/quotedown.png" alt="Quote" /></p>
./index2.php:    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
./test/pickup.php:			name1=document.getElementById('name').value;
./test/pickup.php:			city1=document.getElementById('city').value;
./test/pickup.php:			state1=document.getElementById('state').value;
./test/pickup.php:			latlng1=document.getElementById('latlng').value;
./test/pickup.php:			lighting1=document.getElementById('lighting').value;
./test/pickup.php:			bikeracks1=document.getElementById('bikeracks').value;
./test/pickup.php:			spaces1=document.getElementById('spaces').value;
./test/pickup.php:	  function Target(targetDiv,map){
./test/pickup.php:		  var address = document.getElementById('address').value;
./test/pickup.php:        map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
./test/pickup.php:        var targetDiv = document.createElement('div');
./test/pickup.php:                targetDiv.innerHTML = '<img style="margin-top:-30px;" src="../images/circle.png"/>';
./test/pickup.php:				targetDiv.style.postion = 'absolute';
./test/pickup.php:				targetDiv.style.left = '50%';
./test/pickup.php:				targetDiv.style.top = '50%';
./test/pickup.php:				targetDiv.style.height = '50px';
./test/pickup.php:        google.maps.event.addDomListener(targetDiv, 'click', function() {
./test/pickup.php:          a=map.getCenter();
./test/pickup.php:        targetDiv.index = 1;
./test/pickup.php:        map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(targetDiv);
./test/pickup.php:			  var ctr = map.getCenter();
./test/pickup.php:						document.getElementById('addr0').innerHTML=results[0].formatted_address;	 
./test/pickup.php:      					document.getElementById('latlong0').innerHTML=x;
./test/pickup.php:      					document.getElementById("type").innerHTML="Custom Location";
./test/pickup.php:		document.getElementById("person").style.display="none";
./test/pickup.php:		document.getElementById("location").style.display="none";
./test/pickup.php:		document.getElementById("empty").style.display="none";
./test/pickup.php:		document.getElementById(box).style.display="block";
./test/pickup.php:					document.getElementById("type").innerHTML=x.type;
./test/pickup.php:					document.getElementById("name1").innerHTML=x.name;
./test/pickup.php:					document.getElementById("city").innerHTML=x.city;
./test/pickup.php:					document.getElementById("state").innerHTML=x.state;
./test/pickup.php:					document.getElementById("latlong").innerHTML=y[0]+","+y[1];
./test/pickup.php:					document.getElementById("type").innerHTML=x.type;
./test/pickup.php:					document.getElementById("username").innerHTML=x.name;
./test/pickup.php:					document.getElementById("homeadd1").innerHTML=x.homeadd1;
./test/pickup.php:					document.getElementById("homecity").innerHTML=x.homecity;
./test/pickup.php:					document.getElementById("homestate").innerHTML=x.homestate;
./test/pickup.php:					document.getElementById("homezip").innerHTML=x.homezip;
./test/pickup.php:					document.getElementById("homelatlong").innerHTML="<a href='#' onclick='map.setCenter(new google.maps.LatLng(y[0],y[1]))'>"+y[0]+","+y[1]+"</a>";
./test/pickup.php:					document.getElementById("workadd1").innerHTML=x.workadd1;
./test/pickup.php:					document.getElementById("workcity").innerHTML=x.workcity;
./test/pickup.php:					document.getElementById("workstate").innerHTML=x.workstate;
./test/pickup.php:					document.getElementById("worklatlong").innerHTML="<a href='#' onclick='map.setCenter(new google.maps.LatLng(y[0],y[1]))'>"+y[0]+","+y[1]+"</a>";
./test/pickup.php:					document.getElementById("origindesc").innerHTML=x.origindesc;
./test/pickup.php:					document.getElementById("originlatlong").innerHTML="<a href='#' onclick='map.setCenter(new google.maps.LatLng(y[0],y[1]))'>"+y[0]+","+y[1]+"</a>";
./test/pickup.php:					document.getElementById("destdesc").innerHTML=x.destdesc;
./test/pickup.php:					document.getElementById("destlatlong").innerHTML="<a href='#' onclick='map.setCenter(new google.maps.LatLng(y[0],y[1]))'>"+y[0]+","+y[1]+"</a>";
./test/pickup.php:					document.getElementById("createdon").innerHTML=x.createdon;
./test/servicetest.php:        fbid=document.getElementById("regfbid").value;
./test/servicetest.php:        fname=document.getElementById("regfname").value;
./test/servicetest.php:        lname=document.getElementById("reglname").value;
./test/servicetest.php:        email=document.getElementById("regemail").value;
./test/servicetest.php:        hadd1=document.getElementById("reghadd1").value;
./test/servicetest.php:        hcity=document.getElementById("reghcity").value;
./test/servicetest.php:        hstate=document.getElementById("reghstate").value;
./test/servicetest.php:        hzip=document.getElementById("reghzip").value;
./test/servicetest.php:    	wadd1=document.getElementById("regwadd1").value;
./test/servicetest.php:        wcity=document.getElementById("regwcity").value;
./test/servicetest.php:        wstate=document.getElementById("regwstate").value;
./test/servicetest.php:        wzip=document.getElementById("regwzip").value;       
./test/servicetest.php:        hlat=document.getElementById("reghlat").value;
./test/servicetest.php:        hlng=document.getElementById("reghlng").value;
./test/servicetest.php:        wlat=document.getElementById("regwlat").value;
./test/servicetest.php:        wlng=document.getElementById("regwlng").value;
./test/servicetest.php://get all rides
./test/servicetest.php:		function getusers(){
./test/servicetest.php://get all rides
./test/servicetest.php:		function getallrides(){
./test/servicetest.php://get user data
./test/servicetest.php:		function getuserdetails(){
./test/servicetest.php:        	fbid=document.getElementById("userdetails").value;
./test/servicetest.php://get driver by time
./test/servicetest.php:		function getdriverbytime(){
./test/servicetest.php:        	time=document.getElementById("getdrivertime").value;
./test/servicetest.php://get rider by time
./test/servicetest.php:		function getriderbytime(){
./test/servicetest.php:        	time=document.getElementById("getridertime").value;
./test/servicetest.php://get ride by id
./test/servicetest.php:		function getridebyid(){
./test/servicetest.php:        	rideid=document.getElementById("rideid").value;
./test/servicetest.php://get rider avail rides by fbid
./test/servicetest.php:		function getridebyfbid(){
./test/servicetest.php:        	fbid=document.getElementById("rider1").value;
./test/servicetest.php://get rider avail rides by fbid,route,date
./test/servicetest.php:		function getridebyfbidRtDt(){
./test/servicetest.php:        	fbid=document.getElementById("rider2").value;
./test/servicetest.php:			route=document.getElementById("rider2route").value;
./test/servicetest.php:			date=document.getElementById("rider2date").value;
./test/servicetest.php://get driver avail rides by fbid
./test/servicetest.php:		function getdriverbyfbid(){
./test/servicetest.php:        	fbid=document.getElementById("drivebyfbid").value;
./test/servicetest.php://get driver avail rides by fbid,route,date
./test/servicetest.php:		function getdriverbyfbidRtDt(){
./test/servicetest.php:        	fbid=document.getElementById("drivebyfbid").value;
./test/servicetest.php:			route=document.getElementById("ridebyroute").value;
./test/servicetest.php:			date=document.getElementById("ridebydate").value;
./test/servicetest.php:        	fbid=document.getElementById("reqridefbid").value;
./test/servicetest.php:        	time=document.getElementById("reqridetime").value;
./test/servicetest.php:        	route=document.getElementById("reqrideroute").value;
./test/servicetest.php:        	fbid=document.getElementById("postridefbid").value;
./test/servicetest.php:        	time=document.getElementById("postridetime").value;
./test/servicetest.php:			route=document.getElementById("route").value;
./test/servicetest.php:			 fbid=document.getElementById("driverfbid").value;
./test/servicetest.php:			 rideid=document.getElementById("reqrideid").value;
./test/servicetest.php:			 fbid=document.getElementById("selectridefbid").value;
./test/servicetest.php:			 rideid=document.getElementById("selectrideid").value;
./test/servicetest.php://get my ride details 
./test/servicetest.php:		function getriderride(){
./test/servicetest.php:        	fbid=document.getElementById("myriderfbid").value;
./test/servicetest.php:        	fbid=document.getElementById("cancelfbid").value;
./test/servicetest.php:        	rideid=document.getElementById("cancelrideid").value;
./test/servicetest.php:        	fbid=document.getElementById("accountfbid").value;
./test/servicetest.php:        	timeperiod=document.getElementById("timeperiod").value;
./test/servicetest.php:        	fbid=document.getElementById("accountdetailfbid").value;
./test/servicetest.php:        	timeperiod=document.getElementById("detailtimeperiod").value;
./test/servicetest.php://get nodes
./test/servicetest.php:        	fbid=document.getElementById("nodefbid").value;
./test/servicetest.php:        	nodetype=document.getElementById("nodetype").value;
./test/servicetest.php:			 tofbid=document.getElementById("tofbid").value;
./test/servicetest.php:			 fromfbid=document.getElementById("fromfbid").value;
./test/servicetest.php:			 txtmessage=document.getElementById("txtmessage").value;
./test/servicetest.php:        	document.getElementById("jsonresult").innerHTML=instr+"<br/><pre>"+x+"</pre>";
./test/servicetest.php:			document.getElementById("myModal").style.diplay="block";
./test/servicetest.php:        	document.getElementById("makenewuser").style.display="block";
./test/servicetest.php:		    document.getElementById("popup").style.display="none";
./test/servicetest.php:        	document.getElementById("makenewuser").style.display="none";
./test/servicetest.php:	 <p><div class="input-append"><a class="btn btn-primary" onclick="getusers();">Get all users</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><a class="btn btn-primary" onclick="getallrides();">Get all rides</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="rideid" value="66" type="text"/><a class="btn btn-primary" onclick="getridebyid();">Get a ride by id</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="userdetails" value="<?php echo $uid;?>" type="text"/><a class="btn btn-primary" onclick="getuserdetails();">Get user details</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="rider1" value="<?php echo $uid;?>" type="text"/><a class="btn btn-primary" onclick="getridebyfbid();">Get list of rides for rider (Pass fbid of rider making the API call)</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="rider2" value="<?php echo $uid;?>" type="text"/><input id="rider2route" value="h2w" type="text"/><input id="rider2date" value="<?php echo $d;?>" type="text"/><a class="btn btn-primary" onclick="getridebyfbidRtDt();">Get list of rides for rider 2 (Pass fbid of rider making the API call,route, eventtime)</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="drivebyfbid" value="<?php echo $uid;?>" type="text"/><a class="btn btn-primary" onclick="getdriverbyfbid();">Get list of rides for driver (Pass fbid of driver making the API call)</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="drivebyfbid" value="<?php echo $uid;?>" type="text"/><input id="ridebyroute" value="h2w" type="text"/><input id="ridebydate" value="<?php echo $d;?>" type="text"/><a class="btn btn-primary" onclick="getdriverbyfbidRtDt();">Get list of rides for driver 2 (Pass fbid of driver making the API call,route, eventtime)</a></div></p>
./test/servicetest.php:	 <p><div class="input-append"><input id="myriderfbid" value="<?php echo $uid;?>" type="text"/><a class="btn btn-primary" onclick="getriderride();">Get my ride details (use it to get your ride details)</a></div></p>
./test/sys/fblogin.php:   * Verify the token we receive from Facebook is valid, and get the user's details
./test/sys/fblogin.php:    $result = @file_get_contents(self::TOKEN_URL . '?' . http_build_query($data));
./test/sys/fblogin.php:    $this->user_data = json_decode(file_get_contents(self::PROFILE_URL . '?access_token=' . $this->access_token));
./test/sys/fblogin.php:   * Helper function to get the user's Facebook info
./test/sys/fblogin.php:  public function getUser()
./test/frame.php:	document.getElementById('i').src="http://www.ridezu.com/index1.php?t=1&p="+page;
./test/testlinks.php:		  <a href="../index1.php" target="test">https://www.ridezu.com/index1.php</a>	   
./test/testlinks.php:		  <a href="../corphome.php" target="test">https://www.ridezu.com/corphome.php</a>	   
./test/testlinks.php:		  <a href="../index1.php?t=1" target="test">https://www.ridezu.com/index1.php?t=1</a>	   
./test/testlinks.php:		  <a href="../index1.php?t=2" target="test">https://www.ridezu.com/index1.php?t=2</a>	   
./test/testlinks.php:		  <a href="../d.php" target="test">https://www.ridezu.com/d.php</a>	   
./ridezu/api/model/node.php:function getNearestNode($latlon,  $distance){
./ridezu/api/model/node.php:                $db = getConnection();
./ridezu/api/model/node.php:                echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/node.php:	function getNearestPNRNode($latlon,  $distance){
./ridezu/api/model/node.php:                $db = getConnection();
./ridezu/api/model/node.php:                echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/node.php:  function getNodes($fbid,$location){
./ridezu/api/model/node.php:    	$db = getConnection();
./ridezu/api/model/node.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/ride.php:function getRides()
./ridezu/api/model/ride.php:    //  $hash=getHashKey();
./ridezu/api/model/ride.php:        $db    = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:function getRideByKeyAsObj($id)
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:function getRide($rideid)
./ridezu/api/model/ride.php:    echo json_encode(getRideAsObj($rideid));
./ridezu/api/model/ride.php:function getRideAsObj($rideid)
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:function getRideRequestAsObj($rideid)
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    //get today's date and time
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        //$hash=getHashKey();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    //get today's date and time
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        //$hash=getHashKey();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    //get today's date and time
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:			$debitwithfee = $obj->debit + getFeeByRole($obj->fbid,$obj->eventtype);
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        //$hash=getHashKey();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        //$hash=getHashKey();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        //$hash=getHashKey();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride.php:    $ride    = json_decode($request->getBody());
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:		$amount = getBaseTripAmount($driver->miles,$fbid);
./ridezu/api/model/ride.php:		//get user's timezone and convert eventtime to GMT
./ridezu/api/model/ride.php:        echo json_encode(getRideByKeyAsObj($id));
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride.php:    $ride    = json_decode($request->getBody());
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:		$amount = getBaseTripAmount($rider->miles,$fbid);
./ridezu/api/model/ride.php:         echo json_encode(getRideByKeyAsObj($id));
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    //get today's date and time
./ridezu/api/model/ride.php:    //getting day of the week (ISO) 1 for Monday and 7 for Sunday
./ridezu/api/model/ride.php:    $rides["amount"]     = getBaseTripAmount($user->miles,$user->fbid) + getFee($user->fbid);
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    //get today's date and time
./ridezu/api/model/ride.php:    //getting day of the week (ISO) 1 for Monday and 7 for Sunday
./ridezu/api/model/ride.php:    $rides["amount"]     = getBaseTripAmount($user->miles,$user->fbid);
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride.php:    $body    = json_decode($request->getBody());
./ridezu/api/model/ride.php:    //get rider's id
./ridezu/api/model/ride.php:    //get driver ride details
./ridezu/api/model/ride.php:    $ride = getRideAsObj($driverrideid);
./ridezu/api/model/ride.php:        $db = getConnection();
./ridezu/api/model/ride.php:		//get last inserted id
./ridezu/api/model/ride.php:		echo getRide($ride->rideid);
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride.php:    $body    = json_decode($request->getBody());
./ridezu/api/model/ride.php:    //get driver's fbid
./ridezu/api/model/ride.php:    //get rider's ride details
./ridezu/api/model/ride.php:    $riderride = getRideRequestAsObj($riderrideid);
./ridezu/api/model/ride.php:        $db = getConnection();
./ridezu/api/model/ride.php:			$amttocharge = getBaseTripAmount($driver->miles,$fbid);
./ridezu/api/model/ride.php:			$driverridedata = getRideByKeyAsObj($id);
./ridezu/api/model/ride.php:		$db = getConnection();
./ridezu/api/model/ride.php:		return getRide($driverridedata->rideid);
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:    //get today's date and time
./ridezu/api/model/ride.php:	$db = getConnection();
./ridezu/api/model/ride.php:		 //get driver data	
./ridezu/api/model/ride.php:	echo json_encode(getRideByKeyAsObj($rideid));
./ridezu/api/model/ride.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride.php:        $db   = getConnection();
./ridezu/api/model/ride.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/fixnode.php:$return = getNearestNode($latlong,  $distance);
./ridezu/api/model/fixnode.php:$return1 = getNearestPNRNode($latlong,  $distance);
./ridezu/api/model/notification.php:        //get user details
./ridezu/api/model/notification.php:			$ride = getRideByKeyAsObj($rideid);
./ridezu/api/model/notification.php:				$db   = getConnection();
./ridezu/api/model/notification.php:				//get touser timezone and convert notifytime to notifygmttime
./ridezu/api/model/notification.php:            echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/notification.php:	 $request = Slim::getInstance()->request();
./ridezu/api/model/notification.php:		$text = json_decode($request->getBody());
./ridezu/api/model/account.php:function getAccountSummary($fbid, $timeperiod)
./ridezu/api/model/account.php:    //get today's date and time
./ridezu/api/model/account.php:        $db   = getConnection();
./ridezu/api/model/account.php:            $workingdays                     = getWorkingDays($startdate, $enddate, array());
./ridezu/api/model/account.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/account.php:function getAccountDetail($fbid, $timeperiod)
./ridezu/api/model/account.php:    //get today's date and time
./ridezu/api/model/account.php:        $db   = getConnection();
./ridezu/api/model/account.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:function getRides()
./ridezu/api/model/ride_11_24.php:    //  $hash=getHashKey();
./ridezu/api/model/ride_11_24.php:        $db    = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:function getRideByKeyAsObj($id)
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:function getRide($rideid)
./ridezu/api/model/ride_11_24.php:    echo json_encode(getRideAsObj($rideid));
./ridezu/api/model/ride_11_24.php:function getRideAsObj($rideid)
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:function getRideRequestAsObj($rideid)
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    //get today's date and time
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    //get today's date and time
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    //get today's date and time
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:			$debitwithfee = $obj->debit + getFeeByRole($obj->fbid,$obj->eventtype);
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_24.php:    $ride    = json_decode($request->getBody());
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:		$amount = getBaseTripAmount($driver->miles,$fbid);
./ridezu/api/model/ride_11_24.php:		//get user's timezone and convert eventtime to GMT
./ridezu/api/model/ride_11_24.php:        echo json_encode(getRideByKeyAsObj($id));
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_24.php:    $ride    = json_decode($request->getBody());
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:		$amount = getBaseTripAmount($rider->miles,$fbid);
./ridezu/api/model/ride_11_24.php:         echo json_encode(getRideByKeyAsObj($id));
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    //get today's date and time
./ridezu/api/model/ride_11_24.php:    //getting day of the week (ISO) 1 for Monday and 7 for Sunday
./ridezu/api/model/ride_11_24.php:    $rides["amount"]     = getBaseTripAmount($user->miles,$user->fbid) + getFee($user->fbid);
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    //get today's date and time
./ridezu/api/model/ride_11_24.php:    //getting day of the week (ISO) 1 for Monday and 7 for Sunday
./ridezu/api/model/ride_11_24.php:    $rides["amount"]     = getBaseTripAmount($user->miles,$user->fbid);
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_24.php:    $body    = json_decode($request->getBody());
./ridezu/api/model/ride_11_24.php:    //get rider's id
./ridezu/api/model/ride_11_24.php:    //get driver ride details
./ridezu/api/model/ride_11_24.php:    $ride = getRideAsObj($driverrideid);
./ridezu/api/model/ride_11_24.php:        $db = getConnection();
./ridezu/api/model/ride_11_24.php:		//get last inserted id
./ridezu/api/model/ride_11_24.php:		echo getRide($ride->rideid);
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_24.php:    $body    = json_decode($request->getBody());
./ridezu/api/model/ride_11_24.php:    //get driver's fbid
./ridezu/api/model/ride_11_24.php:    //get rider's ride details
./ridezu/api/model/ride_11_24.php:    $riderride = getRideRequestAsObj($riderrideid);
./ridezu/api/model/ride_11_24.php:        $db = getConnection();
./ridezu/api/model/ride_11_24.php:			$amttocharge = getBaseTripAmount($driver->miles,$fbid);
./ridezu/api/model/ride_11_24.php:			$driverridedata = getRideByKeyAsObj($id);
./ridezu/api/model/ride_11_24.php:		$db = getConnection();
./ridezu/api/model/ride_11_24.php:		return getRide($driverridedata->rideid);
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:    //get today's date and time
./ridezu/api/model/ride_11_24.php:	$db = getConnection();
./ridezu/api/model/ride_11_24.php:		 //get driver data	
./ridezu/api/model/ride_11_24.php:	echo json_encode(getRideByKeyAsObj($rideid));
./ridezu/api/model/ride_11_24.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_24.php:        $db   = getConnection();
./ridezu/api/model/ride_11_24.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/user.php:function getUsers()
./ridezu/api/model/user.php:/*   $hash=getHashKey();
./ridezu/api/model/user.php:		$db = getConnection();
./ridezu/api/model/user.php:		echo '{"error":{"text":'. $e->getMessage() .'}}'; 
./ridezu/api/model/user.php:function getUser($id) {
./ridezu/api/model/user.php:        $hash=getHashKey();
./ridezu/api/model/user.php:		$db = getConnection();
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php:		$hash=getHashKey();
./ridezu/api/model/user.php:        $db = getConnection();
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php:        $hash=getHashKey();
./ridezu/api/model/user.php:		$db = getConnection();
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php:        $hash=getHashKey();
./ridezu/api/model/user.php:		$db = getConnection();
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php:    	$db = getConnection();
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php://  $hash=getHashKey();
./ridezu/api/model/user.php:  $request = Slim::getInstance()->request();
./ridezu/api/model/user.php:  $user = json_decode($request->getBody());
./ridezu/api/model/user.php:        $db = getConnection();
./ridezu/api/model/user.php:			$originnode = getNearestPNRNode($user->homelatlong,5);
./ridezu/api/model/user.php:			$destnode = getNearestNode($user->worklatlong,1);
./ridezu/api/model/user.php:		echo getUser($userid);
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php:        $request = Slim::getInstance()->request();
./ridezu/api/model/user.php:        $body = $request->getBody();
./ridezu/api/model/user.php:                $db = getConnection();
./ridezu/api/model/user.php:				echo getUser($id);
./ridezu/api/model/user.php:                echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/user.php:    $body = $request->getBody();
./ridezu/api/model/user.php:		$hash=getHashKey();
./ridezu/api/model/user.php:		$db = getConnection();
./ridezu/api/model/user.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:function getUsers()
./ridezu/api/model/user_11_5.php:/*   $hash=getHashKey();
./ridezu/api/model/user_11_5.php:		$db = getConnection();
./ridezu/api/model/user_11_5.php:		echo '{"error":{"text":'. $e->getMessage() .'}}'; 
./ridezu/api/model/user_11_5.php:function getUser($id) {
./ridezu/api/model/user_11_5.php:        $hash=getHashKey();
./ridezu/api/model/user_11_5.php:		$db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:		$hash=getHashKey();
./ridezu/api/model/user_11_5.php:        $db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:        $hash=getHashKey();
./ridezu/api/model/user_11_5.php:		$db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:    	$db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php://  $hash=getHashKey();
./ridezu/api/model/user_11_5.php:  $request = Slim::getInstance()->request();
./ridezu/api/model/user_11_5.php:  $user = json_decode($request->getBody());
./ridezu/api/model/user_11_5.php:        $db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/user_11_5.php:    $body = $request->getBody();
./ridezu/api/model/user_11_5.php:		//$hash=getHashKey();
./ridezu/api/model/user_11_5.php:        $db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/user_11_5.php:    $body = $request->getBody();
./ridezu/api/model/user_11_5.php:		$hash=getHashKey();
./ridezu/api/model/user_11_5.php:		$db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/user_11_5.php:  function getNodes($fbid,$location){
./ridezu/api/model/user_11_5.php:    	$db = getConnection();
./ridezu/api/model/user_11_5.php:        echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/model/account_11_5.php:function getAccountSummary($fbid, $timeperiod)
./ridezu/api/model/account_11_5.php:    //get today's date and time
./ridezu/api/model/account_11_5.php:        $db    = getConnection();
./ridezu/api/model/account_11_5.php:		$workingdays = getWorkingDays($startdate,$enddate,array());
./ridezu/api/model/account_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:function getRides()
./ridezu/api/model/ride_11_5.php:    //  $hash=getHashKey();
./ridezu/api/model/ride_11_5.php:        $db    = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:function getRideByKeyAsObj($id)
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:function getRide($rideid)
./ridezu/api/model/ride_11_5.php:    echo json_encode(getRideAsObj($rideid));
./ridezu/api/model/ride_11_5.php:function getRideAsObj($rideid)
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:function getRideRequestAsObj($rideid)
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    //get today's date and time
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    //get today's date and time
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    //get today's date and time
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        //$hash=getHashKey();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_5.php:    $ride    = json_decode($request->getBody());
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:		$amount = getBaseTripAmount($driver->miles,$fbid);
./ridezu/api/model/ride_11_5.php:		//get user's timezone and convert eventtime to GMT
./ridezu/api/model/ride_11_5.php:        //$updatedDriver =getRideByKeyAsObj($id);
./ridezu/api/model/ride_11_5.php:        echo json_encode(getRideByKeyAsObj($id));
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_5.php:    $ride    = json_decode($request->getBody());
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:		$amount = getBaseTripAmount($rider->miles,$fbid);
./ridezu/api/model/ride_11_5.php:         echo json_encode(getRideByKeyAsObj($id));
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    //get today's date and time
./ridezu/api/model/ride_11_5.php:    //getting day of the week (ISO) 1 for Monday and 7 for Sunday
./ridezu/api/model/ride_11_5.php:    $rides["amount"]     = getBaseTripAmount($user->miles,$user->fbid);
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    //get today's date and time
./ridezu/api/model/ride_11_5.php:    //getting day of the week (ISO) 1 for Monday and 7 for Sunday
./ridezu/api/model/ride_11_5.php:    $rides["amount"]     = getBaseTripAmount($user->miles,$user->fbid);
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_5.php:    $body    = json_decode($request->getBody());
./ridezu/api/model/ride_11_5.php:    //get rider's id
./ridezu/api/model/ride_11_5.php:    //get driver ride details
./ridezu/api/model/ride_11_5.php:    $ride = getRideAsObj($driverrideid);
./ridezu/api/model/ride_11_5.php:        $db = getConnection();
./ridezu/api/model/ride_11_5.php:		//get last inserted id
./ridezu/api/model/ride_11_5.php:		echo getRide($ride->rideid);
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    $request = Slim::getInstance()->request();
./ridezu/api/model/ride_11_5.php:    $body    = json_decode($request->getBody());
./ridezu/api/model/ride_11_5.php:    //get driver's fbid
./ridezu/api/model/ride_11_5.php:    //get rider's ride details
./ridezu/api/model/ride_11_5.php:    $riderride = getRideRequestAsObj($riderrideid);
./ridezu/api/model/ride_11_5.php:        $db = getConnection();
./ridezu/api/model/ride_11_5.php:			$amttocharge = getBaseTripAmount($driver->miles,$fbid);
./ridezu/api/model/ride_11_5.php:			$driverridedata = getRideByKeyAsObj($id);
./ridezu/api/model/ride_11_5.php:		$db = getConnection();
./ridezu/api/model/ride_11_5.php:		return getRide($driverridedata->rideid);
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:    //get today's date and time
./ridezu/api/model/ride_11_5.php:	$db = getConnection();
./ridezu/api/model/ride_11_5.php:		 //get driver data	
./ridezu/api/model/ride_11_5.php:	echo json_encode(getRideByKeyAsObj($rideid));
./ridezu/api/model/ride_11_5.php:        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/model/ride_11_5.php:        $db   = getConnection();
./ridezu/api/model/ride_11_5.php:	        echo '{"error":{"text":' . $e->getMessage() . '}}';
./ridezu/api/util_11_5.php: function getConnection() {
./ridezu/api/util_11_5.php: $app = Slim::getInstance();
./ridezu/api/util_11_5.php:function getHashKey()
./ridezu/api/util_11_5.php:	$app = Slim::getInstance();
./ridezu/api/util_11_5.php: 	$app = Slim::getInstance();
./ridezu/api/util_11_5.php:        $db = getConnection();
./ridezu/api/util_11_5.php:	function getTotalDays($startDate, $endDate)
./ridezu/api/util_11_5.php:	function getWorkingDays($startDate,$endDate,$holidays){
./ridezu/api/util_11_5.php:	function getGasPrice($fbid)
./ridezu/api/util_11_5.php:	function getMilesPerGallon($fbid)
./ridezu/api/util_11_5.php:	function getBaseTripAmount($miles,$fbid)
./ridezu/api/util_11_5.php:		$amount=$miles / getMilesPerGallon($fbid) *getGasPrice($fbid) * 0.75;
./ridezu/api/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:        $page = $this->_getPage(array($ids[0]));
./ridezu/api/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:        $this->_getNextPage();
./ridezu/api/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:            $this->_getNextPage();
./ridezu/api/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:    private function _getNextPage()
./ridezu/api/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:            $this->_items = $this->_getPage(array_slice($this->_ids, $this->_batchIndex, $this->_pageSize));
./ridezu/api/braintree-php-2.17.0/lib/Braintree/ResourceCollection.php:    private function _getPage($ids)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Test/CreditCardNumbers.php:    public static function getAll()
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Collection.php:    public function get($index)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Collection.php:    public function getIterator()
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Collection.php:     * get an offset's value
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Collection.php:     * @see get
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Collection.php:        return $this->get($offset);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Result/CreditCardVerification.php:    public function  __get($name)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Result/Successful.php:            // get a lowercase direct name for the property
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Result/Successful.php:                    get_class($objToReturn)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Plan.php:        $response = Braintree_Http::get('/plans');
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Discount.php:        $response = Braintree_Http::get('/discounts');
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Transaction.php:            $response = Braintree_Http::get('/transactions/'.$id);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/AddOn.php:        $response = Braintree_Http::get('/add_ons');
./ridezu/api/braintree-php-2.17.0/lib/Braintree/CreditCard.php:            $response = Braintree_Http::get('/payment_methods/'.$token);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Customer.php:            $response = Braintree_Http::get('/customers/'.$id);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Version.php:    public static function get()
./ridezu/api/braintree-php-2.17.0/lib/Braintree/WebhookTesting.php:        $originalZone = date_default_timezone_get();
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Xml/Generator.php:        // get the root element name
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:        $xmlRoot = Braintree_Util::delimiterToCamelCase($iterator->getName());
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:        self::$_xmlRoot = $iterator->getName();
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:            // get the attribute type string for use in conditions below
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:                $parentKey = Braintree_Util::delimiterToCamelCase($parentElement->getName());
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Xml/Parser.php:        // get the element attributes
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Address.php:            $response = Braintree_Http::get(
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Error/ValidationErrorCollection.php:    public function  __get($name)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Error/ErrorCollection.php:    public function  __get($name)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Error/Validation.php:    public function  __get($name)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Http.php:    public static function get($path)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Http.php:            'User-Agent: Braintree PHP Library ' . Braintree_Version::get(),
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Http.php:        $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Subscription.php:            $response = Braintree_Http::get('/subscriptions/' . $id);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Util.php:        // get what should be an array from the passed array
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Configuration.php:    private static function get($key)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Configuration.php:            return self::get($name);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Configuration.php:     * @param string $value pass a string to set, empty to get
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Configuration.php:        return getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Instance.php:    public function __get($name)
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Instance.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./ridezu/api/braintree-php-2.17.0/lib/Braintree/Instance.php:        return get_class($this) .'['.$objOutput.']';
./ridezu/api/braintree-php-2.17.0/lib/Braintree.php:set_include_path(get_include_path() . PATH_SEPARATOR . realpath(dirname(__FILE__)));
./ridezu/api/braintree-php-2.17.0/lib/Braintree.php:    public function __get($name)
./ridezu/api/braintree-php-2.17.0/lib/Braintree.php:            trigger_error('Undefined property on ' . get_class($this) . ': ' . $name, E_USER_NOTICE);
./ridezu/api/braintree-php-2.17.0/tests/unit/TransparentRedirectTest.php:        $originalSeparator = ini_get("arg_separator.output");
./ridezu/api/braintree-php-2.17.0/tests/unit/TransparentRedirectTest.php:        $originalZone = date_default_timezone_get();
./ridezu/api/braintree-php-2.17.0/tests/unit/TransparentRedirectTest.php:        $zoneAfterCall = date_default_timezone_get();
./ridezu/api/braintree-php-2.17.0/tests/unit/Xml_ParserTest.php:    <company>Widgets Inc</company>
./ridezu/api/braintree-php-2.17.0/tests/unit/SanityTest.php:            $code = file_get_contents($codeFile);
./ridezu/api/braintree-php-2.17.0/tests/unit/ConfigurationTest.php:        // try to get environment without setting it first
./ridezu/api/braintree-php-2.17.0/tests/unit/ConfigurationTest.php:        $this->assertEquals(getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000, $pn);
./ridezu/api/braintree-php-2.17.0/tests/TestHelper.php:  get_include_path() . PATH_SEPARATOR .
./ridezu/api/braintree-php-2.17.0/tests/TestHelper.php:    public static function includes($collection, $targetItem)
./ridezu/api/braintree-php-2.17.0/tests/TestHelper.php:            if ($item->id == $targetItem->id) {
./ridezu/api/braintree-php-2.17.0/tests/integration/TransparentRedirectTest.php:        $developmentPort = getenv("GATEWAY_PORT") ? getenv("GATEWAY_PORT") : 3000;
./ridezu/api/braintree-php-2.17.0/tests/integration/CustomerTest.php:    function testUpdate_forBillingAddressAndExistingCreditCardAndCustomerDetailsTogether()
./ridezu/api/braintree-php-2.17.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./ridezu/api/braintree-php-2.17.0/tests/integration/HttpTest.php:            Braintree_Http::get('/');
./ridezu/api/braintree-php-2.17.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./ridezu/api/braintree-php-2.17.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./ridezu/api/braintree-php-2.17.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./ridezu/api/braintree-php-2.17.0/tests/integration/TransactionTest.php:        $this->assertEquals('http://getbraintree.com', $customer->website);
./ridezu/api/braintree-php-2.17.0/tests/integration/TransactionTest.php:                'website' => 'http://getbraintree.com'
./ridezu/api/braintree-php-2.17.0/tests/integration/TransactionTest.php:            $this->assertEquals("Invalid params: transaction[bad_key]", $e->getMessage());
./ridezu/api/Slim/Logger.php:    public function getDirectory() {
./ridezu/api/Slim/Logger.php:    public function getLevel() {
./ridezu/api/Slim/Logger.php:    public function getFile() {
./ridezu/api/Slim/Logger.php:        return $this->getDirectory() . strftime('%Y-%m-%d') . '.log';
./ridezu/api/Slim/Logger.php:        $dir = $this->getDirectory();
./ridezu/api/Slim/Logger.php:        if ( $level <= $this->getLevel() ) {
./ridezu/api/Slim/Logger.php:        @file_put_contents($this->getFile(), $data, FILE_APPEND | LOCK_EX);
./ridezu/api/Slim/View.php:    public function getData( $key = null ) {
./ridezu/api/Slim/View.php:        $args = func_get_args();
./ridezu/api/Slim/View.php:    public function getTemplatesDirectory() {
./ridezu/api/Slim/View.php:        $templatePath = $this->getTemplatesDirectory() . '/' . ltrim($template, '/');
./ridezu/api/Slim/View.php:        return ob_get_clean();
./ridezu/api/Slim/Slim.php:if ( @date_default_timezone_set(date_default_timezone_get()) === false ) {
./ridezu/api/Slim/Slim.php:        $this->getMode();
./ridezu/api/Slim/Slim.php:    public function getMode() {
./ridezu/api/Slim/Slim.php:                $envMode = getenv('SLIM_MODE');
./ridezu/api/Slim/Slim.php:    public static function getInstance( $name = 'default' ) {
./ridezu/api/Slim/Slim.php:    public function getName() {
./ridezu/api/Slim/Slim.php:    public function getLog() {
./ridezu/api/Slim/Slim.php:        if ( $mode === $this->getMode() && is_callable($callable) ) {
./ridezu/api/Slim/Slim.php:     * This method defines application settings and acts as a setter and a getter.
./ridezu/api/Slim/Slim.php:     * Slim::get('/foo'[, middleware, middleware, ...], callable);
./ridezu/api/Slim/Slim.php:        $args = func_get_args();
./ridezu/api/Slim/Slim.php:    public function get() {
./ridezu/api/Slim/Slim.php:        $args = func_get_args();
./ridezu/api/Slim/Slim.php:        $args = func_get_args();
./ridezu/api/Slim/Slim.php:        $args = func_get_args();
./ridezu/api/Slim/Slim.php:        $args = func_get_args();
./ridezu/api/Slim/Slim.php:        $args = func_get_args();
./ridezu/api/Slim/Slim.php:            $this->halt(404, ob_get_clean());
./ridezu/api/Slim/Slim.php:            $this->halt(500, ob_get_clean());
./ridezu/api/Slim/Slim.php:            $existingData = is_null($this->view) ? array() : $this->view->getData();
./ridezu/api/Slim/Slim.php:        $this->response->getCookieJar()->setClassicCookie($name, $value, $time, $path, $domain, $secure, $httponly);
./ridezu/api/Slim/Slim.php:    public function getCookie( $name ) {
./ridezu/api/Slim/Slim.php:        $this->response->getCookieJar()->setCookie($name, $value, $userId, $time, $path, $domain, $secure, $httponly);
./ridezu/api/Slim/Slim.php:    public function getEncryptedCookie( $name ) {
./ridezu/api/Slim/Slim.php:        $value = $this->response->getCookieJar()->getCookieValue($name);
./ridezu/api/Slim/Slim.php:        $this->response->getCookieJar()->deleteCookie( $name, $path, $domain, $secure, $httponly );
./ridezu/api/Slim/Slim.php:        return rtrim($_SERVER['DOCUMENT_ROOT'], '/') . rtrim($this->request->getRootUri(), '/') . '/';
./ridezu/api/Slim/Slim.php:        $flash = $this->view->getData('flash');
./ridezu/api/Slim/Slim.php:        if ( ob_get_level() !== 0 ) {
./ridezu/api/Slim/Slim.php:        if ( ob_get_level() !== 0 ) {
./ridezu/api/Slim/Slim.php:        $this->view->getData('flash')->set($key, $value);
./ridezu/api/Slim/Slim.php:        $this->view->getData('flash')->now($key, $value);
./ridezu/api/Slim/Slim.php:        $this->view->getData('flash')->keep();
./ridezu/api/Slim/Slim.php:    public function getHooks( $name = null ) {
./ridezu/api/Slim/Slim.php:                $httpMethod = $this->request()->getMethod();
./ridezu/api/Slim/Slim.php:                        $httpMethodsAllowed = array_merge($httpMethodsAllowed, $route->getHttpMethods());
./ridezu/api/Slim/Slim.php:                $this->response()->write(ob_get_clean());
./ridezu/api/Slim/Slim.php:                $this->view->getData('flash')->save();
./ridezu/api/Slim/Slim.php:                $this->redirect($this->request->getRootUri() . $this->request->getResourceUri() . '/', 301);
./ridezu/api/Slim/Slim.php:                $this->getLog()->error($e);
./ridezu/api/Slim/Slim.php:                    $this->halt(500, self::generateErrorMarkup($e->getMessage(), $e->getFile(), $e->getLine(), $e->getTraceAsString()));
./ridezu/api/Slim/Slim.php:        echo self::generateTemplateMarkup('404 Page Not Found', '<p>The page you are looking for could not be found. Check the address bar to ensure your URL is spelled correctly. If all else fails, you can visit our home page at the link below.</p><a href="' . $this->request->getRootUri() . '">Visit the Home Page</a>');
./ridezu/api/Slim/Http/Response.php:     * Set and/or get the HTTP response version
./ridezu/api/Slim/Http/Response.php:     * Set and/or get the HTTP response status code
./ridezu/api/Slim/Http/Response.php:    public function getCookieJar() {
./ridezu/api/Slim/Http/Response.php:    public static function getMessageForCode( $status ) {
./ridezu/api/Slim/Http/Response.php:            header('Status: ' . self::getMessageForCode($this->status()));
./ridezu/api/Slim/Http/Response.php:            header(sprintf('HTTP/%s %s', $this->httpVersion, self::getMessageForCode($this->status())));
./ridezu/api/Slim/Http/Response.php:        foreach ( $this->getCookieJar()->getResponseCookies() as $name => $cookie ) {
./ridezu/api/Slim/Http/Response.php:            setcookie($cookie->getName(), $cookie->getValue(), $cookie->getExpires(), $cookie->getPath(), $cookie->getDomain(), $cookie->getSecure(), $cookie->getHttpOnly());
./ridezu/api/Slim/Http/Request.php:    protected $get;
./ridezu/api/Slim/Http/Request.php:        $this->body = @file_get_contents('php://input');
./ridezu/api/Slim/Http/Request.php:        $this->get = self::stripSlashesIfMagicQuotes($_GET);
./ridezu/api/Slim/Http/Request.php:        $this->root = Slim_Http_Uri::getBaseUri(true);
./ridezu/api/Slim/Http/Request.php:        $this->resource = Slim_Http_Uri::getUri(true);
./ridezu/api/Slim/Http/Request.php:        foreach ( array('put', 'post', 'get') as $dataSource ) {
./ridezu/api/Slim/Http/Request.php:    public function get( $key = null ) {
./ridezu/api/Slim/Http/Request.php:        return $this->arrayOrArrayValue($this->get, $key);
./ridezu/api/Slim/Http/Request.php:    public function getBody() {
./ridezu/api/Slim/Http/Request.php:    public function getMethod() {
./ridezu/api/Slim/Http/Request.php:    public function getContentType() {
./ridezu/api/Slim/Http/Request.php:    public function getResourceUri() {
./ridezu/api/Slim/Http/Request.php:    public function getRootUri() {
./ridezu/api/Slim/Http/Request.php:        if ( get_magic_quotes_gpc() ) {
./ridezu/api/Slim/Http/Request.php:        if ( $this->getContentType() === 'application/x-www-form-urlencoded' ) {
./ridezu/api/Slim/Http/CookieJar.php:    public function getHighConfidentiality() {
./ridezu/api/Slim/Http/CookieJar.php:    public function getSSL() {
./ridezu/api/Slim/Http/CookieJar.php:    public function getResponseCookies() {
./ridezu/api/Slim/Http/CookieJar.php:    public function getResponseCookie( $cookiename ) {
./ridezu/api/Slim/Http/CookieJar.php:    public function getCookieValue( $cookiename, $deleteIfInvalid = true ) {
./ridezu/api/Slim/Http/CookieJar.php:                    if ( $cookieData !== '' && $this->getHighConfidentiality() ) {
./ridezu/api/Slim/Http/CookieJar.php:        if ( $value !== '' && $this->getHighConfidentiality() ) {
./ridezu/api/Slim/Http/CookieJar.php:        $ivSize = mcrypt_enc_get_iv_size($this->_cryptModule);
./ridezu/api/Slim/Http/CookieJar.php:        $keySize = mcrypt_enc_get_key_size($this->_cryptModule);
./ridezu/api/Slim/Http/Uri.php:    public static function getBaseUri( $reload = false ) {
./ridezu/api/Slim/Http/Uri.php:    public static function getUri( $reload = false ) {
./ridezu/api/Slim/Http/Uri.php:                    $uri = parse_url(self::getScheme() . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'], PHP_URL_PATH);
./ridezu/api/Slim/Http/Uri.php:            if ( self::getBaseUri() !== '' && strpos($uri, self::getBaseUri()) === 0 ) {
./ridezu/api/Slim/Http/Uri.php:                $uri = substr($uri, strlen(self::getBaseUri()));
./ridezu/api/Slim/Http/Uri.php:    public static function getScheme( $reload = false ) {
./ridezu/api/Slim/Http/Uri.php:    public static function getQueryString( $reload = false ) {
./ridezu/api/Slim/Http/Cookie.php:    public function getName() {
./ridezu/api/Slim/Http/Cookie.php:    public function getValue() {
./ridezu/api/Slim/Http/Cookie.php:    public function getExpires() {
./ridezu/api/Slim/Http/Cookie.php:    public function getPath() {
./ridezu/api/Slim/Http/Cookie.php:    public function getDomain() {
./ridezu/api/Slim/Http/Cookie.php:    public function getSecure() {
./ridezu/api/Slim/Http/Cookie.php:    public function getHttpOnly() {
./ridezu/api/Slim/Session/Handler/Cookies.php:        return $this->app->getEncryptedCookie($id);
./ridezu/api/Slim/Session/Flash.php:    public function getSessionKey() {
./ridezu/api/Slim/Session/Flash.php:    public function getMessages() {
./ridezu/api/Slim/Session/Flash.php:        $messages = $this->getMessages();
./ridezu/api/Slim/Session/Flash.php:        $messages = $this->getMessages();
./ridezu/api/Slim/Route.php:        $this->setConditions(self::getDefaultConditions());
./ridezu/api/Slim/Route.php:    public static function getDefaultConditions() {
./ridezu/api/Slim/Route.php:    public function getPattern() {
./ridezu/api/Slim/Route.php:    public function getCallable() {
./ridezu/api/Slim/Route.php:    public function getConditions() {
./ridezu/api/Slim/Route.php:    public function getName() {
./ridezu/api/Slim/Route.php:    public function getParams() {
./ridezu/api/Slim/Route.php:        $args = func_get_args();
./ridezu/api/Slim/Route.php:    public function getHttpMethods() {
./ridezu/api/Slim/Route.php:        $args = func_get_args();
./ridezu/api/Slim/Route.php:        $args = func_get_args();
./ridezu/api/Slim/Route.php:    public function getRouter() {
./ridezu/api/Slim/Route.php:    public function getMiddleware() {
./ridezu/api/Slim/Route.php:        if ( substr($this->pattern, -1) === '/' && substr($this->router->getRequest()->getResourceUri(), -1) !== '/' ) {
./ridezu/api/Slim/Route.php:        if ( is_callable($this->getCallable()) ) {
./ridezu/api/Slim/Router.php:    public function getIterator() {
./ridezu/api/Slim/Router.php:        return new ArrayIterator($this->getMatchedRoutes());
./ridezu/api/Slim/Router.php:    public function getRequest() {
./ridezu/api/Slim/Router.php:    public function getMatchedRoutes( $reload = false ) {
./ridezu/api/Slim/Router.php:                if ( $route->matches($this->request->getResourceUri()) ) {
./ridezu/api/Slim/Router.php:        $pattern = $this->namedRoutes[(string)$name]->getPattern();
./ridezu/api/Slim/Router.php:        ), '', $this->request->getRootUri() . $pattern);
./ridezu/api/Slim/Log.php:    public function getLogger() {
./ridezu/api/index_11_5.php:$app->get('/', 'getAPIList');
./ridezu/api/index_11_5.php:$app->get('/v/1/users', 'getUsers' );
./ridezu/api/index_11_5.php:$app->get('/v/1/users/:id',	'getUser');
./ridezu/api/index_11_5.php:$app->get('/v/1/users/search/fname/:query', 'findByName');
./ridezu/api/index_11_5.php:$app->get('/v/1/users/search/fbid/:query', 'findByFB');
./ridezu/api/index_11_5.php:$app->get('/v/1/users/search/fbid/:fbid/location/:location','getNodes'); 
./ridezu/api/index_11_5.php:$app->get('/v/1/rides','getRides'); //get all rides - helper method - will be removed later
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/:id','getRide'); //get particular ride
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/:id/driver','getDriverRide'); //get driver data for particular ride
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/:id/rider','getRiderRide'); //get rider data for particular ride
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/driver/fbid/:fbid','findByDriverFB'); //search rides by a particular driver
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/rider/fbid/:fbid','findByRiderFB'); //search rides by particular passenger
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/fbid/:fbid','findRideByFB'); //search rides/requests by FB id
./ridezu/api/index_11_5.php:$app->get('/v/1//rides/search/eventtime/:query','findRidesByTime'); //search ride based on particular date/time (origin and dest are implicit)
./ridezu/api/index_11_5.php:$app->get('/rides/search/eventtime/:query/driver','findDriversByTime');
./ridezu/api/index_11_5.php:$app->get('/rides/search/eventtime/:query/rider','findRidersByTime');
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/fbid/:query/searchroute/:searchroute/searchdate/:searchdate/driver','findMatchingDrivers');
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/fbid/:query/driver','findDefaultMatchingDrivers');
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/fbid/:query/searchroute/:searchroute/searchdate/:searchdate/rider','findMatchingRiders');
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/search/fbid/:query/rider','findDefaultMatchingRiders');
./ridezu/api/index_11_5.php:$app->get('/v/1/rides/eventstate/COMPLETE','completeRide');
./ridezu/api/index_11_5.php://get account data
./ridezu/api/index_11_5.php:$app->get('/v/1/account/fbid/:query/timeperiod/:timeperiod','getAccountSummary');
./ridezu/api/index_11_5.php:function getAPIList() {
./ridezu/api/index_11_5.php:  $hash=getHashKey();
./ridezu/api/util.php:function getConnection()
./ridezu/api/util.php:    $app = Slim::getInstance();
./ridezu/api/util.php:function getHashKey()
./ridezu/api/util.php:    $app     = Slim::getInstance();
./ridezu/api/util.php:    $app     = Slim::getInstance();
./ridezu/api/util.php:    $reqURL  = $req->getResourceUri();
./ridezu/api/util.php:        $db   = getConnection();
./ridezu/api/util.php:function getTotalDays($startDate, $endDate)
./ridezu/api/util.php:function getWorkingDays($startDate, $endDate, $holidays)
./ridezu/api/util.php:function getGasPrice($fbid)
./ridezu/api/util.php:function getMilesPerGallon($fbid)
./ridezu/api/util.php:function getBaseTripAmount($miles, $fbid)
./ridezu/api/util.php:    $amount = $miles / getMilesPerGallon($fbid) * getGasPrice($fbid) * 0.75;
./ridezu/api/util.php:function getFee($fbid)
./ridezu/api/util.php:function getFeeByRole($fbid, $eventtype)
./ridezu/api/util.php:        return getFee($fbid); //rider
./ridezu/api/index.php:$app->get('/v/1/users', 'getUsers' );
./ridezu/api/index.php:$app->get('/v/1/users/:id',	'getUser');
./ridezu/api/index.php:$app->get('/v/1/users/search/fname/:query', 'findByName');
./ridezu/api/index.php:$app->get('/v/1/users/search/fbid/:query', 'findByFB');
./ridezu/api/index.php:$app->get('/v/1/users/searchpublic/fbid/:query', 'findPublicDataByFB');
./ridezu/api/index.php:$app->get('/v/1/users/search/fbid/:fbid/location/:location','getNodes'); 
./ridezu/api/index.php:$app->get('/v/1/rides','getRides'); //get all rides - helper method - will be removed later
./ridezu/api/index.php:$app->get('/v/1/rides/:id','getRide'); //get particular ride
./ridezu/api/index.php:$app->get('/v/1/rides/:id/driver','getDriverRide'); //get driver data for particular ride
./ridezu/api/index.php:$app->get('/v/1/rides/:id/rider','getRiderRide'); //get rider data for particular ride
./ridezu/api/index.php:$app->get('/v/1/rides/search/driver/fbid/:fbid','findByDriverFB'); //search rides by a particular driver
./ridezu/api/index.php:$app->get('/v/1/rides/search/rider/fbid/:fbid','findByRiderFB'); //search rides by particular passenger
./ridezu/api/index.php:$app->get('/v/1/rides/search/fbid/:fbid','findRideByFB'); //search rides/requests by FB id
./ridezu/api/index.php:$app->get('/v/1//rides/search/eventtime/:query','findRidesByTime'); //search ride based on particular date/time (origin and dest are implicit)
./ridezu/api/index.php:$app->get('/rides/search/eventtime/:query/driver','findDriversByTime');
./ridezu/api/index.php:$app->get('/rides/search/eventtime/:query/rider','findRidersByTime');
./ridezu/api/index.php:$app->get('/v/1/rides/search/fbid/:query/searchroute/:searchroute/searchdate/:searchdate/driver','findMatchingDrivers');
./ridezu/api/index.php:$app->get('/v/1/rides/search/fbid/:query/driver','findDefaultMatchingDrivers');
./ridezu/api/index.php:$app->get('/v/1/rides/search/fbid/:query/searchroute/:searchroute/searchdate/:searchdate/rider','findMatchingRiders');
./ridezu/api/index.php:$app->get('/v/1/rides/search/fbid/:query/rider','findDefaultMatchingRiders');
./ridezu/api/index.php:$app->get('/v/1/rides/eventstate/COMPLETE','completeRide');
./ridezu/api/index.php:$app->get('/v/1/reminder','rideReminder');
./ridezu/api/index.php:$app->get('/v/1/account/summary/fbid/:query/timeperiod/:timeperiod','getAccountSummary');
./ridezu/api/index.php:$app->get('/v/1/account/detail/fbid/:query/timeperiod/:timeperiod','getAccountDetail');
./ridezu/api/index.php:$app->get('/v/1/payment','makePayment');
./ridezu/api/notification/NotifyBySMS.class.php:		$this->accountSid = TWILIO_ACCSID; //get your own after trial registration on Twilio.com
./ridezu/api/notification/NotifyBySMS.class.php:				echo $e->getMessage(), "\n";
./ridezu/api/notification/NotificationHandler.php:		echo "Connection Error: " . $e->getMessage();
./ridezu/api/notification/NotificationHandler.php:		echo $e->getMessage(), "\n";
./ridezu/api/notification/Notification.class.php:	public function getNotifyInfo() {
./ridezu/api/notification/Notification.class.php:			echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/notification/Notification.class.php:	public function getNotificationTemplate($data){
./ridezu/api/notification/Notification.class.php:				echo '{"error":{"text":'. $e->getMessage() .'}}';
./ridezu/api/notification/Notification.class.php:				echo $e->getMessage(), "\n";
./ridezu/api/notification/Notification.class.php:		$notifyInfo = $this->getNotifyInfo(); 
./ridezu/api/notification/Notification.class.php:				    // get the template and return the string
./ridezu/api/notification/Notification.class.php:					 $tplMsg = $this->getNotificationTemplate($ntf);
./ridezu/api/notification/Services/Twilio.php:            if (!in_array('curl', get_loaded_extensions())) {
./ridezu/api/notification/Services/Twilio.php:        $this->account = $this->accounts->get($sid);
./ridezu/api/notification/Services/Twilio.php:    public function getVersion() {
./ridezu/api/notification/Services/Twilio.php:    public function getRetryAttempts() {
./ridezu/api/notification/Services/Twilio.php:    public static function getRequestUri($path, $params, $full_uri = false) {
./ridezu/api/notification/Services/Twilio.php:        $uri = self::getRequestUri($path, $params, $full_uri);
./ridezu/api/notification/Services/Twilio.php:        return $this->_makeIdempotentRequest(array($this->http, 'get'), 
./ridezu/api/notification/Services/Twilio.php:        $uri = self::getRequestUri($path, $params);
./ridezu/api/notification/Services/Twilio/TimeRangeResource.php:    public function getCategory($category) {
./ridezu/api/notification/Services/Twilio/TimeRangeResource.php:        $page = $this->getPage(0, 1, array(
./ridezu/api/notification/Services/Twilio/TimeRangeResource.php:        $items = $page->getItems();
./ridezu/api/notification/Services/Twilio/AutoPagingIterator.php:            if ($e->getCode() != 20006) {
./ridezu/api/notification/Services/Twilio/AutoPagingIterator.php:     * Restore everything to the way it was before we began paging. This gets 
./ridezu/api/notification/Services/Twilio/AutoPagingIterator.php:            if ($e->getCode() != 20006) {
./ridezu/api/notification/Services/Twilio/AutoPagingIterator.php:            $this->items = $page->getItems();
./ridezu/api/notification/Services/Twilio/UsageResource.php:    public function getResourceName($camelized = false) {
./ridezu/api/notification/Services/Twilio/InstanceResource.php:    public function __get($key)
./ridezu/api/notification/Services/Twilio/InstanceResource.php:        if ($subresource = $this->getSubresources($key)) {
./ridezu/api/notification/Services/Twilio/Resource.php:    public function getSubresources($name = null) {
./ridezu/api/notification/Services/Twilio/Resource.php:        foreach (func_get_args() as $name) {
./ridezu/api/notification/Services/Twilio/Resource.php:    public function getResourceName($camelized = false) 
./ridezu/api/notification/Services/Twilio/Resource.php:        $name = get_class($this);
./ridezu/api/notification/Services/Twilio/Resource.php:    public function __get($key) {
./ridezu/api/notification/Services/Twilio/Resource.php:        if ($subresource = $this->getSubresources($key)) {
./ridezu/api/notification/Services/Twilio/TinyHttp.php:    case 'get':
./ridezu/api/notification/Services/Twilio/TinyHttp.php:            $status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
./ridezu/api/notification/Services/Twilio/TinyHttp.php:                curl_getinfo($curl, CURLINFO_HEADER_OUT) .
./ridezu/api/notification/Services/Twilio/ListResource.php:        $name = $this->getResourceName(true);
./ridezu/api/notification/Services/Twilio/ListResource.php:         * By default trim the 's' from the end of the list name to get the
./ridezu/api/notification/Services/Twilio/ListResource.php:    public function get($sid)
./ridezu/api/notification/Services/Twilio/ListResource.php:    public function getObjectFromJson($params, $idParam = "sid")
./ridezu/api/notification/Services/Twilio/ListResource.php:    public function getPage(
./ridezu/api/notification/Services/Twilio/ListResource.php:        $list_name = $this->getResourceName();
./ridezu/api/notification/Services/Twilio/ListResource.php:            array($this, 'getObjectFromJson'),
./ridezu/api/notification/Services/Twilio/ListResource.php:    public function getIterator(
./ridezu/api/notification/Services/Twilio/ListResource.php:            array($this, 'getPageGenerator'), $page, $size, $filters
./ridezu/api/notification/Services/Twilio/ListResource.php:    public function getPageGenerator(
./ridezu/api/notification/Services/Twilio/ListResource.php:        return $this->getPage($page, $size, $filters, $deep_paging_uri);
./ridezu/api/notification/Services/Twilio/Rest/Members.php:    public function getObjectFromJson($params, $idParam = 'sid') {
./ridezu/api/notification/Services/Twilio/Rest/Members.php:        return parent::getObjectFromJson($params, 'call_sid');
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getLocal($country)
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:            'getList',
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:            array($this, 'getList'),
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getTollFree($country)
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:            'getList',
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:            array($this, 'getList'),
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getList($country, $type, array $params = array())
./ridezu/api/notification/Services/Twilio/Rest/AvailablePhoneNumbers.php:    public function getResourceName($camelized = false)
./ridezu/api/notification/Services/Twilio/Rest/Participants.php:    public function getObjectFromJson($params, $idParam = "sid") {
./ridezu/api/notification/Services/Twilio/Rest/Participants.php:        return parent::getObjectFromJson($params, "call_sid");
./ridezu/api/notification/Services/Twilio/RestException.php:    public function getStatus()
./ridezu/api/notification/Services/Twilio/RestException.php:    public function getInfo()
./ridezu/api/notification/Services/Twilio/Page.php:    public function getItems()
./ridezu/api/notification/Services/Twilio/Page.php:    public function __get($prop)
./ridezu/api/notification/Services/Twilio/Page.php:     * Implementation of IteratorAggregate::getIterator().
./ridezu/api/notification/Services/Twilio/Page.php:    public function getIterator()
./ridezu/api/notification/Services/Twilio/Page.php:        return $this->getItems();
./ridezu/api/notification/NotificationTemplate.class.php:				    $output = file_get_contents($this->file);
./ridezu/api/notification/NotificationTemplate.class.php:			echo $e->getMessage(), "\n";
